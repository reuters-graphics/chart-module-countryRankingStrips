webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar CountryRankingStrips = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(CountryRankingStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryRankingStrips);\n\n  function CountryRankingStrips() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, CountryRankingStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      locale: 'en',\n      dataParams: {\n        key: 'key',\n        value: 'value'\n      },\n      height: 100,\n      margin: {\n        top: 18,\n        right: 18,\n        bottom: 20,\n        left: 4\n      },\n      densityPlot: false,\n      histogram: false,\n      // distributionProps: {\n      //   bandwidth: 1,\n      //   threshold: 35, // same as bin-width for histogram\n      //   curveType: 'curveBasis',\n      // },\n      rugPlot: true,\n      rugProps: {\n        height: 16,\n        annotation: [{\n          key: 'ES',\n          text: 'Spain'\n        }]\n      },\n      // markDataPoint: [// key should be same as dataParams\n      //   {\n      //     key: 'FR',\n      //     // text: 'India',\n      //   },\n      //   // {\n      //   //   key: 'CA',\n      //   //   // text: 'Yemen',\n      //   // },\n      // ],\n      // chartTitle : \"\",\n      annotation: {\n        // for distribution chart\n        size: 500,\n        offset: 6 // orient: 'right', // left or right\n\n      }\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(CountryRankingStrips, [{\n    key: \"draw\",\n    // defaultData = defaultData;\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].transition().duration(750); // number formatters\n\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default.a(props.locale);\n      var numFormat = locale.format(','); // ADD CHART TITLE\n\n      if (props.chartTitle) {\n        this.selection().appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // FIX DATA\n      // filter null and NaN, keep 0's\n\n\n      var data = allData.filter(function (d) {\n        return parseFloat(d[props.dataParams.value]) !== 'null' && !isNaN(parseFloat(d[props.dataParams.value]));\n      });\n      var dataValues = data.map(function (d) {\n        return d[props.dataParams.value];\n      });\n      var extent = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues);\n      var min = extent[0];\n      var max = extent[1]; // We normalize data to fit in a range 0 - 100\n\n      var normalize = function normalize(d) {\n        return 100 * (d - min) / (max - min);\n      };\n\n      if (props.histogram || props.densityPlot) {\n        dataValues = dataValues.map(function (d) {\n          return normalize(d);\n        });\n        data = data.map(function (d) {\n          return {\n            key: d[props.dataParams.key],\n            value: normalize(d[props.dataParams.value])\n          };\n        });\n      }\n\n      console.log(data); // DEFINE SCALES\n\n      var xScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues)).nice().range([props.margin.left, width - props.margin.right]);\n\n      if (props.histogram || props.densityPlot) {\n        var _thresholds = xScale.ticks(props.distributionProps.threshold);\n\n        var _bins = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].histogram().domain(xScale.domain()).thresholds(_thresholds)(dataValues);\n\n        var _yScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([0, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].max(_bins, function (d) {\n          return d.length;\n        }) / data.length]).range([props.height - props.margin.bottom, props.margin.top]);\n      } // DRAW CHART\n\n\n      var chartSVG = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width).attr('height', props.height).attr('class', 'CountryRankingStrips'); // add chart plot holder\n\n      var plot = chartSVG.appendSelect('g.plot').attr('class', 'plot'); // add axis\n\n      chartSVG.appendSelect('g.axis-x').attr('class', 'axis axis-x').transition(transition).attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom, \")\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScale) // .tickValues(thresholds)\n      // .tickValues(xScale.domain())\n      .tickFormat(numFormat)); // chartSVG.appendSelect('g.axis-y')\n      //   .attr('transform', `translate(${props.margin.left},0)`)\n      //   .call(d3.axisLeft(yScale).ticks(null, '%'))\n      //   .call(g => g.select('.domain').remove());\n\n      if (props.densityPlot) {\n        var distributionLine = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].line().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y(function (d) {\n          return yScale(d[1]);\n        });\n        var distributionArea = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].area().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y1(function (d) {\n          return yScale(d[1]);\n        }).y0(function (d) {\n          return yScale(0);\n        }); // DISTRIBUTION MATH\n\n        var kde = function kde(kernel, thresholds, data) {\n          return thresholds.map(function (t) {\n            return [t, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mean(data, function (d) {\n              return kernel(t - d);\n            })];\n          });\n        };\n\n        var epanechnikov = function epanechnikov(bandwidth) {\n          return function (x) {\n            return Math.abs(x /= bandwidth) <= 1 ? 0.75 * (1 - x * x) / bandwidth : 0;\n          };\n        };\n\n        var density = kde(epanechnikov(props.distributionProps.bandwidth), thresholds, dataValues); // console.log(yScale.domain());\n\n        console.log('density', density);\n        console.log('bins', bins);\n        plot.appendSelect('path.distribution-area').attr('class', 'area distribution-area').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionArea); // console.log('area', d3.polygonArea((density)));\n\n        plot.appendSelect('path.distribution-line').attr('class', 'line distribution-line').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionLine); // HIGHLIGHT DATA PONT\n\n        if (props.markDataPoint) {\n          // set data point\n          var markerData = props.markDataPoint.map(function (element) {\n            var val = element[props.dataParams.value] ? normalize(element[props.dataParams.value]) : normalize(allData.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value]);\n            var posDist = 0;\n            var posBin = bins.find(function (element, i) {\n              posDist = i;\n              return element.includes(val);\n            });\n            var densityScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([posBin.x0, posBin.x1]).range([density[posDist][1], density[posDist + 1][1]]);\n            return {\n              key: element[props.dataParams.key],\n              value: val,\n              text: element.text,\n              densityIndex: posDist,\n              density: densityScale(val),\n              bin: posBin\n            };\n          }); // width of highlight rect\n\n          var highlightWidth = width / data.length; // console.log(markerData);\n          // add distrubution clipping mask\n\n          var svgDefs = chartSVG.appendSelect('defs');\n          svgDefs.appendSelect('clipPath').attr('id', \"\".concat(node.id, \"-clip-path\")).appendSelect('path').transition(transition).attr('d', distributionArea(density)); // add highlight shape\n\n          var highlightGroup = chartSVG.appendSelect('g.highlights').attr('class', 'highlights');\n          var highlights = highlightGroup.selectAll('rect').data(markerData);\n          highlights.enter().append('rect').attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.height - props.margin.bottom).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\")).merge(highlights).transition(transition.delay(50).duration(750)).attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.margin.top).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\"));\n          highlights.exit().attr('height', 0).transition(transition).remove(); // add highlight marker for annotation\n\n          var arc = {};\n          arc.right = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(r, -props.annotation.offset, r, Math.PI, -Math.PI / 2, false);\n            }\n          };\n          arc.left = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(-r, -props.annotation.offset, r, 0, -Math.PI / 2, true);\n            }\n          };\n          var pointerSymbol = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc[props.annotation.orient]).size(props.annotation.size);\n          var arcRadius = Math.sqrt(2 * props.annotation.size / Math.PI); // const symBolMarker = props.markDataPoint.map(d => {\n          //   return {\n          //     key: d[props.dataParams.key],\n          //     line: [\n          //       [25, -25], [20, -25], [5, -20], [0, 0],\n          //     ],\n          //   };\n          // });\n          // const pathMarker = d3.line()\n          //   .curve(d3.curveBasis)\n          //   .x(d => (d[0]))\n          //   .y(d => (d[1]));\n\n          var highlightMarkers = highlightGroup.selectAll('g.marker-g').data(markerData, function (d) {\n            return d.key;\n          });\n          var markerG = highlightMarkers.enter().append('g').attr('class', function (d) {\n            return \"marker-g \".concat(d.key);\n          }).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          markerG.append('path').attr('class', function (d) {\n            return \"marker \".concat(d.key);\n          }).attr('fill', 'none').attr('d', function (d) {\n            return props.annotation.orient ? pointerSymbol() : xScale(d.value) >= width / 5 ? _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.left).size(props.annotation.size)() : _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.right).size(props.annotation.size)();\n          });\n          markerG.append('text').attr('transform', function (d) {\n            return xScale(d.value) >= width / 5 ? \"translate(\".concat(-arcRadius - 6, \", \").concat(-arcRadius - 6, \")\") : \"translate(\".concat(arcRadius + 6, \", \").concat(-arcRadius - 6, \")\");\n          }).attr('text-anchor', function (d) {\n            return xScale(d.value) >= width / 5 ? 'end' : 'start';\n          }).append('tspan').text(function (d) {\n            return d.text ? \"\".concat(d.text) : \"\".concat(d.key);\n          });\n          highlightMarkers.merge(highlightMarkers).transition(transition).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          highlightMarkers.exit().remove();\n        }\n      } // RUGPLOT\n\n\n      if (props.rugPlot) {\n        var rugPosition = {\n          y: props.height - props.margin.bottom - props.rugProps.height - 4,\n          height: props.rugProps.height\n        }; // if (props.histogram || props.densityPlot) {\n        // }\n\n        var rugPlot = plot.appendSelect('g.rugplot').attr('class', 'rugplot');\n        var rugs = rugPlot.selectAll('rect').data(data);\n        rugs.enter().append('rect').attr('class', function (d) {\n          return \"\".concat(d.key);\n        }) // .attr('data-value', d => `${d.value}`)\n        .attr('x', function (d) {\n          return xScale(d.value);\n        }).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', 2).merge(rugs).transition(transition).attr('x', function (d) {\n          return xScale(d.value);\n        }).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', 2);\n        rugs.exit().remove(); // add highlight\n\n        if (props.rugProps.annotation && !(props.histogram || props.densityPlot)) {\n          var _highlightGroup = rugPlot.appendSelect('g.highlight-g').attr('class', 'highlight-g');\n\n          _highlightGroup.appendSelect('rect.highlight-bar').attr('class', 'highlight-bar').style('opacity', 0.55).attr('x', xScale.range()[0]).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', xScale.range()[1] - xScale.range()[0]).transition(transition).attr('width', xScale.range()[1] - xScale.range()[0]);\n\n          var _markerData = props.rugProps.annotation.map(function (element) {\n            var val = element[props.dataParams.value] ? element[props.dataParams.value] : data.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value];\n            return {\n              key: element[props.dataParams.key],\n              value: val,\n              text: element.text || element[props.dataParams.key]\n            };\n          });\n\n          var _highlightMarkers = _highlightGroup.selectAll('g.marker-g').data(_markerData, function (d) {\n            return d.key;\n          });\n\n          var _markerG = _highlightMarkers.enter().append('g').attr('class', function (d) {\n            return \"marker-g \".concat(d.key);\n          }).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(rugPosition.y - 24, \")\");\n          });\n\n          _markerG.append('path').attr('class', function (d) {\n            return \"marker \".concat(d.key);\n          }).attr('fill', 'none'); // .attr(', );\n\n\n          _markerG.append('text') // .attr('transform', d => xScale(d.value) >= width / 5 ? `translate(${-arcRadius - 6}, ${-arcRadius - 6})` : `translate(${arcRadius + 6}, ${-arcRadius - 6})`)\n          // .attr('text-anchor', d => xScale(d.value) >= width / 5 ? 'end' : 'start')\n          .append('tspan').text(function (d) {\n            return \"\".concat(d.text);\n          });\n\n          _highlightMarkers.merge(_highlightMarkers).transition(transition).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n\n          _highlightMarkers.exit().remove();\n        }\n      } // HISTOGRAM CODE\n\n\n      if (props.histogram) {\n        var hists = plot.appendSelect('g.histogram').attr('class', 'histogram').selectAll('rect').data(bins);\n        hists.enter().append('rect').attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        }).merge(hists).transition(transition).attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        });\n        hists.exit().remove(); // FOR HIGHLIGHTING THE BIN WITH THE DATA POINT\n        // const dataHighlight = bins.find(element => {\n        //   return element.includes(6.2960862166761205);\n        // });\n        // console.log((dataHighlight));\n        // const posHighlight = (d) => {\n        //   return [\n        //     [(d.x0), (0)],\n        //     [(d.x0), density[(d.x0)][1]],\n        //     [(d.x1), density[(d.x1)][1]],\n        //     [(d.x1), (0)],\n        //   ];\n        // };\n        // console.log(pathHighlight(dataHighlight));\n        // plot.appendSelect('path.area-highlight')\n        //   .attr('class', 'area-highlight')\n        //   .datum(pathHighlight(dataHighlight))\n        //   .attr('fill', 'red')\n        //   .style('clip-path', 'url(#clip-path)')\n        //   .attr('d', distributionArea);\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryRankingStrips;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountryRankingStrips);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiQ291bnRyeVJhbmtpbmdTdHJpcHMiLCJsb2NhbGUiLCJkYXRhUGFyYW1zIiwia2V5IiwidmFsdWUiLCJoZWlnaHQiLCJtYXJnaW4iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJkZW5zaXR5UGxvdCIsImhpc3RvZ3JhbSIsInJ1Z1Bsb3QiLCJydWdQcm9wcyIsImFubm90YXRpb24iLCJ0ZXh0Iiwic2l6ZSIsIm9mZnNldCIsImFsbERhdGEiLCJkYXRhIiwicHJvcHMiLCJub2RlIiwic2VsZWN0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJ0cmFuc2l0aW9uIiwiZDMiLCJkdXJhdGlvbiIsIkQzTG9jYWxlIiwibnVtRm9ybWF0IiwiZm9ybWF0IiwiY2hhcnRUaXRsZSIsImFwcGVuZFNlbGVjdCIsImF0dHIiLCJodG1sIiwiZmlsdGVyIiwiZCIsInBhcnNlRmxvYXQiLCJpc05hTiIsImRhdGFWYWx1ZXMiLCJtYXAiLCJleHRlbnQiLCJtaW4iLCJtYXgiLCJub3JtYWxpemUiLCJjb25zb2xlIiwibG9nIiwieFNjYWxlIiwic2NhbGVMaW5lYXIiLCJkb21haW4iLCJuaWNlIiwicmFuZ2UiLCJ0aHJlc2hvbGRzIiwidGlja3MiLCJkaXN0cmlidXRpb25Qcm9wcyIsInRocmVzaG9sZCIsImJpbnMiLCJ5U2NhbGUiLCJsZW5ndGgiLCJjaGFydFNWRyIsInBsb3QiLCJjYWxsIiwiYXhpc0JvdHRvbSIsInRpY2tGb3JtYXQiLCJkaXN0cmlidXRpb25MaW5lIiwibGluZSIsImN1cnZlIiwiY3VydmVUeXBlIiwieCIsInkiLCJkaXN0cmlidXRpb25BcmVhIiwiYXJlYSIsInkxIiwieTAiLCJrZGUiLCJrZXJuZWwiLCJ0IiwibWVhbiIsImVwYW5lY2huaWtvdiIsImJhbmR3aWR0aCIsIk1hdGgiLCJhYnMiLCJkZW5zaXR5IiwiZGF0dW0iLCJtYXJrRGF0YVBvaW50IiwibWFya2VyRGF0YSIsImVsZW1lbnQiLCJ2YWwiLCJmaW5kIiwiZSIsInBvc0Rpc3QiLCJwb3NCaW4iLCJpIiwiaW5jbHVkZXMiLCJkZW5zaXR5U2NhbGUiLCJ4MCIsIngxIiwiZGVuc2l0eUluZGV4IiwiYmluIiwiaGlnaGxpZ2h0V2lkdGgiLCJzdmdEZWZzIiwiaWQiLCJoaWdobGlnaHRHcm91cCIsImhpZ2hsaWdodHMiLCJzZWxlY3RBbGwiLCJlbnRlciIsImFwcGVuZCIsInN0eWxlIiwibWVyZ2UiLCJkZWxheSIsImV4aXQiLCJyZW1vdmUiLCJhcmMiLCJkcmF3IiwiY29udGV4dCIsInIiLCJzcXJ0IiwiUEkiLCJwb2ludGVyU3ltYm9sIiwic3ltYm9sIiwidHlwZSIsIm9yaWVudCIsImFyY1JhZGl1cyIsImhpZ2hsaWdodE1hcmtlcnMiLCJtYXJrZXJHIiwicnVnUG9zaXRpb24iLCJydWdzIiwiaGlzdHMiLCJDaGFydENvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBOztJQUVNQSxvQjs7Ozs7Ozs7Ozs7Ozs7Ozt1TkFDVztBQUNiQyxZQUFNLEVBQUUsSUFESztBQUViQyxnQkFBVSxFQUFFO0FBQ1ZDLFdBQUcsRUFBRSxLQURLO0FBRVZDLGFBQUssRUFBRTtBQUZHLE9BRkM7QUFNYkMsWUFBTSxFQUFFLEdBTks7QUFPYkMsWUFBTSxFQUFFO0FBQ05DLFdBQUcsRUFBRSxFQURDO0FBRU5DLGFBQUssRUFBRSxFQUZEO0FBR05DLGNBQU0sRUFBRSxFQUhGO0FBSU5DLFlBQUksRUFBRTtBQUpBLE9BUEs7QUFhYkMsaUJBQVcsRUFBRSxLQWJBO0FBY2JDLGVBQVMsRUFBRSxLQWRFO0FBZWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxhQUFPLEVBQUUsSUFwQkk7QUFxQmJDLGNBQVEsRUFBRTtBQUNSVCxjQUFNLEVBQUUsRUFEQTtBQUVSVSxrQkFBVSxFQUFFLENBQ1Y7QUFDRVosYUFBRyxFQUFFLElBRFA7QUFFRWEsY0FB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ZCxFQVFHOUQsSUFSSCxDQVFRLEdBUlIsRUFRYSxVQUFBRyxDQUFDO0FBQUEsaUJBQUlxQixNQUFNLENBQUNyQixDQUFDLENBQUNzQixNQUFGLEdBQVd2QyxJQUFJLENBQUN1QyxNQUFqQixDQUFWO0FBQUEsU0FSZCxFQVNHekIsSUFUSCxDQVNRLE9BVFIsRUFTaUIsVUFBQUcsQ0FBQztBQUFBLGlCQUFJVyxNQUFNLENBQUNYLENBQUMsQ0FBQzRELEVBQUgsQ0FBTixHQUFlakQsTUFBTSxDQUFDWCxDQUFDLENBQUMyRCxFQUFILENBQXJCLEdBQThCLENBQWxDO0FBQUEsU0FUbEIsRUFVRzlELElBVkgsQ0FVUSxRQVZSLEVBVWtCLFVBQUFHLENBQUM7QUFBQSxpQkFBSXFCLE1BQU0sQ0FBQyxDQUFELENBQU4sR0FBWUEsTUFBTSxDQUFDckIsQ0FBQyxDQUFDc0IsTUFBRixHQUFXdkMsSUFBSSxDQUFDdUMsTUFBakIsQ0FBdEI7QUFBQSxTQVZuQjtBQVlBcUUsYUFBSyxDQUFDakIsSUFBTixHQUFhQyxNQUFiLEdBbEJtQixDQW9CbkI7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNEOztBQUVELGFBQU8sSUFBUDtBQUNEOzs7O0VBMWJnQ2lCLDREOztBQTZicEJqSSxtRkFBZiIsImZpbGUiOiIuL3NyYy9saWIvY2hhcnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9iYXNlL0NoYXJ0Q29tcG9uZW50JztcbmltcG9ydCBkMyBmcm9tICcuL3V0aWxzL2QzJztcbmltcG9ydCBEM0xvY2FsZSBmcm9tICdAcmV1dGVycy1ncmFwaGljcy9kMy1sb2NhbGUnO1xuXG5jbGFzcyBDb3VudHJ5UmFua2luZ1N0cmlwcyBleHRlbmRzIENoYXJ0Q29tcG9uZW50IHtcbiAgZGVmYXVsdFByb3BzID0ge1xuICAgIGxvY2FsZTogJ2VuJyxcbiAgICBkYXRhUGFyYW1zOiB7XG4gICAgICBrZXk6ICdrZXknLFxuICAgICAgdmFsdWU6ICd2YWx1ZScsXG4gICAgfSxcbiAgICBoZWlnaHQ6IDEwMCxcbiAgICBtYXJnaW46IHtcbiAgICAgIHRvcDogMTgsXG4gICAgICByaWdodDogMTgsXG4gICAgICBib3R0b206IDIwLFxuICAgICAgbGVmdDogNCxcbiAgICB9LFxuICAgIGRlbnNpdHlQbG90OiBmYWxzZSxcbiAgICBoaXN0b2dyYW06IGZhbHNlLFxuICAgIC8vIGRpc3RyaWJ1dGlvblByb3BzOiB7XG4gICAgLy8gICBiYW5kd2lkdGg6IDEsXG4gICAgLy8gICB0aHJlc2hvbGQ6IDM1LCAvLyBzYW1lIGFzIGJpbi13aWR0aCBmb3IgaGlzdG9ncmFtXG4gICAgLy8gICBjdXJ2ZVR5cGU6ICdjdXJ2ZUJhc2lzJyxcbiAgICAvLyB9LFxuICAgIHJ1Z1Bsb3Q6IHRydWUsXG4gICAgcnVnUHJvcHM6IHtcbiAgICAgIGhlaWdodDogMTYsXG4gICAgICBhbm5vdGF0aW9uOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdFUycsXG4gICAgICAgICAgdGV4dDogJ1NwYWluJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICAvLyBtYXJrRGF0YVBvaW50OiBbLy8ga2V5IHNob3VsZCBiZSBzYW1lIGFzIGRhdGFQYXJhbXNcbiAgICAvLyAgIHtcbiAgICAvLyAgICAga2V5OiAnRlInLFxuICAgIC8vICAgICAvLyB0ZXh0OiAnSW5kaWEnLFxuICAgIC8vICAgfSxcbiAgICAvLyAgIC8vIHtcbiAgICAvLyAgIC8vICAga2V5OiAnQ0EnLFxuICAgIC8vICAgLy8gICAvLyB0ZXh0OiAnWWVtZW4nLFxuICAgIC8vICAgLy8gfSxcbiAgICAvLyBdLFxuICAgIC8vIGNoYXJ0VGl0bGUgOiBcIlwiLFxuICAgIGFubm90YXRpb246IHsgLy8gZm9yIGRpc3RyaWJ1dGlvbiBjaGFydFxuICAgICAgc2l6ZTogNTAwLFxuICAgICAgb2Zmc2V0OiA2LFxuICAgICAgLy8gb3JpZW50OiAncmlnaHQnLCAvLyBsZWZ0IG9yIHJpZ2h0XG4gICAgfSxcbiAgfTtcblxuICAvLyBkZWZhdWx0RGF0YSA9IGRlZmF1bHREYXRhO1xuXG4gIGRyYXcoKSB7XG4gICAgY29uc3QgYWxsRGF0YSA9IHRoaXMuZGF0YSgpO1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcygpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnNlbGVjdGlvbigpLm5vZGUoKTtcblxuICAgIGNvbnN0IHsgd2lkdGggfSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uID0gZDMudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oNzUwKTtcblxuICAgIC8vIG51bWJlciBmb3JtYXR0ZXJzXG4gICAgY29uc3QgbG9jYWxlID0gbmV3IEQzTG9jYWxlKHByb3BzLmxvY2FsZSk7XG4gICAgY29uc3QgbnVtRm9ybWF0ID0gbG9jYWxlLmZvcm1hdCgnLCcpO1xuXG4gICAgLy8gQUREIENIQVJUIFRJVExFXG4gICAgaWYgKHByb3BzLmNoYXJ0VGl0bGUpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uKClcbiAgICAgICAgLmFwcGVuZFNlbGVjdCgnZGl2LmNoYXJ0LXRpdGxlJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2ZvbnQtZGlzcGxheSBjaGFydC10aXRsZScpXG4gICAgICAgIC5odG1sKGA8aDY+JHtwcm9wcy5jaGFydFRpdGxlfTwvaDY+YCk7XG4gICAgfVxuXG4gICAgLy8gRklYIERBVEFcbiAgICAvLyBmaWx0ZXIgbnVsbCBhbmQgTmFOLCBrZWVwIDAnc1xuICAgIGxldCBkYXRhID0gYWxsRGF0YS5maWx0ZXIoZCA9PiBwYXJzZUZsb2F0KGRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0pICE9PSAnbnVsbCcgJiYgIWlzTmFOKHBhcnNlRmxvYXQoZFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSkpKTtcblxuICAgIGxldCBkYXRhVmFsdWVzID0gZGF0YS5tYXAoZCA9PiBkW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKTtcblxuICAgIGNvbnN0IGV4dGVudCA9IGQzLmV4dGVudChkYXRhVmFsdWVzKTtcbiAgICBjb25zdCBtaW4gPSBleHRlbnRbMF07XG4gICAgY29uc3QgbWF4ID0gZXh0ZW50WzFdO1xuXG4gICAgLy8gV2Ugbm9ybWFsaXplIGRhdGEgdG8gZml0IGluIGEgcmFuZ2UgMCAtIDEwMFxuICAgIGNvbnN0IG5vcm1hbGl6ZSA9IGQgPT4gMTAwICogKGQgLSBtaW4pIC8gKG1heCAtIG1pbik7XG5cbiAgICBpZiAocHJvcHMuaGlzdG9ncmFtIHx8IHByb3BzLmRlbnNpdHlQbG90KSB7XG4gICAgICBkYXRhVmFsdWVzID0gZGF0YVZhbHVlcy5tYXAoZCA9PiBub3JtYWxpemUoZCkpO1xuICAgICAgZGF0YSA9IGRhdGEubWFwKGQgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleTogZFtwcm9wcy5kYXRhUGFyYW1zLmtleV0sXG4gICAgICAgICAgdmFsdWU6IG5vcm1hbGl6ZShkW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygoZGF0YSkpO1xuXG4gICAgLy8gREVGSU5FIFNDQUxFU1xuICAgIGNvbnN0IHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oZDMuZXh0ZW50KGRhdGFWYWx1ZXMpKS5uaWNlKClcbiAgICAgIC5yYW5nZShbcHJvcHMubWFyZ2luLmxlZnQsIHdpZHRoIC0gcHJvcHMubWFyZ2luLnJpZ2h0XSk7XG4gICAgICBpZiAocHJvcHMuaGlzdG9ncmFtIHx8IHByb3BzLmRlbnNpdHlQbG90KSB7XG4gICAgY29uc3QgdGhyZXNob2xkcyA9IHhTY2FsZS50aWNrcyhwcm9wcy5kaXN0cmlidXRpb25Qcm9wcy50aHJlc2hvbGQpO1xuICAgIGNvbnN0IGJpbnMgPSBkMy5oaXN0b2dyYW0oKVxuICAgICAgLmRvbWFpbih4U2NhbGUuZG9tYWluKCkpXG4gICAgICAudGhyZXNob2xkcyh0aHJlc2hvbGRzKShkYXRhVmFsdWVzKTtcblxuICAgIGNvbnN0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oWzAsIGQzLm1heChiaW5zLCBkID0+IGQubGVuZ3RoKSAvIGRhdGEubGVuZ3RoXSlcbiAgICAgIC5yYW5nZShbcHJvcHMuaGVpZ2h0IC0gcHJvcHMubWFyZ2luLmJvdHRvbSwgcHJvcHMubWFyZ2luLnRvcF0pO1xuICAgICAgfVxuICAgIC8vIERSQVcgQ0hBUlRcbiAgICBjb25zdCBjaGFydFNWRyA9IHRoaXMuc2VsZWN0aW9uKClcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ3N2ZycpIC8vIHNlZSBkb2NzIGluIC4vdXRpbHMvZDMuanNcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIHByb3BzLmhlaWdodClcbiAgICAgIC5hdHRyKCdjbGFzcycsICdDb3VudHJ5UmFua2luZ1N0cmlwcycpO1xuXG4gICAgLy8gYWRkIGNoYXJ0IHBsb3QgaG9sZGVyXG4gICAgY29uc3QgcGxvdCA9IGNoYXJ0U1ZHLmFwcGVuZFNlbGVjdCgnZy5wbG90JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdwbG90Jyk7XG5cbiAgICAvLyBhZGQgYXhpc1xuICAgIGNoYXJ0U1ZHLmFwcGVuZFNlbGVjdCgnZy5heGlzLXgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMgYXhpcy14JylcbiAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7cHJvcHMuaGVpZ2h0IC0gcHJvcHMubWFyZ2luLmJvdHRvbX0pYClcbiAgICAgIC5jYWxsKFxuICAgICAgICBkMy5heGlzQm90dG9tKHhTY2FsZSlcbiAgICAgICAgICAvLyAudGlja1ZhbHVlcyh0aHJlc2hvbGRzKVxuICAgICAgICAgIC8vIC50aWNrVmFsdWVzKHhTY2FsZS5kb21haW4oKSlcbiAgICAgICAgICAudGlja0Zvcm1hdChudW1Gb3JtYXQpXG4gICAgICApO1xuXG4gICAgLy8gY2hhcnRTVkcuYXBwZW5kU2VsZWN0KCdnLmF4aXMteScpXG4gICAgLy8gICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3Byb3BzLm1hcmdpbi5sZWZ0fSwwKWApXG4gICAgLy8gICAuY2FsbChkMy5heGlzTGVmdCh5U2NhbGUpLnRpY2tzKG51bGwsICclJykpXG4gICAgLy8gICAuY2FsbChnID0+IGcuc2VsZWN0KCcuZG9tYWluJykucmVtb3ZlKCkpO1xuXG4gICAgaWYgKHByb3BzLmRlbnNpdHlQbG90KSB7XG4gICAgICBjb25zdCBkaXN0cmlidXRpb25MaW5lID0gZDMubGluZSgpXG4gICAgICAgIC5jdXJ2ZShkM1twcm9wcy5kaXN0cmlidXRpb25Qcm9wcy5jdXJ2ZVR5cGVdKVxuICAgICAgICAueChkID0+IHhTY2FsZShkWzBdKSlcbiAgICAgICAgLnkoZCA9PiB5U2NhbGUoZFsxXSkpO1xuXG4gICAgICBjb25zdCBkaXN0cmlidXRpb25BcmVhID0gZDMuYXJlYSgpXG4gICAgICAgIC5jdXJ2ZShkM1twcm9wcy5kaXN0cmlidXRpb25Qcm9wcy5jdXJ2ZVR5cGVdKVxuICAgICAgICAueChkID0+IHhTY2FsZShkWzBdKSlcbiAgICAgICAgLnkxKGQgPT4geVNjYWxlKGRbMV0pKVxuICAgICAgICAueTAoZCA9PiB5U2NhbGUoMCkpO1xuXG4gICAgICAvLyBESVNUUklCVVRJT04gTUFUSFxuICAgICAgY29uc3Qga2RlID0gKGtlcm5lbCwgdGhyZXNob2xkcywgZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gdGhyZXNob2xkcy5tYXAodCA9PiBbdCwgZDMubWVhbihkYXRhLCBkID0+IGtlcm5lbCh0IC0gZCkpXSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgZXBhbmVjaG5pa292ID0gKGJhbmR3aWR0aCkgPT4ge1xuICAgICAgICByZXR1cm4geCA9PiBNYXRoLmFicyh4IC89IGJhbmR3aWR0aCkgPD0gMSA/IDAuNzUgKiAoMSAtIHggKiB4KSAvIGJhbmR3aWR0aCA6IDA7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZW5zaXR5ID0ga2RlKGVwYW5lY2huaWtvdihwcm9wcy5kaXN0cmlidXRpb25Qcm9wcy5iYW5kd2lkdGgpLCB0aHJlc2hvbGRzLCBkYXRhVmFsdWVzKTtcblxuICAgICAgLy8gY29uc29sZS5sb2coeVNjYWxlLmRvbWFpbigpKTtcblxuICAgICAgY29uc29sZS5sb2coJ2RlbnNpdHknLCBkZW5zaXR5KTtcbiAgICAgIGNvbnNvbGUubG9nKCdiaW5zJywgYmlucyk7XG5cbiAgICAgIHBsb3QuYXBwZW5kU2VsZWN0KCdwYXRoLmRpc3RyaWJ1dGlvbi1hcmVhJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2FyZWEgZGlzdHJpYnV0aW9uLWFyZWEnKVxuICAgICAgICAuZGF0dW0oZGVuc2l0eSlcbiAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgLmF0dHIoJ3N0cm9rZS1saW5lam9pbicsICdyb3VuZCcpXG4gICAgICAgIC5hdHRyKCdkJywgZGlzdHJpYnV0aW9uQXJlYSk7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKCdhcmVhJywgZDMucG9seWdvbkFyZWEoKGRlbnNpdHkpKSk7XG5cbiAgICAgIHBsb3QuYXBwZW5kU2VsZWN0KCdwYXRoLmRpc3RyaWJ1dGlvbi1saW5lJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xpbmUgZGlzdHJpYnV0aW9uLWxpbmUnKVxuICAgICAgICAuZGF0dW0oZGVuc2l0eSlcbiAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgLmF0dHIoJ3N0cm9rZS1saW5lam9pbicsICdyb3VuZCcpXG4gICAgICAgIC5hdHRyKCdkJywgZGlzdHJpYnV0aW9uTGluZSk7XG5cbiAgICAgIC8vIEhJR0hMSUdIVCBEQVRBIFBPTlRcbiAgICAgIGlmIChwcm9wcy5tYXJrRGF0YVBvaW50KSB7XG4gICAgICAvLyBzZXQgZGF0YSBwb2ludFxuICAgICAgICBjb25zdCBtYXJrZXJEYXRhID0gcHJvcHMubWFya0RhdGFQb2ludC5tYXAoZWxlbWVudCA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsID0gZWxlbWVudFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSA/IG5vcm1hbGl6ZShlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKSA6IG5vcm1hbGl6ZShhbGxEYXRhLmZpbmQoZSA9PiBlW3Byb3BzLmRhdGFQYXJhbXMua2V5XSA9PT0gZWxlbWVudFtwcm9wcy5kYXRhUGFyYW1zLmtleV0pW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKTtcblxuICAgICAgICAgIGxldCBwb3NEaXN0ID0gMDtcbiAgICAgICAgICBjb25zdCBwb3NCaW4gPSBiaW5zLmZpbmQoKGVsZW1lbnQsIGkpID0+IHtcbiAgICAgICAgICAgIHBvc0Rpc3QgPSBpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuaW5jbHVkZXModmFsKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IGRlbnNpdHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oW3Bvc0Jpbi54MCwgcG9zQmluLngxXSlcbiAgICAgICAgICAgIC5yYW5nZShbZGVuc2l0eVtwb3NEaXN0XVsxXSwgZGVuc2l0eVtwb3NEaXN0ICsgMV1bMV1dKTtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy5rZXldLFxuICAgICAgICAgICAgdmFsdWU6IHZhbCxcbiAgICAgICAgICAgIHRleHQ6IGVsZW1lbnQudGV4dCxcbiAgICAgICAgICAgIGRlbnNpdHlJbmRleDogcG9zRGlzdCxcbiAgICAgICAgICAgIGRlbnNpdHk6IGRlbnNpdHlTY2FsZSh2YWwpLFxuICAgICAgICAgICAgYmluOiBwb3NCaW4sXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHdpZHRoIG9mIGhpZ2hsaWdodCByZWN0XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodFdpZHRoID0gd2lkdGggLyBkYXRhLmxlbmd0aDtcblxuICAgICAgICAvLyBjb25zb2xlLmxvZyhtYXJrZXJEYXRhKTtcblxuICAgICAgICAvLyBhZGQgZGlzdHJ1YnV0aW9uIGNsaXBwaW5nIG1hc2tcbiAgICAgICAgY29uc3Qgc3ZnRGVmcyA9IGNoYXJ0U1ZHLmFwcGVuZFNlbGVjdCgnZGVmcycpO1xuXG4gICAgICAgIHN2Z0RlZnMuYXBwZW5kU2VsZWN0KCdjbGlwUGF0aCcpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgYCR7bm9kZS5pZH0tY2xpcC1wYXRoYClcbiAgICAgICAgICAuYXBwZW5kU2VsZWN0KCdwYXRoJylcbiAgICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAgIC5hdHRyKCdkJywgZGlzdHJpYnV0aW9uQXJlYShkZW5zaXR5KSk7XG5cbiAgICAgICAgLy8gYWRkIGhpZ2hsaWdodCBzaGFwZVxuICAgICAgICBjb25zdCBoaWdobGlnaHRHcm91cCA9IGNoYXJ0U1ZHLmFwcGVuZFNlbGVjdCgnZy5oaWdobGlnaHRzJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnaGlnaGxpZ2h0cycpO1xuICAgICAgICBjb25zdCBoaWdobGlnaHRzID0gaGlnaGxpZ2h0R3JvdXAuc2VsZWN0QWxsKCdyZWN0JylcbiAgICAgICAgICAuZGF0YShtYXJrZXJEYXRhKTtcblxuICAgICAgICBoaWdobGlnaHRzLmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCBkID0+IGAke2Qua2V5fWApXG4gICAgICAgICAgLmF0dHIoJ2RhdGEtdmFsdWUnLCBkID0+IGQudmFsdWUpXG4gICAgICAgICAgLmF0dHIoJ3gnLCBkID0+IHhTY2FsZShkLnZhbHVlKSAtIDAuNSAqIGhpZ2hsaWdodFdpZHRoKVxuICAgICAgICAgIC5hdHRyKCd5JywgcHJvcHMuaGVpZ2h0IC0gcHJvcHMubWFyZ2luLmJvdHRvbSlcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcHJvcHMuaGVpZ2h0IC0gcHJvcHMubWFyZ2luLnRvcCAtIHByb3BzLm1hcmdpbi5ib3R0b20pXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgaGlnaGxpZ2h0V2lkdGgpXG4gICAgICAgICAgLnN0eWxlKCdjbGlwLXBhdGgnLCBgdXJsKCMke25vZGUuaWR9LWNsaXAtcGF0aClgKVxuICAgICAgICAgIC5tZXJnZShoaWdobGlnaHRzKVxuICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24uZGVsYXkoNTApLmR1cmF0aW9uKDc1MCkpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBgJHtkLmtleX1gKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXZhbHVlJywgZCA9PiBkLnZhbHVlKVxuICAgICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGUoZC52YWx1ZSkgLSAwLjUgKiBoaWdobGlnaHRXaWR0aClcbiAgICAgICAgICAuYXR0cigneScsIHByb3BzLm1hcmdpbi50b3ApXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHByb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi50b3AgLSBwcm9wcy5tYXJnaW4uYm90dG9tKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGhpZ2hsaWdodFdpZHRoKVxuICAgICAgICAgIC5zdHlsZSgnY2xpcC1wYXRoJywgYHVybCgjJHtub2RlLmlkfS1jbGlwLXBhdGgpYCk7XG5cbiAgICAgICAgaGlnaGxpZ2h0cy5leGl0KClcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgMClcbiAgICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAgIC5yZW1vdmUoKTtcblxuICAgICAgICAvLyBhZGQgaGlnaGxpZ2h0IG1hcmtlciBmb3IgYW5ub3RhdGlvblxuICAgICAgICBjb25zdCBhcmMgPSB7fTtcbiAgICAgICAgYXJjLnJpZ2h0ID0ge1xuICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoMiAqIHNpemUgLyBNYXRoLlBJKTtcbiAgICAgICAgICAgIC8vIGNvbnN0IG9yZ2luID0gKDQgKiByKSAvICgzICogTWF0aC5QSSk7IC8vIHRoZSBvcmdpbiBvZiB0aGUgY2lyY2xlXG4gICAgICAgICAgICBjb250ZXh0LmFyYyhyLCAtcHJvcHMuYW5ub3RhdGlvbi5vZmZzZXQsIHIsIE1hdGguUEksIC1NYXRoLlBJIC8gMiwgZmFsc2UpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGFyYy5sZWZ0ID0ge1xuICAgICAgICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoMiAqIHNpemUgLyBNYXRoLlBJKTtcbiAgICAgICAgICAgIC8vIGNvbnN0IG9yZ2luID0gKDQgKiByKSAvICgzICogTWF0aC5QSSk7IC8vIHRoZSBvcmdpbiBvZiB0aGUgY2lyY2xlXG4gICAgICAgICAgICBjb250ZXh0LmFyYygtciwgLXByb3BzLmFubm90YXRpb24ub2Zmc2V0LCByLCAwLCAtTWF0aC5QSSAvIDIsIHRydWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcG9pbnRlclN5bWJvbCA9IGQzLnN5bWJvbCgpLnR5cGUoYXJjW3Byb3BzLmFubm90YXRpb24ub3JpZW50XSkuc2l6ZShwcm9wcy5hbm5vdGF0aW9uLnNpemUpO1xuICAgICAgICBjb25zdCBhcmNSYWRpdXMgPSBNYXRoLnNxcnQoMiAqIHByb3BzLmFubm90YXRpb24uc2l6ZSAvIE1hdGguUEkpO1xuXG4gICAgICAgIC8vIGNvbnN0IHN5bUJvbE1hcmtlciA9IHByb3BzLm1hcmtEYXRhUG9pbnQubWFwKGQgPT4ge1xuICAgICAgICAvLyAgIHJldHVybiB7XG4gICAgICAgIC8vICAgICBrZXk6IGRbcHJvcHMuZGF0YVBhcmFtcy5rZXldLFxuICAgICAgICAvLyAgICAgbGluZTogW1xuICAgICAgICAvLyAgICAgICBbMjUsIC0yNV0sIFsyMCwgLTI1XSwgWzUsIC0yMF0sIFswLCAwXSxcbiAgICAgICAgLy8gICAgIF0sXG4gICAgICAgIC8vICAgfTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIGNvbnN0IHBhdGhNYXJrZXIgPSBkMy5saW5lKClcbiAgICAgICAgLy8gICAuY3VydmUoZDMuY3VydmVCYXNpcylcbiAgICAgICAgLy8gICAueChkID0+IChkWzBdKSlcbiAgICAgICAgLy8gICAueShkID0+IChkWzFdKSk7XG5cbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0TWFya2VycyA9IGhpZ2hsaWdodEdyb3VwLnNlbGVjdEFsbCgnZy5tYXJrZXItZycpXG4gICAgICAgICAgLmRhdGEobWFya2VyRGF0YSwgZCA9PiBkLmtleSk7XG5cbiAgICAgICAgY29uc3QgbWFya2VyRyA9IGhpZ2hsaWdodE1hcmtlcnMuZW50ZXIoKS5hcHBlbmQoJ2cnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYG1hcmtlci1nICR7ZC5rZXl9YClcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBgdHJhbnNsYXRlKCR7eFNjYWxlKGQudmFsdWUpfSwgJHt5U2NhbGUoZC5kZW5zaXR5KX0pYCk7XG5cbiAgICAgICAgbWFya2VyRy5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYG1hcmtlciAke2Qua2V5fWApXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAgICAgLmF0dHIoJ2QnLCBkID0+IHByb3BzLmFubm90YXRpb24ub3JpZW50ID8gcG9pbnRlclN5bWJvbCgpIDpcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgeFNjYWxlKGQudmFsdWUpID49IHdpZHRoIC8gNSA/IGQzLnN5bWJvbCgpLnR5cGUoYXJjLmxlZnQpLnNpemUocHJvcHMuYW5ub3RhdGlvbi5zaXplKSgpIDogZDMuc3ltYm9sKCkudHlwZShhcmMucmlnaHQpLnNpemUocHJvcHMuYW5ub3RhdGlvbi5zaXplKSgpXG4gICAgICAgICAgICApKTtcbiAgICAgICAgbWFya2VyRy5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IHhTY2FsZShkLnZhbHVlKSA+PSB3aWR0aCAvIDUgPyBgdHJhbnNsYXRlKCR7LWFyY1JhZGl1cyAtIDZ9LCAkey1hcmNSYWRpdXMgLSA2fSlgIDogYHRyYW5zbGF0ZSgke2FyY1JhZGl1cyArIDZ9LCAkey1hcmNSYWRpdXMgLSA2fSlgKVxuICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsIGQgPT4geFNjYWxlKGQudmFsdWUpID49IHdpZHRoIC8gNSA/ICdlbmQnIDogJ3N0YXJ0JylcbiAgICAgICAgICAuYXBwZW5kKCd0c3BhbicpXG4gICAgICAgICAgLnRleHQoZCA9PiBkLnRleHQgPyBgJHtkLnRleHR9YCA6IGAke2Qua2V5fWApO1xuXG4gICAgICAgIGhpZ2hsaWdodE1hcmtlcnNcbiAgICAgICAgICAubWVyZ2UoaGlnaGxpZ2h0TWFya2VycylcbiAgICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHt4U2NhbGUoZC52YWx1ZSl9LCAke3lTY2FsZShkLmRlbnNpdHkpfSlgKTtcblxuICAgICAgICBoaWdobGlnaHRNYXJrZXJzLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSVUdQTE9UXG4gICAgaWYgKHByb3BzLnJ1Z1Bsb3QpIHtcbiAgICAgIGNvbnN0IHJ1Z1Bvc2l0aW9uID0ge1xuICAgICAgICB5OiBwcm9wcy5oZWlnaHQgLSBwcm9wcy5tYXJnaW4uYm90dG9tIC0gcHJvcHMucnVnUHJvcHMuaGVpZ2h0IC0gNCxcbiAgICAgICAgaGVpZ2h0OiBwcm9wcy5ydWdQcm9wcy5oZWlnaHQsXG4gICAgICB9O1xuICAgICAgLy8gaWYgKHByb3BzLmhpc3RvZ3JhbSB8fCBwcm9wcy5kZW5zaXR5UGxvdCkge1xuXG4gICAgICAvLyB9XG5cbiAgICAgIGNvbnN0IHJ1Z1Bsb3QgPSBwbG90LmFwcGVuZFNlbGVjdCgnZy5ydWdwbG90JylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3J1Z3Bsb3QnKTtcblxuICAgICAgY29uc3QgcnVncyA9IHJ1Z1Bsb3Quc2VsZWN0QWxsKCdyZWN0JylcbiAgICAgICAgLmRhdGEoZGF0YSk7XG4gICAgICBydWdzLmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBgJHtkLmtleX1gKVxuICAgICAgICAvLyAuYXR0cignZGF0YS12YWx1ZScsIGQgPT4gYCR7ZC52YWx1ZX1gKVxuICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQudmFsdWUpKVxuICAgICAgICAuYXR0cigneScsIHJ1Z1Bvc2l0aW9uLnkpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBydWdQb3NpdGlvbi5oZWlnaHQpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIDIpXG4gICAgICAgIC5tZXJnZShydWdzKVxuICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQudmFsdWUpKVxuICAgICAgICAuYXR0cigneScsIHJ1Z1Bvc2l0aW9uLnkpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBydWdQb3NpdGlvbi5oZWlnaHQpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIDIpO1xuXG4gICAgICBydWdzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgLy8gYWRkIGhpZ2hsaWdodFxuXG4gICAgICBpZiAocHJvcHMucnVnUHJvcHMuYW5ub3RhdGlvbiAmJiAhKHByb3BzLmhpc3RvZ3JhbSB8fCBwcm9wcy5kZW5zaXR5UGxvdCkpIHtcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0R3JvdXAgPSBydWdQbG90LmFwcGVuZFNlbGVjdCgnZy5oaWdobGlnaHQtZycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2hpZ2hsaWdodC1nJyk7XG5cbiAgICAgICAgaGlnaGxpZ2h0R3JvdXAuYXBwZW5kU2VsZWN0KCdyZWN0LmhpZ2hsaWdodC1iYXInKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWdobGlnaHQtYmFyJylcbiAgICAgICAgICAuc3R5bGUoJ29wYWNpdHknLCAwLjU1KVxuICAgICAgICAgIC5hdHRyKCd4JywgeFNjYWxlLnJhbmdlKClbMF0pXG4gICAgICAgICAgLmF0dHIoJ3knLCBydWdQb3NpdGlvbi55KVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBydWdQb3NpdGlvbi5oZWlnaHQpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgeFNjYWxlLnJhbmdlKClbMV0gLSB4U2NhbGUucmFuZ2UoKVswXSlcbiAgICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHhTY2FsZS5yYW5nZSgpWzFdIC0geFNjYWxlLnJhbmdlKClbMF0pO1xuXG4gICAgICAgIGNvbnN0IG1hcmtlckRhdGEgPSBwcm9wcy5ydWdQcm9wcy5hbm5vdGF0aW9uLm1hcChlbGVtZW50ID0+IHtcbiAgICAgICAgICBjb25zdCB2YWwgPSBlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdID8gKGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0pIDogKGRhdGEuZmluZChlID0+IGVbcHJvcHMuZGF0YVBhcmFtcy5rZXldID09PSBlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMua2V5XSlbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0pO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleTogZWxlbWVudFtwcm9wcy5kYXRhUGFyYW1zLmtleV0sXG4gICAgICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICAgICAgdGV4dDogZWxlbWVudC50ZXh0IHx8IGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy5rZXldLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodE1hcmtlcnMgPSBoaWdobGlnaHRHcm91cC5zZWxlY3RBbGwoJ2cubWFya2VyLWcnKVxuICAgICAgICAgIC5kYXRhKG1hcmtlckRhdGEsIGQgPT4gZC5rZXkpO1xuXG4gICAgICAgIGNvbnN0IG1hcmtlckcgPSBoaWdobGlnaHRNYXJrZXJzLmVudGVyKCkuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCBkID0+IGBtYXJrZXItZyAke2Qua2V5fWApXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gYHRyYW5zbGF0ZSgke3hTY2FsZShkLnZhbHVlKX0sICR7cnVnUG9zaXRpb24ueSAtIDI0fSlgKTtcblxuICAgICAgICBtYXJrZXJHLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBgbWFya2VyICR7ZC5rZXl9YClcbiAgICAgICAgICAuYXR0cignZmlsbCcsICdub25lJyk7XG4gICAgICAgIC8vIC5hdHRyKCcsICk7XG5cbiAgICAgICAgbWFya2VyRy5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgIC8vIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IHhTY2FsZShkLnZhbHVlKSA+PSB3aWR0aCAvIDUgPyBgdHJhbnNsYXRlKCR7LWFyY1JhZGl1cyAtIDZ9LCAkey1hcmNSYWRpdXMgLSA2fSlgIDogYHRyYW5zbGF0ZSgke2FyY1JhZGl1cyArIDZ9LCAkey1hcmNSYWRpdXMgLSA2fSlgKVxuICAgICAgICAgIC8vIC5hdHRyKCd0ZXh0LWFuY2hvcicsIGQgPT4geFNjYWxlKGQudmFsdWUpID49IHdpZHRoIC8gNSA/ICdlbmQnIDogJ3N0YXJ0JylcbiAgICAgICAgICAuYXBwZW5kKCd0c3BhbicpXG4gICAgICAgICAgLnRleHQoZCA9PiBgJHtkLnRleHR9YCk7XG5cbiAgICAgICAgaGlnaGxpZ2h0TWFya2Vyc1xuICAgICAgICAgIC5tZXJnZShoaWdobGlnaHRNYXJrZXJzKVxuICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gYHRyYW5zbGF0ZSgke3hTY2FsZShkLnZhbHVlKX0sICR7eVNjYWxlKGQuZGVuc2l0eSl9KWApO1xuXG4gICAgICAgIGhpZ2hsaWdodE1hcmtlcnMuZXhpdCgpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhJU1RPR1JBTSBDT0RFXG4gICAgaWYgKHByb3BzLmhpc3RvZ3JhbSkge1xuICAgICAgY29uc3QgaGlzdHMgPSBwbG90LmFwcGVuZFNlbGVjdCgnZy5oaXN0b2dyYW0nKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnaGlzdG9ncmFtJylcbiAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgIC5kYXRhKGJpbnMpO1xuXG4gICAgICBoaXN0cy5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGUoZC54MCkgKyAxKVxuICAgICAgICAuYXR0cigneScsIGQgPT4geVNjYWxlKGQubGVuZ3RoIC8gZGF0YS5sZW5ndGgpKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBkID0+IHhTY2FsZShkLngxKSAtIHhTY2FsZShkLngwKSAtIDEpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBkID0+IHlTY2FsZSgwKSAtIHlTY2FsZShkLmxlbmd0aCAvIGRhdGEubGVuZ3RoKSlcbiAgICAgICAgLm1lcmdlKGhpc3RzKVxuICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQueDApICsgMSlcbiAgICAgICAgLmF0dHIoJ3knLCBkID0+IHlTY2FsZShkLmxlbmd0aCAvIGRhdGEubGVuZ3RoKSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgZCA9PiB4U2NhbGUoZC54MSkgLSB4U2NhbGUoZC54MCkgLSAxKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgZCA9PiB5U2NhbGUoMCkgLSB5U2NhbGUoZC5sZW5ndGggLyBkYXRhLmxlbmd0aCkpO1xuXG4gICAgICBoaXN0cy5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICAgIC8vIEZPUiBISUdITElHSFRJTkcgVEhFIEJJTiBXSVRIIFRIRSBEQVRBIFBPSU5UXG4gICAgICAvLyBjb25zdCBkYXRhSGlnaGxpZ2h0ID0gYmlucy5maW5kKGVsZW1lbnQgPT4ge1xuICAgICAgLy8gICByZXR1cm4gZWxlbWVudC5pbmNsdWRlcyg2LjI5NjA4NjIxNjY3NjEyMDUpO1xuICAgICAgLy8gfSk7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKChkYXRhSGlnaGxpZ2h0KSk7XG5cbiAgICAgIC8vIGNvbnN0IHBvc0hpZ2hsaWdodCA9IChkKSA9PiB7XG4gICAgICAvLyAgIHJldHVybiBbXG4gICAgICAvLyAgICAgWyhkLngwKSwgKDApXSxcbiAgICAgIC8vICAgICBbKGQueDApLCBkZW5zaXR5WyhkLngwKV1bMV1dLFxuICAgICAgLy8gICAgIFsoZC54MSksIGRlbnNpdHlbKGQueDEpXVsxXV0sXG4gICAgICAvLyAgICAgWyhkLngxKSwgKDApXSxcbiAgICAgIC8vICAgXTtcbiAgICAgIC8vIH07XG4gICAgICAvLyBjb25zb2xlLmxvZyhwYXRoSGlnaGxpZ2h0KGRhdGFIaWdobGlnaHQpKTtcbiAgICAgIC8vIHBsb3QuYXBwZW5kU2VsZWN0KCdwYXRoLmFyZWEtaGlnaGxpZ2h0JylcbiAgICAgIC8vICAgLmF0dHIoJ2NsYXNzJywgJ2FyZWEtaGlnaGxpZ2h0JylcbiAgICAgIC8vICAgLmRhdHVtKHBhdGhIaWdobGlnaHQoZGF0YUhpZ2hsaWdodCkpXG4gICAgICAvLyAgIC5hdHRyKCdmaWxsJywgJ3JlZCcpXG4gICAgICAvLyAgIC5zdHlsZSgnY2xpcC1wYXRoJywgJ3VybCgjY2xpcC1wYXRoKScpXG4gICAgICAvLyAgIC5hdHRyKCdkJywgZGlzdHJpYnV0aW9uQXJlYSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ291bnRyeVJhbmtpbmdTdHJpcHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})