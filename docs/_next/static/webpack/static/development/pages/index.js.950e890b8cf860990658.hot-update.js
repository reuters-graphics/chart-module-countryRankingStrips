webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var d3_selection__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/index.js\");\n/* harmony import */ var d3_transition__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-transition */ \"./node_modules/d3-transition/src/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/throttle */ \"./node_modules/lodash/throttle.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_12__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n // import { num2unitwords } from './utils/utils';\n\n\n\n\nvar CountryRankingStrips = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(CountryRankingStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryRankingStrips);\n\n  function CountryRankingStrips() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, CountryRankingStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      locale: 'en',\n      chartTitle: '',\n      dataParams: {\n        key: 'key',\n        value: 'value'\n      },\n      height: 100,\n      margin: {\n        top: 4,\n        right: 8,\n        bottom: 36,\n        left: 8\n      },\n      densityPlot: false,\n      histogram: false,\n      distributionProps: {\n        bandwidth: 1,\n        threshold: 35,\n        // same as bin-width for histogram\n        curveType: 'curveBasis'\n      },\n      annotation: {\n        // for distribution chart\n        size: 500,\n        offset: 6 // orient: 'right', // left or right\n\n      },\n      rugPlot: true,\n      rugProps: {\n        height: 16,\n        rugWidth: 1,\n        rugColor: 'rgba(255, 255, 255, 1)',\n        highlightWidth: 2,\n        highlightColor: '#eec331',\n        activeRugZoom: 10,\n        showTipMarker: false,\n        getTooltipText: function getTooltipText(key) {\n          return key;\n        },\n        textHeight: 16,\n        // tooltipNumberFormatter: (num) => num,\n        customAxisLabels: [],\n        customAxisFormat: false,\n        showSplitAxis: false,\n        splitAxis: {\n          value: 0,\n          colors: ['#74c476', '#ee665b']\n        } // annotation: [\n        //   {\n        //     key: 'ES',\n        //     text: 'Spain',\n        //   },\n        // ],\n\n      } // markDataPoint: [// key should be same as dataParams\n      //   {\n      //     key: 'FR',\n      //     // text: 'India',\n      //   },\n      //   // {\n      //   //   key: 'CA',\n      //   //   // text: 'Yemen',\n      //   // },\n      // ],\n\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(CountryRankingStrips, [{\n    key: \"draw\",\n    // defaultData = defaultData;\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].transition().duration(750); // number formatters\n\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_11___default.a(props.locale);\n      var numFormat = locale.format(','); // const num2unitwords = locale.format('.3~s');\n\n      var tooltipNumberFormatter = props.rugProps.tooltipNumberFormatter || numFormat; // ADD CHART TITLE\n\n      if (props.chartTitle) {\n        this.selection().appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // FIX DATA\n      // filter null and NaN, keep 0's\n\n\n      var data = allData.filter(function (d) {\n        return parseFloat(d[props.dataParams.value]) !== 'null' && !isNaN(parseFloat(d[props.dataParams.value]));\n      });\n      var dataValues = data.map(function (d) {\n        return d[props.dataParams.value];\n      });\n      var extent = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues);\n      var min = extent[0];\n      var max = extent[1]; // We normalize data to fit in a range 0 - 100\n\n      var normalize = function normalize(d) {\n        return 100 * (d - min) / (max - min);\n      };\n\n      if (props.histogram || props.densityPlot) {\n        dataValues = dataValues.map(function (d) {\n          return normalize(d);\n        });\n        data = data.map(function (d) {\n          return {\n            key: d[props.dataParams.key],\n            value: normalize(d[props.dataParams.value])\n          };\n        });\n      } // console.log((data));\n      // DEFINE SCALES\n\n\n      var xScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues)).nice().range([props.margin.left, width - props.margin.right]);\n      var thresholds, bins, yScale;\n\n      if (props.histogram || props.densityPlot) {\n        thresholds = xScale.ticks(props.distributionProps.threshold);\n        bins = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].histogram().domain(xScale.domain()).thresholds(thresholds)(dataValues);\n        yScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([0, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].max(bins, function (d) {\n          return d.length;\n        }) / data.length]).range([props.height - props.margin.bottom, props.margin.top]);\n      } // DRAW CHART\n\n\n      var chartSVG = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width).attr('height', props.height).attr('class', 'CountryRankingStrips'); // add chart plot holder\n\n      var plot = chartSVG.appendSelect('g.plot').attr('class', 'plot'); // add DROP-SHADOW filter\n\n      var dropShadow = {\n        stdDeviation: 0.5,\n        dx: 0,\n        dy: 0,\n        slope: 0.5,\n        type: 'linear'\n      };\n      var filter = chartSVG.appendSelect('defs');\n      filter.appendSelect('filter').attr('id', 'rugplotDropShadow').attr('filterUnits', 'userSpaceOnUse');\n      filter.appendSelect('feGaussianBlur').attr('in', 'SourceAlpha').attr('stdDeviation', parseInt(dropShadow.stdDeviation));\n      filter.appendSelect('feOffset').attr('dx', parseInt(dropShadow.dx)).attr('dy', parseInt(dropShadow.dy));\n      var feComponentTransfer = filter.appendSelect('feComponentTransfer');\n      feComponentTransfer.appendSelect('feFuncA').attr('type', dropShadow.type).attr('slope', parseFloat(dropShadow.slope));\n      var feMerge = filter.appendSelect('feMerge');\n      feMerge.appendSelect('feMergeNode');\n      feMerge.appendSelect('feMergeNode').attr('in', 'SourceGraphic');\n      /* --- */\n      // add axis\n\n      if (props.histogram || props.densityPlot) {\n        chartSVG.appendSelect('g.axis-x').attr('class', 'axis axis-x').transition(transition).attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom, \")\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScale) // .tickValues(thresholds)\n        .tickValues(xScale.domain()).tickFormat(numFormat)); // chartSVG.appendSelect('g.axis-y')\n        //   .attr('transform', `translate(${props.margin.left},0)`)\n        //   .call(d3.axisLeft(yScale).ticks(null, '%'))\n        //   .call(g => g.select('.domain').remove());\n      }\n\n      if (props.densityPlot) {\n        var distributionLine = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].line().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y(function (d) {\n          return yScale(d[1]);\n        });\n        var distributionArea = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].area().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y1(function (d) {\n          return yScale(d[1]);\n        }).y0(function (d) {\n          return yScale(0);\n        }); // DISTRIBUTION MATH\n\n        var kde = function kde(kernel, thresholds, data) {\n          return thresholds.map(function (t) {\n            return [t, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mean(data, function (d) {\n              return kernel(t - d);\n            })];\n          });\n        };\n\n        var epanechnikov = function epanechnikov(bandwidth) {\n          return function (x) {\n            return Math.abs(x /= bandwidth) <= 1 ? 0.75 * (1 - x * x) / bandwidth : 0;\n          };\n        };\n\n        var density = kde(epanechnikov(props.distributionProps.bandwidth), thresholds, dataValues); // console.log(yScale.domain());\n\n        console.log('density', density);\n        console.log('bins', bins);\n        plot.appendSelect('path.distribution-area').attr('class', 'area distribution-area').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionArea); // console.log('area', d3.polygonArea((density)));\n\n        plot.appendSelect('path.distribution-line').attr('class', 'line distribution-line').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionLine); // HIGHLIGHT DATA PONT\n\n        if (props.markDataPoint) {\n          // set data point\n          var markerData = props.markDataPoint.map(function (element) {\n            var val = element[props.dataParams.value] !== null && !isNaN(element[props.dataParams.value]) ? normalize(element[props.dataParams.value]) : normalize(allData.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value]);\n            var posDist = 0;\n            var posBin = bins.find(function (element, i) {\n              posDist = i;\n              return element.includes(val);\n            });\n            var densityScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([posBin.x0, posBin.x1]).range([density[posDist][1], density[posDist + 1][1]]);\n            return {\n              key: element[props.dataParams.key] || \"value\".concat(val),\n              value: val,\n              text: element.text,\n              densityIndex: posDist,\n              density: densityScale(val),\n              bin: posBin\n            };\n          }); // width of highlight rect\n\n          var highlightWidth = width / data.length; // console.log(markerData);\n          // add distrubution clipping mask\n\n          var svgDefs = chartSVG.appendSelect('defs');\n          svgDefs.appendSelect('clipPath').attr('id', \"\".concat(node.id, \"-clip-path\")).appendSelect('path').transition(transition).attr('d', distributionArea(density)); // add highlight shape\n\n          var highlightGroup = chartSVG.appendSelect('g.highlights').attr('class', 'highlights');\n          var highlights = highlightGroup.selectAll('rect').data(markerData, function (d) {\n            return d.key;\n          });\n          highlights.enter().append('rect').attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.height - props.margin.bottom).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\")).merge(highlights).transition(transition.delay(50).duration(750)).attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.margin.top).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\"));\n          highlights.exit().attr('height', 0).transition(transition).remove(); // add highlight marker for annotation\n\n          var arc = {};\n          arc.right = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(r, -props.annotation.offset, r, Math.PI, -Math.PI / 2, false);\n            }\n          };\n          arc.left = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(-r, -props.annotation.offset, r, 0, -Math.PI / 2, true);\n            }\n          };\n          var pointerSymbol = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc[props.annotation.orient]).size(props.annotation.size);\n          var arcRadius = Math.sqrt(2 * props.annotation.size / Math.PI); // const symBolMarker = props.markDataPoint.map(d => {\n          //   return {\n          //     key: d[props.dataParams.key],\n          //     line: [\n          //       [25, -25], [20, -25], [5, -20], [0, 0],\n          //     ],\n          //   };\n          // });\n          // const pathMarker = d3.line()\n          //   .curve(d3.curveBasis)\n          //   .x(d => (d[0]))\n          //   .y(d => (d[1]));\n\n          var highlightMarkers = highlightGroup.selectAll('g.marker-g').data(markerData, function (d) {\n            return d.key;\n          });\n          var markerG = highlightMarkers.enter().append('g').attr('class', function (d) {\n            return \"marker-g \".concat(d.key);\n          }).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          markerG.append('path').attr('class', function (d) {\n            return \"marker \".concat(d.key);\n          }).attr('fill', 'none').attr('d', function (d) {\n            return props.annotation.orient ? pointerSymbol() : xScale(d.value) >= width / 5 ? _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.left).size(props.annotation.size)() : _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.right).size(props.annotation.size)();\n          });\n          markerG.append('text').attr('transform', function (d) {\n            return xScale(d.value) >= width / 5 ? \"translate(\".concat(-arcRadius - 6, \", \").concat(-arcRadius - 6, \")\") : \"translate(\".concat(arcRadius + 6, \", \").concat(-arcRadius - 6, \")\");\n          }).attr('text-anchor', function (d) {\n            return xScale(d.value) >= width / 5 ? 'end' : 'start';\n          }).append('tspan').text(function (d) {\n            return d.text ? \"\".concat(d.text) : \"\".concat(d.key);\n          });\n          highlightMarkers.merge(highlightMarkers).transition(transition).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          highlightMarkers.exit().remove();\n        }\n      } // RUGPLOT\n\n\n      if (props.rugPlot) {\n        var rugPosition = {\n          y: props.height - props.margin.bottom - 13,\n          height: props.rugProps.height,\n          zoom: (props.rugProps.height + props.rugProps.activeRugZoom * 2) / props.rugProps.height\n        };\n        var xScaleRug; // add rugplot axis\n\n        if (props.histogram || props.densityPlot) {\n          xScaleRug = xScale;\n        } else {\n          xScaleRug = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues)) // .domain([-d3.extent(dataValues)[1], d3.extent(dataValues)[1]])\n          .range([props.margin.left, width - props.margin.right]);\n          var rugXAxis = chartSVG.appendSelect('g.axis-x').attr('class', 'axis axis-x') // .transition(transition)\n          .attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom, \")\"));\n\n          if (props.rugProps.customAxisLabels) {\n            rugXAxis.call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScaleRug).tickValues(props.rugProps.customAxisLabels.map(function (d) {\n              return d.pos;\n            })).tickFormat(function (d, i) {\n              return props.rugProps.customAxisLabels[i].label;\n            }).tickSize(20));\n          } else {\n            rugXAxis.call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScaleRug).tickValues(xScaleRug.domain()).tickFormat(numFormat).tickSize(20));\n          } // custom label format\n\n\n          if (props.rugProps.customAxisFormat) {\n            this.selection().select('.CountryRankingStrips .axis.axis-x').classed('customAxisFormat', 'true');\n          }\n        } // custom split axis\n\n\n        var splitAxisHeight = 2;\n        var gapBwAxis = 1;\n        var splitAxis = chartSVG.appendSelect('g.split-axis').attr('class', 'split-axis').attr('transform', \"translate(0,\".concat(rugPosition.y + rugPosition.height + splitAxisHeight * 2, \")\"));\n\n        if (props.rugProps.showSplitAxis && props.rugProps.splitAxis) {\n          // splitAxisHeight = 2;\n          // check if split point value is in domain\n          if (props.rugProps.splitAxis.value >= xScaleRug.domain()[1]) {\n            props.rugProps.splitAxis.value = xScaleRug.domain()[1];\n            gapBwAxis = 0; // console.log('G');\n          }\n\n          if (props.rugProps.splitAxis.value <= xScaleRug.domain()[0]) {\n            props.rugProps.splitAxis.value = xScaleRug.domain()[0];\n            gapBwAxis = 0; // console.log('S');\n          } // left\n\n\n          splitAxis.appendSelect('rect.axis-left').attr('class', 'axis-left').style('fill', props.rugProps.splitAxis.colors[0]).style('stroke', props.rugProps.splitAxis.colors[0]).style('stroke-width', 1).attr('x', xScaleRug.range()[0]).attr('y', -2).attr('height', splitAxisHeight).attr('width', xScaleRug(props.rugProps.splitAxis.value) - xScaleRug.range()[0] - gapBwAxis); // right\n\n          splitAxis.appendSelect('rect.axis-right').attr('class', 'axis-right').style('fill', props.rugProps.splitAxis.colors[1]).style('stroke', props.rugProps.splitAxis.colors[1]).style('stroke-width', 1).attr('x', xScaleRug(props.rugProps.splitAxis.value) + gapBwAxis).attr('y', -2).attr('height', splitAxisHeight).attr('width', xScaleRug.range()[1] - xScaleRug(props.rugProps.splitAxis.value)); // add css colors to the axis labels\n\n          chartSVG.select('g.axis').classed('split-axis', true).lower(); // chartSVG.select('g.axis.customAxisFormat g.tick:first-of-type text').style('fill', props.rugProps.splitAxis.colors[0]);\n          // chartSVG.select('g.axis.customAxisFormat g.tick:last-of-type text').style('fill', props.rugProps.splitAxis.colors[1]);\n        } else {\n          splitAxis.remove();\n          chartSVG.select('g.axis').classed('split-axis', false);\n        }\n\n        var rugPlot = plot.appendSelect('g.rugplot').attr('class', 'rugplot');\n        var rugs = rugPlot.selectAll('rect').data(data, function (d) {\n          return d.key;\n        });\n        rugs.enter().append('rect').attr('class', function (d) {\n          return \"\".concat(d[props.dataParams.key]);\n        }).attr('data-value', function (d) {\n          return \"\".concat(d[props.dataParams.value]);\n        }).style('fill', props.rugProps.rugColor) // .style('fill', d => d[props.dataParams.value] < 0 ? '#ee665b' : '#74c476')\n        .attr('x', function (d) {\n          return xScaleRug(d[props.dataParams.value]) - props.rugProps.rugWidth / 2;\n        }).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', props.rugProps.rugWidth).attr('transform-origin', function (d) {\n          return \"\".concat(xScaleRug(d[props.dataParams.value]) - props.rugProps.rugWidth / 2, \" \").concat(rugPosition.y + rugPosition.height / 2);\n        }) // .style('transition', null)\n        .merge(rugs) // .style('transition', null)\n        .transition(transition).attr('data-value', function (d) {\n          return \"\".concat(d[props.dataParams.value]);\n        }).attr('x', function (d) {\n          return xScaleRug(d[props.dataParams.value]) - props.rugProps.rugWidth / 2;\n        }).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', props.rugProps.rugWidth).attr('transform-origin', function (d) {\n          return \"\".concat(xScaleRug(d[props.dataParams.value]) - props.rugProps.rugWidth / 2, \" \").concat(rugPosition.y + rugPosition.height / 2);\n        });\n        rugs.exit().remove();\n        plot.raise(); // add highlight\n\n        if (props.rugProps.annotation && !(props.histogram || props.densityPlot)) {\n          var _markerData = props.rugProps.annotation.map(function (element) {\n            // console.log(element);\n            var val = element[props.dataParams.value] !== null && !isNaN(element[props.dataParams.value]) ? element[props.dataParams.value] : data.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value];\n            return {\n              key: element[props.dataParams.key] || \"value\".concat(val),\n              value: val,\n              text: element.text || props.rugProps.getTooltipText(element[props.dataParams.key]) // text: element.text || element[props.dataParams.key],\n\n            };\n          });\n\n          var tooltipData = data.map(function (element) {\n            return {\n              key: element[props.dataParams.key],\n              value: element[props.dataParams.value],\n              text: props.rugProps.getTooltipText(element[props.dataParams.key])\n            };\n          }); // console.log(markerData);\n\n          var _annoPos = function _annoPos(text, val) {\n            var textPos = 0;\n            var textAnchor = 'middle';\n            var textLen = text.length * 3;\n\n            if (textLen) {\n              if (xScaleRug(val) + textLen >= xScaleRug.range()[1]) {\n                textPos = 6;\n                textAnchor = 'end';\n              }\n\n              if (xScaleRug(val) - textLen <= xScaleRug.range()[0]) {\n                textPos = -6;\n                textAnchor = 'start';\n              }\n            }\n\n            return {\n              xPos: textPos,\n              xAnchor: textAnchor\n            };\n          };\n\n          var markerPos = Math.sqrt(2 * (rugPosition.height * 3) / Math.PI) + props.rugProps.activeRugZoom * 2;\n          var markerSymbol = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbolTriangle).size(rugPosition.height * 3);\n          var markerRadius = props.rugProps.showTipMarker ? Math.sqrt(2 * (rugPosition.height * 3) / Math.PI) : 0;\n\n          var _highlightGroup = chartSVG.appendSelect('g.highlights').attr('class', 'highlights');\n\n          var rugBgBar = _highlightGroup.appendSelect('rect.highlight-bar').attr('class', 'highlight-bar') // .style('opacity', 0.55)\n          .attr('x', xScaleRug.range()[0]).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', xScaleRug.range()[1] - xScaleRug.range()[0]);\n\n          var rugTouchArea = chartSVG.appendSelect('rect.touch-area').attr('class', 'touch-area').style('fill', 'transparent').style('stroke', 'none').attr('x', xScaleRug.range()[0]).attr('y', 0).attr('height', props.height).attr('width', xScaleRug.range()[1] - xScaleRug.range()[0]).raise();\n\n          var _drawTooltips = function _drawTooltips(data, classList) {\n            if (props.rugProps.showTipMarker) {\n              var marker = _highlightGroup.selectAll('path.marker-rug').data(data, function (d) {\n                return d.key;\n              });\n\n              marker.enter().append('path').attr('class', function (d) {\n                return _markerData.find(function (m) {\n                  return m.key === d.key;\n                }) ? \"marker-rug \".concat(d.key, \" \").concat(classList, \" highlighted\") : \"marker-rug \".concat(d.key, \" \").concat(classList);\n              }).attr('fill', 'none').attr('d', markerSymbol).attr('transform', function (d) {\n                return \"translate(\".concat(xScaleRug(d.value), \", \").concat(rugPosition.y - markerPos, \") rotate(180)\");\n              }).merge(marker).interrupt().transition(transition).attr('transform', function (d) {\n                return \"translate(\".concat(xScaleRug(d.value), \", \").concat(rugPosition.y - markerPos, \") rotate(180)\");\n              });\n              marker.exit().remove();\n            }\n\n            var markerText = _highlightGroup.selectAll('text.marker-text').data(data, function (d) {\n              return d.key;\n            });\n\n            markerText.enter().append('text').attr('transform', function (d) {\n              return \"translate(\".concat(xScaleRug(d.value) + _annoPos(d.text, d.value).xPos, \", \").concat(rugPosition.y - 3 * markerRadius - props.rugProps.activeRugZoom * 2 - props.rugProps.textHeight * 1.414, \")\");\n            }).attr('class', function (d) {\n              return _markerData.find(function (m) {\n                return m.key === d.key;\n              }) ? \"marker-text \".concat(d.key, \" \").concat(classList, \" highlighted\") : \"marker-text \".concat(d.key, \" \").concat(classList);\n            }).text(function (d) {\n              return \"\".concat(d.text);\n            }).attr('text-anchor', function (d) {\n              return _annoPos(d.text, d.value).xAnchor;\n            }).merge(markerText).interrupt().transition(transition).attr('transform', function (d) {\n              return \"translate(\".concat(xScaleRug(d.value) + _annoPos(d.text, d.value).xPos, \", \").concat(rugPosition.y - 3 * markerRadius - props.rugProps.activeRugZoom * 2 - props.rugProps.textHeight * 1.414, \")\");\n            }).text(function (d) {\n              return \"\".concat(d.text);\n            }).attr('text-anchor', function (d) {\n              return _annoPos(d.text, d.value).xAnchor;\n            });\n            markerText.exit().remove(); // display values at point\n\n            var markerTextValues = _highlightGroup.selectAll('text.marker-textvalue').data(data, function (d) {\n              return d.key;\n            });\n\n            markerTextValues.enter().append('text') // .attr('transform', d => `translate(${xScaleRug(d.value) + _annoPos(d.text, d.value).xPos}, ${props.height - props.margin.bottom + 12 + splitAxisHeight})`)\n            .attr('transform', function (d) {\n              return \"translate(\".concat(xScaleRug(d.value) + _annoPos(d.text, d.value).xPos, \", \").concat(rugPosition.y - 3 * markerRadius - props.rugProps.activeRugZoom * 2 - props.rugProps.textHeight / 4, \")\");\n            }).attr('class', function (d) {\n              return \"marker-textvalue \".concat(d.key, \" \").concat(classList);\n            }).text(function (d) {\n              return \"\".concat(tooltipNumberFormatter(d.value));\n            }).attr('text-anchor', function (d) {\n              return _annoPos(d.text, d.value).xAnchor;\n            }).merge(markerTextValues).interrupt().transition(transition).attr('transform', function (d) {\n              return \"translate(\".concat(xScaleRug(d.value) + _annoPos(d.text, d.value).xPos, \", \").concat(rugPosition.y - 3 * markerRadius - props.rugProps.activeRugZoom * 2 - props.rugProps.textHeight / 4, \")\");\n            }) // .attr('transform', d => `translate(${xScaleRug(d.value) + _annoPos(d.text, d.value).xPos}, ${props.height - props.margin.bottom + 12 + splitAxisHeight})`)\n            .text(function (d) {\n              return \"\".concat(tooltipNumberFormatter(d.value));\n            }).attr('text-anchor', function (d) {\n              return _annoPos(d.text, d.value).xAnchor;\n            });\n            markerTextValues.exit().remove(); // de-active old rugs\n\n            rugPlot.selectAll('rect').classed(classList, false).transition.on('end', function (d) {\n              return transition().duration(5000);\n            }) // .style('transition', 'all 0.2s')\n            .style('fill', function (element) {\n              return _markerData.find(function (d) {\n                return d.key === element.key;\n              }) ? props.rugProps.highlightColor : props.rugProps.rugColor;\n            }).style('transform', function (element) {\n              return _markerData.find(function (d) {\n                return d.key === element.key;\n              }) ? \"scaleX(\".concat(rugPosition.zoom, \") scaleY(1)\") : 'scaleX(1) scaleY(1)';\n            }); // active rug for tooltip\n\n            data.forEach(function (element) {\n              rugPlot.select(\"rect.\".concat(element.key)).classed(classList, true).style('fill', _markerData.find(function (d) {\n                return d.key === element.key;\n              }) ? props.rugProps.highlightColor : props.rugProps.rugColor).transition('end', transition).style('transform', \"scaleX(\".concat(rugPosition.zoom, \") scaleY(\").concat(rugPosition.zoom, \")\"));\n              rugPlot.select(\"rect.\".concat(element.key)).raise();\n            });\n          }; // TOOLTIP AND HIGHLIGHTS\n\n\n          var _setDefaultTooltip = function _setDefaultTooltip() {\n            // draw highlight label\n            _drawTooltips(_markerData, 'active highlighted');\n          };\n\n          var _getActiveTooltip = function _getActiveTooltip(pos) {\n            var mouseVal = xScaleRug.invert(pos); // const lookup = tooltipData.filter(d => markerData.find(e => e.key !== d.key));\n\n            return tooltipData.reduce(function (prev, curr) {\n              return Math.abs(curr.value - mouseVal) < Math.abs(prev.value - mouseVal) ? curr : prev;\n            });\n          };\n\n          var _setActiveTooltip = function _setActiveTooltip(el) {\n            // draw hover label\n            _drawTooltips(el instanceof Array ? el : [el], 'active');\n          }; // highlight the rugs\n\n\n          _setDefaultTooltip();\n\n          rugTouchArea.on('mouseover mousemove touchenter touchstart touchmove', lodash_throttle__WEBPACK_IMPORTED_MODULE_12___default()(function () {\n            if (!_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].event) return;\n\n            _setActiveTooltip(_getActiveTooltip(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mouse(chartSVG.node())[0])); // if split axis active then reposition it to accomodate the zoomed rugs\n            // splitAxis\n            //   .interrupt()\n            //   .transition(transition)\n            //   .attr('transform', `translate(0,${props.height - props.margin.bottom + 3 + props.rugProps.activeRugZoom / 2})`);\n\n          }, 50));\n          rugTouchArea.on('mouseout touchleave touchcancel', function () {\n            _setDefaultTooltip(); // if split axis active then reposition it to accomodate the zoomed rugs\n            // splitAxis\n            //   .interrupt()\n            //   .transition(transition)\n            //   .attr('transform', `translate(0,${props.height - props.margin.bottom})`);\n\n          });\n        }\n      } // HISTOGRAM CODE\n\n\n      if (props.histogram) {\n        var hists = plot.appendSelect('g.histogram').attr('class', 'histogram').selectAll('rect').data(bins);\n        hists.enter().append('rect').attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        }).merge(hists).transition(transition).attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        });\n        hists.exit().remove(); // FOR HIGHLIGHTING THE BIN WITH THE DATA POINT\n        // const dataHighlight = bins.find(element => {\n        //   return element.includes(6.2960862166761205);\n        // });\n        // console.log((dataHighlight));\n        // const posHighlight = (d) => {\n        //   return [\n        //     [(d.x0), (0)],\n        //     [(d.x0), density[(d.x0)][1]],\n        //     [(d.x1), density[(d.x1)][1]],\n        //     [(d.x1), (0)],\n        //   ];\n        // };\n        // console.log(pathHighlight(dataHighlight));\n        // plot.appendSelect('path.area-highlight')\n        //   .attr('class', 'area-highlight')\n        //   .datum(pathHighlight(dataHighlight))\n        //   .attr('fill', 'red')\n        //   .style('clip-path', 'url(#clip-path)')\n        //   .attr('d', distributionArea);\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryRankingStrips;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountryRankingStrips);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})