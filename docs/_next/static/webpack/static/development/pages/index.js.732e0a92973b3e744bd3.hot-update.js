webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar CountryRankingStrips = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(CountryRankingStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryRankingStrips);\n\n  function CountryRankingStrips() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, CountryRankingStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      locale: 'en',\n      // chartTitle : \"\",\n      dataParams: {\n        key: 'key',\n        value: 'value'\n      },\n      height: 100,\n      margin: {\n        top: 18,\n        right: 18,\n        bottom: 20,\n        left: 4\n      },\n      densityPlot: false,\n      histogram: false,\n      distributionProps: {\n        bandwidth: 1,\n        threshold: 35,\n        // same as bin-width for histogram\n        curveType: 'curveBasis'\n      },\n      annotation: {\n        // for distribution chart\n        size: 500,\n        offset: 6 // orient: 'right', // left or right\n\n      },\n      rugPlot: true,\n      rugProps: {\n        height: 16 // annotation: [\n        //   {\n        //     key: 'ES',\n        //     text: 'Spain',\n        //   },\n        // ],\n\n      } // markDataPoint: [// key should be same as dataParams\n      //   {\n      //     key: 'FR',\n      //     // text: 'India',\n      //   },\n      //   // {\n      //   //   key: 'CA',\n      //   //   // text: 'Yemen',\n      //   // },\n      // ],\n\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(CountryRankingStrips, [{\n    key: \"draw\",\n    // defaultData = defaultData;\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].transition().duration(750); // number formatters\n\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default.a(props.locale);\n      var numFormat = locale.format(','); // ADD CHART TITLE\n\n      if (props.chartTitle) {\n        this.selection().appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // FIX DATA\n      // filter null and NaN, keep 0's\n\n\n      var data = allData.filter(function (d) {\n        return parseFloat(d[props.dataParams.value]) !== 'null' && !isNaN(parseFloat(d[props.dataParams.value]));\n      });\n      var dataValues = data.map(function (d) {\n        return d[props.dataParams.value];\n      });\n      var extent = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues);\n      var min = extent[0];\n      var max = extent[1]; // We normalize data to fit in a range 0 - 100\n\n      var normalize = function normalize(d) {\n        return 100 * (d - min) / (max - min);\n      };\n\n      if (props.histogram || props.densityPlot) {\n        dataValues = dataValues.map(function (d) {\n          return normalize(d);\n        });\n        data = data.map(function (d) {\n          return {\n            key: d[props.dataParams.key],\n            value: normalize(d[props.dataParams.value])\n          };\n        });\n      }\n\n      console.log(data); // DEFINE SCALES\n\n      var xScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues)).nice().range([props.margin.left, width - props.margin.right]);\n      var thresholds, bins, yScale;\n\n      if (props.histogram || props.densityPlot) {\n        thresholds = xScale.ticks(props.distributionProps.threshold);\n        bins = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].histogram().domain(xScale.domain()).thresholds(thresholds)(dataValues);\n        yScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([0, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].max(bins, function (d) {\n          return d.length;\n        }) / data.length]).range([props.height - props.margin.bottom, props.margin.top]);\n      } // DRAW CHART\n\n\n      var chartSVG = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width).attr('height', props.height).attr('class', 'CountryRankingStrips'); // add chart plot holder\n\n      var plot = chartSVG.appendSelect('g.plot').attr('class', 'plot'); // add axis\n\n      chartSVG.appendSelect('g.axis-x').attr('class', 'axis axis-x').transition(transition).attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom, \")\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScale) // .tickValues(thresholds)\n      .tickValues(xScale.domain()).tickFormat(numFormat)); // chartSVG.appendSelect('g.axis-y')\n      //   .attr('transform', `translate(${props.margin.left},0)`)\n      //   .call(d3.axisLeft(yScale).ticks(null, '%'))\n      //   .call(g => g.select('.domain').remove());\n\n      if (props.densityPlot) {\n        var distributionLine = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].line().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y(function (d) {\n          return yScale(d[1]);\n        });\n        var distributionArea = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].area().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y1(function (d) {\n          return yScale(d[1]);\n        }).y0(function (d) {\n          return yScale(0);\n        }); // DISTRIBUTION MATH\n\n        var kde = function kde(kernel, thresholds, data) {\n          return thresholds.map(function (t) {\n            return [t, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mean(data, function (d) {\n              return kernel(t - d);\n            })];\n          });\n        };\n\n        var epanechnikov = function epanechnikov(bandwidth) {\n          return function (x) {\n            return Math.abs(x /= bandwidth) <= 1 ? 0.75 * (1 - x * x) / bandwidth : 0;\n          };\n        };\n\n        var density = kde(epanechnikov(props.distributionProps.bandwidth), thresholds, dataValues); // console.log(yScale.domain());\n\n        console.log('density', density);\n        console.log('bins', bins);\n        plot.appendSelect('path.distribution-area').attr('class', 'area distribution-area').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionArea); // console.log('area', d3.polygonArea((density)));\n\n        plot.appendSelect('path.distribution-line').attr('class', 'line distribution-line').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionLine); // HIGHLIGHT DATA PONT\n\n        if (props.markDataPoint) {\n          // set data point\n          var markerData = props.markDataPoint.map(function (element) {\n            var val = element[props.dataParams.value] ? normalize(element[props.dataParams.value]) : normalize(allData.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value]);\n            var posDist = 0;\n            var posBin = bins.find(function (element, i) {\n              posDist = i;\n              return element.includes(val);\n            });\n            var densityScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([posBin.x0, posBin.x1]).range([density[posDist][1], density[posDist + 1][1]]);\n            return {\n              key: element[props.dataParams.key],\n              value: val,\n              text: element.text,\n              densityIndex: posDist,\n              density: densityScale(val),\n              bin: posBin\n            };\n          }); // width of highlight rect\n\n          var highlightWidth = width / data.length; // console.log(markerData);\n          // add distrubution clipping mask\n\n          var svgDefs = chartSVG.appendSelect('defs');\n          svgDefs.appendSelect('clipPath').attr('id', \"\".concat(node.id, \"-clip-path\")).appendSelect('path').transition(transition).attr('d', distributionArea(density)); // add highlight shape\n\n          var highlightGroup = chartSVG.appendSelect('g.highlights').attr('class', 'highlights');\n          var highlights = highlightGroup.selectAll('rect').data(markerData);\n          highlights.enter().append('rect').attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.height - props.margin.bottom).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\")).merge(highlights).transition(transition.delay(50).duration(750)).attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.margin.top).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\"));\n          highlights.exit().attr('height', 0).transition(transition).remove(); // add highlight marker for annotation\n\n          var arc = {};\n          arc.right = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(r, -props.annotation.offset, r, Math.PI, -Math.PI / 2, false);\n            }\n          };\n          arc.left = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(-r, -props.annotation.offset, r, 0, -Math.PI / 2, true);\n            }\n          };\n          var pointerSymbol = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc[props.annotation.orient]).size(props.annotation.size);\n          var arcRadius = Math.sqrt(2 * props.annotation.size / Math.PI); // const symBolMarker = props.markDataPoint.map(d => {\n          //   return {\n          //     key: d[props.dataParams.key],\n          //     line: [\n          //       [25, -25], [20, -25], [5, -20], [0, 0],\n          //     ],\n          //   };\n          // });\n          // const pathMarker = d3.line()\n          //   .curve(d3.curveBasis)\n          //   .x(d => (d[0]))\n          //   .y(d => (d[1]));\n\n          var highlightMarkers = highlightGroup.selectAll('g.marker-g').data(markerData, function (d) {\n            return d.key;\n          });\n          var markerG = highlightMarkers.enter().append('g').attr('class', function (d) {\n            return \"marker-g \".concat(d.key);\n          }).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          markerG.append('path').attr('class', function (d) {\n            return \"marker \".concat(d.key);\n          }).attr('fill', 'none').attr('d', function (d) {\n            return props.annotation.orient ? pointerSymbol() : xScale(d.value) >= width / 5 ? _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.left).size(props.annotation.size)() : _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.right).size(props.annotation.size)();\n          });\n          markerG.append('text').attr('transform', function (d) {\n            return xScale(d.value) >= width / 5 ? \"translate(\".concat(-arcRadius - 6, \", \").concat(-arcRadius - 6, \")\") : \"translate(\".concat(arcRadius + 6, \", \").concat(-arcRadius - 6, \")\");\n          }).attr('text-anchor', function (d) {\n            return xScale(d.value) >= width / 5 ? 'end' : 'start';\n          }).append('tspan').text(function (d) {\n            return d.text ? \"\".concat(d.text) : \"\".concat(d.key);\n          });\n          highlightMarkers.merge(highlightMarkers).transition(transition).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          highlightMarkers.exit().remove();\n        }\n      } // RUGPLOT\n\n\n      if (props.rugPlot) {\n        var rugPosition = {\n          y: props.height - props.margin.bottom - props.rugProps.height - 4,\n          height: props.rugProps.height\n        }; // if (props.histogram || props.densityPlot) {\n        // }\n\n        var rugWidth = 1;\n        var rugPlot = plot.appendSelect('g.rugplot').attr('class', 'rugplot');\n        var rugs = rugPlot.selectAll('rect').data(data);\n        rugs.enter().append('rect').attr('class', function (d) {\n          return \"\".concat(d.key);\n        }) // .attr('data-value', d => `${d.value}`)\n        .attr('x', function (d) {\n          return xScale(d.value) - rugWidth / 2;\n        }).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', rugWidth).merge(rugs).transition(transition).attr('x', function (d) {\n          return xScale(d.value) - rugWidth / 2;\n        }).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', rugWidth);\n        rugs.exit().remove(); // add highlight\n\n        if (props.rugProps.annotation && !(props.histogram || props.densityPlot)) {\n          var _highlightGroup = rugPlot.appendSelect('g.highlights').attr('class', 'highlights');\n\n          _highlightGroup.appendSelect('rect.highlight-bar').attr('class', 'highlight-bar').style('opacity', 0.55).attr('x', xScale.range()[0]).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', xScale.range()[1] - xScale.range()[0]).transition(transition).attr('width', xScale.range()[1] - xScale.range()[0]);\n\n          var _markerData = props.rugProps.annotation.map(function (element) {\n            var val = element[props.dataParams.value] ? element[props.dataParams.value] : data.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value];\n            return {\n              key: element[props.dataParams.key],\n              value: val,\n              text: element.text || element[props.dataParams.key]\n            };\n          });\n\n          var markerPos = Math.sqrt(2 * (rugPosition.height * 3) / Math.PI) + 4;\n          var markerSymbol = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbolTriangle).size(rugPosition.height * 3);\n\n          var _highlightMarkers = _highlightGroup.selectAll('g.marker-g').data(_markerData, function (d) {\n            return d.key;\n          });\n\n          var _markerG = _highlightMarkers.enter().append('g').attr('class', function (d) {\n            return \"marker-g \".concat(d.key);\n          }).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(rugPosition.y - markerPos, \")\");\n          });\n\n          _markerG.append('path').attr('class', function (d) {\n            return \"marker-rug \".concat(d.key);\n          }).style('transform', 'rotate(180deg)').attr('fill', 'none').attr('d', markerSymbol);\n\n          _markerG.append('text').attr('transform', \"translate(0, \".concat(-markerPos - 2, \")\")).attr('text-anchor', 'middle').append('tspan').text(function (d) {\n            return \"\".concat(d.text);\n          });\n\n          _highlightMarkers.merge(_highlightMarkers).transition(transition).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(rugPosition.y - markerPos, \")\");\n          });\n\n          _highlightMarkers.exit().remove();\n\n          rugs.raise();\n        }\n      } // HISTOGRAM CODE\n\n\n      if (props.histogram) {\n        var hists = plot.appendSelect('g.histogram').attr('class', 'histogram').selectAll('rect').data(bins);\n        hists.enter().append('rect').attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        }).merge(hists).transition(transition).attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        });\n        hists.exit().remove(); // FOR HIGHLIGHTING THE BIN WITH THE DATA POINT\n        // const dataHighlight = bins.find(element => {\n        //   return element.includes(6.2960862166761205);\n        // });\n        // console.log((dataHighlight));\n        // const posHighlight = (d) => {\n        //   return [\n        //     [(d.x0), (0)],\n        //     [(d.x0), density[(d.x0)][1]],\n        //     [(d.x1), density[(d.x1)][1]],\n        //     [(d.x1), (0)],\n        //   ];\n        // };\n        // console.log(pathHighlight(dataHighlight));\n        // plot.appendSelect('path.area-highlight')\n        //   .attr('class', 'area-highlight')\n        //   .datum(pathHighlight(dataHighlight))\n        //   .attr('fill', 'red')\n        //   .style('clip-path', 'url(#clip-path)')\n        //   .attr('d', distributionArea);\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryRankingStrips;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountryRankingStrips);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})