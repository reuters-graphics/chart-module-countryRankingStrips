webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\nvar CountryRankingStrips = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(CountryRankingStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryRankingStrips);\n\n  function CountryRankingStrips() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, CountryRankingStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      locale: 'en',\n      dataParams: {\n        key: 'key',\n        value: 'value'\n      },\n      // distributionProps: {\n      //   bandwidth: 1,\n      //   threshold: 35,\n      //   xTicks: 5,\n      //   curveType: 'curveBasis',\n      // },\n      height: 250,\n      margin: {\n        top: 0,\n        right: 20,\n        bottom: 20,\n        left: 20\n      },\n      densityPlot: false,\n      rugPlot: true,\n      histogram: true,\n      // markDataPoint: [// key should be same as dataParams\n      //   {\n      //     key: 'FR',\n      //     // text: 'India',\n      //   },\n      //   // {\n      //   //   key: 'CA',\n      //   //   // text: 'Yemen',\n      //   // },\n      // ],\n      // chartTitle : \"\",\n      annotation: {\n        size: 500,\n        offset: 6 // orient: 'right', // left or right\n\n      }\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(CountryRankingStrips, [{\n    key: \"draw\",\n    // defaultData = defaultData;\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].transition().duration(750); // number formatters\n\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default.a(props.locale);\n      var numFormat = locale.format(','); // ADD CHART TITLE\n\n      if (props.chartTitle) {\n        this.selection().appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // FIX DATA\n      // filter null and NaN, keep 0's\n\n\n      var data = allData.filter(function (d) {\n        return parseFloat(d[props.dataParams.value]) !== 'null' && !isNaN(parseFloat(d[props.dataParams.value]));\n      });\n      var dataValues = data.map(function (d) {\n        return d[props.dataParams.value];\n      });\n      console.log(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(data));\n      var extent = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues);\n      var min = extent[0];\n      var max = extent[1]; // We normalize data to fit in a range 0 - 100\n\n      var normalize = function normalize(d) {\n        return 100 * (d - min) / (max - min);\n      };\n\n      if (props.histogram || props.densityPlot) {\n        dataValues = dataValues.map(function (d) {\n          return normalize(d);\n        });\n        data = data.map(function (d) {\n          return {\n            key: d[props.dataParams.key],\n            value: normalize(d[props.dataParams.value])\n          };\n        });\n      } // DEFINE SCALES\n\n\n      var xScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues)).nice().range([props.margin.left, width - props.margin.right]);\n      var thresholds = xScale.ticks(props.distributionProps.threshold);\n      var bins = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].histogram().domain(xScale.domain()).thresholds(thresholds)(dataValues);\n      var yScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([0, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].max(bins, function (d) {\n        return d.length;\n      }) / data.length]).range([props.height - props.margin.bottom, props.margin.top]); // DRAW CHART\n\n      var chartSVG = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width).attr('height', props.height).attr('class', 'CountryRankingStrips'); // add chart plot holder\n\n      var plot = chartSVG.appendSelect('g.plot').attr('class', 'plot'); // add axis\n\n      chartSVG.appendSelect('g.axis-x').attr('class', 'axis axis-x').transition(transition).attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom, \")\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScale) // .tickValues(thresholds)\n      // .tickValues(xScale.domain())\n      .ticks(props.distributionProps.xTicks).tickFormat(numFormat)); // chartSVG.appendSelect('g.axis-y')\n      //   .attr('transform', `translate(${props.margin.left},0)`)\n      //   .call(d3.axisLeft(yScale).ticks(null, '%'))\n      //   .call(g => g.select('.domain').remove());\n\n      if (props.densityPlot) {\n        var distributionLine = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].line().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y(function (d) {\n          return yScale(d[1]);\n        });\n        var distributionArea = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].area().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y1(function (d) {\n          return yScale(d[1]);\n        }).y0(function (d) {\n          return yScale(0);\n        }); // DISTRIBUTION MATH\n\n        var kde = function kde(kernel, thresholds, data) {\n          return thresholds.map(function (t) {\n            return [t, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mean(data, function (d) {\n              return kernel(t - d);\n            })];\n          });\n        };\n\n        var epanechnikov = function epanechnikov(bandwidth) {\n          return function (x) {\n            return Math.abs(x /= bandwidth) <= 1 ? 0.75 * (1 - x * x) / bandwidth : 0;\n          };\n        };\n\n        var density = kde(epanechnikov(props.distributionProps.bandwidth), thresholds, dataValues); // console.log(yScale.domain());\n\n        console.log('density', density);\n        console.log('bins', bins);\n        plot.appendSelect('path.distribution-area').attr('class', 'area distribution-area').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionArea); // console.log('area', d3.polygonArea((density)));\n\n        plot.appendSelect('path.distribution-line').attr('class', 'line distribution-line').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionLine); // HIGHLIGHT DATA PONT\n\n        if (props.markDataPoint) {\n          // set data point\n          var markerData = props.markDataPoint.map(function (element) {\n            var val = element[props.dataParams.value] ? normalize(element[props.dataParams.value]) : normalize(allData.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value]);\n            var posDist = 0;\n            var posBin = bins.find(function (element, i) {\n              posDist = i;\n              return element.includes(val);\n            });\n            var densityScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([posBin.x0, posBin.x1]).range([density[posDist][1], density[posDist + 1][1]]);\n            return {\n              key: element[props.dataParams.key],\n              value: val,\n              text: element.text,\n              densityIndex: posDist,\n              density: densityScale(val),\n              bin: posBin\n            };\n          }); // width of highlight rect\n\n          var highlightWidth = width / data.length; // console.log(markerData);\n          // add distrubution clipping mask\n\n          var svgDefs = chartSVG.appendSelect('defs');\n          svgDefs.appendSelect('clipPath').attr('id', \"\".concat(node.id, \"-clip-path\")).appendSelect('path').transition(transition).attr('d', distributionArea(density)); // add highlight shape\n\n          var highlightGroup = chartSVG.appendSelect('g.highlights').attr('class', 'highlights');\n          var highlights = highlightGroup.selectAll('rect').data(markerData);\n          highlights.enter().append('rect').attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.height - props.margin.bottom).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\")).merge(highlights).transition(transition.delay(50).duration(750)).attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.margin.top).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\"));\n          highlights.exit().attr('height', 0).transition(transition).remove(); // add highlight marker for annotation\n\n          var arc = {};\n          arc.right = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(r, -props.annotation.offset, r, Math.PI, -Math.PI / 2, false);\n            }\n          };\n          arc.left = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(-r, -props.annotation.offset, r, 0, -Math.PI / 2, true);\n            }\n          };\n          var pointerSymbol = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc[props.annotation.orient]).size(props.annotation.size);\n          var arcRadius = Math.sqrt(2 * props.annotation.size / Math.PI); // const symBolMarker = props.markDataPoint.map(d => {\n          //   return {\n          //     key: d[props.dataParams.key],\n          //     line: [\n          //       [25, -25], [20, -25], [5, -20], [0, 0],\n          //     ],\n          //   };\n          // });\n          // const pathMarker = d3.line()\n          //   .curve(d3.curveBasis)\n          //   .x(d => (d[0]))\n          //   .y(d => (d[1]));\n\n          var highlightMarkers = highlightGroup.selectAll('g.marker-g').data(markerData, function (d) {\n            return d.key;\n          });\n          var markerG = highlightMarkers.enter().append('g').attr('class', function (d) {\n            return \"marker-g \".concat(d.key);\n          }).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          markerG.append('path').attr('class', function (d) {\n            return \"marker \".concat(d.key);\n          }).attr('fill', 'none').attr('d', function (d) {\n            return props.annotation.orient ? pointerSymbol() : xScale(d.value) >= width / 5 ? _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.left).size(props.annotation.size)() : _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.right).size(props.annotation.size)();\n          });\n          markerG.append('text').attr('transform', function (d) {\n            return xScale(d.value) >= width / 5 ? \"translate(\".concat(-arcRadius - 6, \", \").concat(-arcRadius - 6, \")\") : \"translate(\".concat(arcRadius + 6, \", \").concat(-arcRadius - 6, \")\");\n          }).attr('text-anchor', function (d) {\n            return xScale(d.value) >= width / 5 ? 'end' : 'start';\n          }).append('tspan').text(function (d) {\n            return d.text ? \"\".concat(d.text) : \"\".concat(d.key);\n          });\n          highlightMarkers.merge(highlightMarkers).transition(transition).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          highlightMarkers.exit().remove();\n        }\n      } // RUGPLOT\n\n\n      if (props.rugPlot) {\n        var rugs = plot.appendSelect('g.rugplot').attr('class', 'rugplot').selectAll('rect').data(data);\n        rugs.enter().append('rect').attr('class', function (d) {\n          return \"\".concat(d.key);\n        }).attr('data-value', function (d) {\n          return \"\".concat(d.value);\n        }).attr('x', function (d) {\n          return xScale(d.value);\n        }).attr('y', props.height - props.margin.bottom).attr('height', 24).attr('width', 2).merge(rugs).transition(transition).attr('x', function (d) {\n          return xScale(d.value);\n        }).attr('y', props.height - props.margin.bottom).attr('height', 24).attr('width', 2);\n        rugs.exit().remove();\n      } // HISTOGRAM CODE\n\n\n      if (props.histogram) {\n        var hists = plot.appendSelect('g.histogram').attr('class', 'histogram').selectAll('rect').data(bins);\n        hists.enter().append('rect').attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        }).merge(hists).transition(transition).attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        });\n        hists.exit().remove(); // FOR HIGHLIGHTING THE BIN WITH THE DATA POINT\n        // const dataHighlight = bins.find(element => {\n        //   return element.includes(6.2960862166761205);\n        // });\n        // console.log((dataHighlight));\n        // const posHighlight = (d) => {\n        //   return [\n        //     [(d.x0), (0)],\n        //     [(d.x0), density[(d.x0)][1]],\n        //     [(d.x1), density[(d.x1)][1]],\n        //     [(d.x1), (0)],\n        //   ];\n        // };\n        // console.log(pathHighlight(dataHighlight));\n        // plot.appendSelect('path.area-highlight')\n        //   .attr('class', 'area-highlight')\n        //   .datum(pathHighlight(dataHighlight))\n        //   .attr('fill', 'red')\n        //   .style('clip-path', 'url(#clip-path)')\n        //   .attr('d', distributionArea);\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryRankingStrips;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountryRankingStrips);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiQ291bnRyeVJhbmtpbmdTdHJpcHMiLCJsb2NhbGUiLCJkYXRhUGFyYW1zIiwia2V5IiwidmFsdWUiLCJoZWlnaHQiLCJtYXJnaW4iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJkZW5zaXR5UGxvdCIsInJ1Z1Bsb3QiLCJoaXN0b2dyYW0iLCJhbm5vdGF0aW9uIiwic2l6ZSIsIm9mZnNldCIsImFsbERhdGEiLCJkYXRhIiwicHJvcHMiLCJub2RlIiwic2VsZWN0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJ0cmFuc2l0aW9uIiwiZDMiLCJkdXJhdGlvbiIsIkQzTG9jYWxlIiwibnVtRm9ybWF0IiwiZm9ybWF0IiwiY2hhcnRUaXRsZSIsImFwcGVuZFNlbGVjdCIsImF0dHIiLCJodG1sIiwiZmlsdGVyIiwiZCIsInBhcnNlRmxvYXQiLCJpc05hTiIsImRhdGFWYWx1ZXMiLCJtYXAiLCJjb25zb2xlIiwibG9nIiwiZXh0ZW50IiwibWluIiwibWF4Iiwibm9ybWFsaXplIiwieFNjYWxlIiwic2NhbGVMaW5lYXIiLCJkb21haW4iLCJuaWNlIiwicmFuZ2UiLCJ0aHJlc2hvbGRzIiwidGlja3MiLCJkaXN0cmlidXRpb25Qcm9wcyIsInRocmVzaG9sZCIsImJpbnMiLCJ5U2NhbGUiLCJsZW5ndGgiLCJjaGFydFNWRyIsInBsb3QiLCJjYWxsIiwiYXhpc0JvdHRvbSIsInhUaWNrcyIsInRpY2tGb3JtYXQiLCJkaXN0cmlidXRpb25MaW5lIiwibGluZSIsImN1cnZlIiwiY3VydmVUeXBlIiwieCIsInkiLCJkaXN0cmlidXRpb25BcmVhIiwiYXJlYSIsInkxIiwieTAiLCJrZGUiLCJrZXJuZWwiLCJ0IiwibWVhbiIsImVwYW5lY2huaWtvdiIsImJhbmR3aWR0aCIsIk1hdGgiLCJhYnMiLCJkZW5zaXR5IiwiZGF0dW0iLCJtYXJrRGF0YVBvaW50IiwibWFya2VyRGF0YSIsImVsZW1lbnQiLCJ2YWwiLCJmaW5kIiwiZSIsInBvc0Rpc3QiLCJwb3NCaW4iLCJpIiwiaW5jbHVkZXMiLCJkZW5zaXR5U2NhbGUiLCJ4MCIsIngxIiwidGV4dCIsImRlbnNpdHlJbmRleCIsImJpbiIsImhpZ2hsaWdodFdpZHRoIiwic3ZnRGVmcyIsImlkIiwiaGlnaGxpZ2h0R3JvdXAiLCJoaWdobGlnaHRzIiwic2VsZWN0QWxsIiwiZW50ZXIiLCJhcHBlbmQiLCJzdHlsZSIsIm1lcmdlIiwiZGVsYXkiLCJleGl0IiwicmVtb3ZlIiwiYXJjIiwiZHJhdyIsImNvbnRleHQiLCJyIiwic3FydCIsIlBJIiwicG9pbnRlclN5bWJvbCIsInN5bWJvbCIsInR5cGUiLCJvcmllbnQiLCJhcmNSYWRpdXMiLCJoaWdobGlnaHRNYXJrZXJzIiwibWFya2VyRyIsInJ1Z3MiLCJoaXN0cyIsIkNoYXJ0Q29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0lBRU1BLG9COzs7Ozs7Ozs7Ozs7Ozs7O3VOQUNXO0FBQ2JDLFlBQU0sRUFBRSxJQURLO0FBRWJDLGdCQUFVLEVBQUU7QUFDVkMsV0FBRyxFQUFFLEtBREs7QUFFVkMsYUFBSyxFQUFFO0FBRkcsT0FGQztBQU1iO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxZQUFNLEVBQUUsR0FaSztBQWFiQyxZQUFNLEVBQUU7QUFDTkMsV0FBRyxFQUFFLENBREM7QUFFTkMsYUFBSyxFQUFFLEVBRkQ7QUFHTkMsY0FBTSxFQUFFLEVBSEY7QUFJTkMsWUFBSSxFQUFFO0FBSkEsT0FiSztBQW1CYkMsaUJBQVcsRUFBRSxLQW5CQTtBQW9CYkMsYUFBTyxFQUFFLElBcEJJO0FBcUJiQyxlQUFTLEVBQUUsSUFyQkU7QUFzQmI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxnQkFBVSxFQUFFO0FBQ1ZDLFlBQUksRUFBRSxHQURJO0FB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QU5ILENBTWNBLFVBTmQsRUFPR1EsSUFQSCxDQU9RLEdBUFIsRUFPYSxVQUFBRyxDQUFDO0FBQUEsaUJBQUlXLE1BQU0sQ0FBQ1gsQ0FBQyxDQUFDNEQsRUFBSCxDQUFOLEdBQWUsQ0FBbkI7QUFBQSxTQVBkLEVBUUcvRCxJQVJILENBUVEsR0FSUixFQVFhLFVBQUFHLENBQUM7QUFBQSxpQkFBSXFCLE1BQU0sQ0FBQ3JCLENBQUMsQ0FBQ3NCLE1BQUYsR0FBV3ZDLElBQUksQ0FBQ3VDLE1BQWpCLENBQVY7QUFBQSxTQVJkLEVBU0d6QixJQVRILENBU1EsT0FUUixFQVNpQixVQUFBRyxDQUFDO0FBQUEsaUJBQUlXLE1BQU0sQ0FBQ1gsQ0FBQyxDQUFDNkQsRUFBSCxDQUFOLEdBQWVsRCxNQUFNLENBQUNYLENBQUMsQ0FBQzRELEVBQUgsQ0FBckIsR0FBOEIsQ0FBbEM7QUFBQSxTQVRsQixFQVVHL0QsSUFWSCxDQVVRLFFBVlIsRUFVa0IsVUFBQUcsQ0FBQztBQUFBLGlCQUFJcUIsTUFBTSxDQUFDLENBQUQsQ0FBTixHQUFZQSxNQUFNLENBQUNyQixDQUFDLENBQUNzQixNQUFGLEdBQVd2QyxJQUFJLENBQUN1QyxNQUFqQixDQUF0QjtBQUFBLFNBVm5CO0FBWUVzRSxhQUFLLENBQUNoQixJQUFOLEdBQWFDLE1BQWIsR0FsQmlCLENBb0JuQjtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Q7O0FBRUQsYUFBTyxJQUFQO0FBQ0Q7Ozs7RUF0WGdDZ0IsNEQ7O0FBeVhwQmhJLG1GQUFmIiwiZmlsZSI6Ii4vc3JjL2xpYi9jaGFydC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDaGFydENvbXBvbmVudCBmcm9tICcuL2Jhc2UvQ2hhcnRDb21wb25lbnQnO1xuaW1wb3J0IGQzIGZyb20gJy4vdXRpbHMvZDMnO1xuaW1wb3J0IEQzTG9jYWxlIGZyb20gJ0ByZXV0ZXJzLWdyYXBoaWNzL2QzLWxvY2FsZSc7XG5cbmNsYXNzIENvdW50cnlSYW5raW5nU3RyaXBzIGV4dGVuZHMgQ2hhcnRDb21wb25lbnQge1xuICBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9jYWxlOiAnZW4nLFxuICAgIGRhdGFQYXJhbXM6IHtcbiAgICAgIGtleTogJ2tleScsXG4gICAgICB2YWx1ZTogJ3ZhbHVlJyxcbiAgICB9LFxuICAgIC8vIGRpc3RyaWJ1dGlvblByb3BzOiB7XG4gICAgLy8gICBiYW5kd2lkdGg6IDEsXG4gICAgLy8gICB0aHJlc2hvbGQ6IDM1LFxuICAgIC8vICAgeFRpY2tzOiA1LFxuICAgIC8vICAgY3VydmVUeXBlOiAnY3VydmVCYXNpcycsXG4gICAgLy8gfSxcbiAgICBoZWlnaHQ6IDI1MCxcbiAgICBtYXJnaW46IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAyMCxcbiAgICAgIGJvdHRvbTogMjAsXG4gICAgICBsZWZ0OiAyMCxcbiAgICB9LFxuICAgIGRlbnNpdHlQbG90OiBmYWxzZSxcbiAgICBydWdQbG90OiB0cnVlLFxuICAgIGhpc3RvZ3JhbTogdHJ1ZSxcbiAgICAvLyBtYXJrRGF0YVBvaW50OiBbLy8ga2V5IHNob3VsZCBiZSBzYW1lIGFzIGRhdGFQYXJhbXNcbiAgICAvLyAgIHtcbiAgICAvLyAgICAga2V5OiAnRlInLFxuICAgIC8vICAgICAvLyB0ZXh0OiAnSW5kaWEnLFxuICAgIC8vICAgfSxcbiAgICAvLyAgIC8vIHtcbiAgICAvLyAgIC8vICAga2V5OiAnQ0EnLFxuICAgIC8vICAgLy8gICAvLyB0ZXh0OiAnWWVtZW4nLFxuICAgIC8vICAgLy8gfSxcbiAgICAvLyBdLFxuICAgIC8vIGNoYXJ0VGl0bGUgOiBcIlwiLFxuICAgIGFubm90YXRpb246IHtcbiAgICAgIHNpemU6IDUwMCxcbiAgICAgIG9mZnNldDogNixcbiAgICAgIC8vIG9yaWVudDogJ3JpZ2h0JywgLy8gbGVmdCBvciByaWdodFxuICAgIH0sXG4gIH07XG5cbiAgLy8gZGVmYXVsdERhdGEgPSBkZWZhdWx0RGF0YTtcblxuICBkcmF3KCkge1xuICAgIGNvbnN0IGFsbERhdGEgPSB0aGlzLmRhdGEoKTtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHMoKTtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zZWxlY3Rpb24oKS5ub2RlKCk7XG5cbiAgICBjb25zdCB7IHdpZHRoIH0gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IGQzLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDc1MCk7XG5cbiAgICAvLyBudW1iZXIgZm9ybWF0dGVyc1xuICAgIGNvbnN0IGxvY2FsZSA9IG5ldyBEM0xvY2FsZShwcm9wcy5sb2NhbGUpO1xuICAgIGNvbnN0IG51bUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQoJywnKTtcblxuICAgIC8vIEFERCBDSEFSVCBUSVRMRVxuICAgIGlmIChwcm9wcy5jaGFydFRpdGxlKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbigpXG4gICAgICAgIC5hcHBlbmRTZWxlY3QoJ2Rpdi5jaGFydC10aXRsZScpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdmb250LWRpc3BsYXkgY2hhcnQtdGl0bGUnKVxuICAgICAgICAuaHRtbChgPGg2PiR7cHJvcHMuY2hhcnRUaXRsZX08L2g2PmApO1xuICAgIH1cblxuICAgIC8vIEZJWCBEQVRBXG4gICAgLy8gZmlsdGVyIG51bGwgYW5kIE5hTiwga2VlcCAwJ3NcbiAgICBsZXQgZGF0YSA9IGFsbERhdGEuZmlsdGVyKGQgPT4gcGFyc2VGbG9hdChkW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKSAhPT0gJ251bGwnICYmICFpc05hTihwYXJzZUZsb2F0KGRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0pKSk7XG5cbiAgICBsZXQgZGF0YVZhbHVlcyA9IGRhdGEubWFwKGQgPT4gZFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSk7XG4gICAgY29uc29sZS5sb2coZDMuZXh0ZW50KGRhdGEpKTtcblxuICAgIGNvbnN0IGV4dGVudCA9IGQzLmV4dGVudChkYXRhVmFsdWVzKTtcbiAgICBjb25zdCBtaW4gPSBleHRlbnRbMF07XG4gICAgY29uc3QgbWF4ID0gZXh0ZW50WzFdO1xuXG4gICAgLy8gV2Ugbm9ybWFsaXplIGRhdGEgdG8gZml0IGluIGEgcmFuZ2UgMCAtIDEwMFxuICAgIGNvbnN0IG5vcm1hbGl6ZSA9IGQgPT4gMTAwICogKGQgLSBtaW4pIC8gKG1heCAtIG1pbik7XG5cbiAgICBpZiAocHJvcHMuaGlzdG9ncmFtIHx8IHByb3BzLmRlbnNpdHlQbG90KSB7XG4gICAgICBkYXRhVmFsdWVzID0gZGF0YVZhbHVlcy5tYXAoZCA9PiBub3JtYWxpemUoZCkpO1xuICAgICAgZGF0YSA9IGRhdGEubWFwKGQgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleTogZFtwcm9wcy5kYXRhUGFyYW1zLmtleV0sXG4gICAgICAgICAgdmFsdWU6IG5vcm1hbGl6ZShkW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERFRklORSBTQ0FMRVNcbiAgICBjb25zdCB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKGQzLmV4dGVudChkYXRhVmFsdWVzKSkubmljZSgpXG4gICAgICAucmFuZ2UoW3Byb3BzLm1hcmdpbi5sZWZ0LCB3aWR0aCAtIHByb3BzLm1hcmdpbi5yaWdodF0pO1xuXG4gICAgY29uc3QgdGhyZXNob2xkcyA9IHhTY2FsZS50aWNrcyhwcm9wcy5kaXN0cmlidXRpb25Qcm9wcy50aHJlc2hvbGQpO1xuICAgIGNvbnN0IGJpbnMgPSBkMy5oaXN0b2dyYW0oKVxuICAgICAgLmRvbWFpbih4U2NhbGUuZG9tYWluKCkpXG4gICAgICAudGhyZXNob2xkcyh0aHJlc2hvbGRzKShkYXRhVmFsdWVzKTtcblxuICAgIGNvbnN0IHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oWzAsIGQzLm1heChiaW5zLCBkID0+IGQubGVuZ3RoKSAvIGRhdGEubGVuZ3RoXSlcbiAgICAgIC5yYW5nZShbcHJvcHMuaGVpZ2h0IC0gcHJvcHMubWFyZ2luLmJvdHRvbSwgcHJvcHMubWFyZ2luLnRvcF0pO1xuXG4gICAgLy8gRFJBVyBDSEFSVFxuICAgIGNvbnN0IGNoYXJ0U1ZHID0gdGhpcy5zZWxlY3Rpb24oKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnc3ZnJykgLy8gc2VlIGRvY3MgaW4gLi91dGlscy9kMy5qc1xuICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0JywgcHJvcHMuaGVpZ2h0KVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ0NvdW50cnlSYW5raW5nU3RyaXBzJyk7XG5cbiAgICAvLyBhZGQgY2hhcnQgcGxvdCBob2xkZXJcbiAgICBjb25zdCBwbG90ID0gY2hhcnRTVkcuYXBwZW5kU2VsZWN0KCdnLnBsb3QnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3Bsb3QnKTtcblxuICAgIC8vIGFkZCBheGlzXG4gICAgY2hhcnRTVkcuYXBwZW5kU2VsZWN0KCdnLmF4aXMteCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYXhpcyBheGlzLXgnKVxuICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtwcm9wcy5oZWlnaHQgLSBwcm9wcy5tYXJnaW4uYm90dG9tfSlgKVxuICAgICAgLmNhbGwoXG4gICAgICAgIGQzLmF4aXNCb3R0b20oeFNjYWxlKVxuICAgICAgICAgIC8vIC50aWNrVmFsdWVzKHRocmVzaG9sZHMpXG4gICAgICAgICAgLy8gLnRpY2tWYWx1ZXMoeFNjYWxlLmRvbWFpbigpKVxuICAgICAgICAgIC50aWNrcyhwcm9wcy5kaXN0cmlidXRpb25Qcm9wcy54VGlja3MpXG4gICAgICAgICAgLnRpY2tGb3JtYXQobnVtRm9ybWF0KVxuICAgICAgKTtcblxuICAgIC8vIGNoYXJ0U1ZHLmFwcGVuZFNlbGVjdCgnZy5heGlzLXknKVxuICAgIC8vICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtwcm9wcy5tYXJnaW4ubGVmdH0sMClgKVxuICAgIC8vICAgLmNhbGwoZDMuYXhpc0xlZnQoeVNjYWxlKS50aWNrcyhudWxsLCAnJScpKVxuICAgIC8vICAgLmNhbGwoZyA9PiBnLnNlbGVjdCgnLmRvbWFpbicpLnJlbW92ZSgpKTtcblxuICAgIGlmIChwcm9wcy5kZW5zaXR5UGxvdCkge1xuICAgICAgY29uc3QgZGlzdHJpYnV0aW9uTGluZSA9IGQzLmxpbmUoKVxuICAgICAgICAuY3VydmUoZDNbcHJvcHMuZGlzdHJpYnV0aW9uUHJvcHMuY3VydmVUeXBlXSlcbiAgICAgICAgLngoZCA9PiB4U2NhbGUoZFswXSkpXG4gICAgICAgIC55KGQgPT4geVNjYWxlKGRbMV0pKTtcblxuICAgICAgY29uc3QgZGlzdHJpYnV0aW9uQXJlYSA9IGQzLmFyZWEoKVxuICAgICAgICAuY3VydmUoZDNbcHJvcHMuZGlzdHJpYnV0aW9uUHJvcHMuY3VydmVUeXBlXSlcbiAgICAgICAgLngoZCA9PiB4U2NhbGUoZFswXSkpXG4gICAgICAgIC55MShkID0+IHlTY2FsZShkWzFdKSlcbiAgICAgICAgLnkwKGQgPT4geVNjYWxlKDApKTtcblxuICAgICAgLy8gRElTVFJJQlVUSU9OIE1BVEhcbiAgICAgIGNvbnN0IGtkZSA9IChrZXJuZWwsIHRocmVzaG9sZHMsIGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIHRocmVzaG9sZHMubWFwKHQgPT4gW3QsIGQzLm1lYW4oZGF0YSwgZCA9PiBrZXJuZWwodCAtIGQpKV0pO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGVwYW5lY2huaWtvdiA9IChiYW5kd2lkdGgpID0+IHtcbiAgICAgICAgcmV0dXJuIHggPT4gTWF0aC5hYnMoeCAvPSBiYW5kd2lkdGgpIDw9IDEgPyAwLjc1ICogKDEgLSB4ICogeCkgLyBiYW5kd2lkdGggOiAwO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgZGVuc2l0eSA9IGtkZShlcGFuZWNobmlrb3YocHJvcHMuZGlzdHJpYnV0aW9uUHJvcHMuYmFuZHdpZHRoKSwgdGhyZXNob2xkcywgZGF0YVZhbHVlcyk7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKHlTY2FsZS5kb21haW4oKSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdkZW5zaXR5JywgZGVuc2l0eSk7XG4gICAgICBjb25zb2xlLmxvZygnYmlucycsIGJpbnMpO1xuXG4gICAgICBwbG90LmFwcGVuZFNlbGVjdCgncGF0aC5kaXN0cmlidXRpb24tYXJlYScpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdhcmVhIGRpc3RyaWJ1dGlvbi1hcmVhJylcbiAgICAgICAgLmRhdHVtKGRlbnNpdHkpXG4gICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgIC5hdHRyKCdzdHJva2UtbGluZWpvaW4nLCAncm91bmQnKVxuICAgICAgICAuYXR0cignZCcsIGRpc3RyaWJ1dGlvbkFyZWEpO1xuXG4gICAgICAvLyBjb25zb2xlLmxvZygnYXJlYScsIGQzLnBvbHlnb25BcmVhKChkZW5zaXR5KSkpO1xuXG4gICAgICBwbG90LmFwcGVuZFNlbGVjdCgncGF0aC5kaXN0cmlidXRpb24tbGluZScpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5lIGRpc3RyaWJ1dGlvbi1saW5lJylcbiAgICAgICAgLmRhdHVtKGRlbnNpdHkpXG4gICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgIC5hdHRyKCdzdHJva2UtbGluZWpvaW4nLCAncm91bmQnKVxuICAgICAgICAuYXR0cignZCcsIGRpc3RyaWJ1dGlvbkxpbmUpO1xuXG4gICAgICAvLyBISUdITElHSFQgREFUQSBQT05UXG4gICAgICBpZiAocHJvcHMubWFya0RhdGFQb2ludCkge1xuICAgICAgLy8gc2V0IGRhdGEgcG9pbnRcbiAgICAgICAgY29uc3QgbWFya2VyRGF0YSA9IHByb3BzLm1hcmtEYXRhUG9pbnQubWFwKGVsZW1lbnQgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0gPyBub3JtYWxpemUoZWxlbWVudFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSkgOiBub3JtYWxpemUoYWxsRGF0YS5maW5kKGUgPT4gZVtwcm9wcy5kYXRhUGFyYW1zLmtleV0gPT09IGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy5rZXldKVtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSk7XG5cbiAgICAgICAgICBsZXQgcG9zRGlzdCA9IDA7XG4gICAgICAgICAgY29uc3QgcG9zQmluID0gYmlucy5maW5kKChlbGVtZW50LCBpKSA9PiB7XG4gICAgICAgICAgICBwb3NEaXN0ID0gaTtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmluY2x1ZGVzKHZhbCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjb25zdCBkZW5zaXR5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgICAuZG9tYWluKFtwb3NCaW4ueDAsIHBvc0Jpbi54MV0pXG4gICAgICAgICAgICAucmFuZ2UoW2RlbnNpdHlbcG9zRGlzdF1bMV0sIGRlbnNpdHlbcG9zRGlzdCArIDFdWzFdXSk7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMua2V5XSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWwsXG4gICAgICAgICAgICB0ZXh0OiBlbGVtZW50LnRleHQsXG4gICAgICAgICAgICBkZW5zaXR5SW5kZXg6IHBvc0Rpc3QsXG4gICAgICAgICAgICBkZW5zaXR5OiBkZW5zaXR5U2NhbGUodmFsKSxcbiAgICAgICAgICAgIGJpbjogcG9zQmluLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB3aWR0aCBvZiBoaWdobGlnaHQgcmVjdFxuICAgICAgICBjb25zdCBoaWdobGlnaHRXaWR0aCA9IHdpZHRoIC8gZGF0YS5sZW5ndGg7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2cobWFya2VyRGF0YSk7XG5cbiAgICAgICAgLy8gYWRkIGRpc3RydWJ1dGlvbiBjbGlwcGluZyBtYXNrXG4gICAgICAgIGNvbnN0IHN2Z0RlZnMgPSBjaGFydFNWRy5hcHBlbmRTZWxlY3QoJ2RlZnMnKTtcblxuICAgICAgICBzdmdEZWZzLmFwcGVuZFNlbGVjdCgnY2xpcFBhdGgnKVxuICAgICAgICAgIC5hdHRyKCdpZCcsIGAke25vZGUuaWR9LWNsaXAtcGF0aGApXG4gICAgICAgICAgLmFwcGVuZFNlbGVjdCgncGF0aCcpXG4gICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAuYXR0cignZCcsIGRpc3RyaWJ1dGlvbkFyZWEoZGVuc2l0eSkpO1xuXG4gICAgICAgIC8vIGFkZCBoaWdobGlnaHQgc2hhcGVcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0R3JvdXAgPSBjaGFydFNWRy5hcHBlbmRTZWxlY3QoJ2cuaGlnaGxpZ2h0cycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2hpZ2hsaWdodHMnKTtcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0cyA9IGhpZ2hsaWdodEdyb3VwLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgICAgLmRhdGEobWFya2VyRGF0YSk7XG5cbiAgICAgICAgaGlnaGxpZ2h0cy5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBgJHtkLmtleX1gKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXZhbHVlJywgZCA9PiBkLnZhbHVlKVxuICAgICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGUoZC52YWx1ZSkgLSAwLjUgKiBoaWdobGlnaHRXaWR0aClcbiAgICAgICAgICAuYXR0cigneScsIHByb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi5ib3R0b20pXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHByb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi50b3AgLSBwcm9wcy5tYXJnaW4uYm90dG9tKVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIGhpZ2hsaWdodFdpZHRoKVxuICAgICAgICAgIC5zdHlsZSgnY2xpcC1wYXRoJywgYHVybCgjJHtub2RlLmlkfS1jbGlwLXBhdGgpYClcbiAgICAgICAgICAubWVyZ2UoaGlnaGxpZ2h0cylcbiAgICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uLmRlbGF5KDUwKS5kdXJhdGlvbig3NTApKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYCR7ZC5rZXl9YClcbiAgICAgICAgICAuYXR0cignZGF0YS12YWx1ZScsIGQgPT4gZC52YWx1ZSlcbiAgICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQudmFsdWUpIC0gMC41ICogaGlnaGxpZ2h0V2lkdGgpXG4gICAgICAgICAgLmF0dHIoJ3knLCBwcm9wcy5tYXJnaW4udG9wKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwcm9wcy5oZWlnaHQgLSBwcm9wcy5tYXJnaW4udG9wIC0gcHJvcHMubWFyZ2luLmJvdHRvbSlcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBoaWdobGlnaHRXaWR0aClcbiAgICAgICAgICAuc3R5bGUoJ2NsaXAtcGF0aCcsIGB1cmwoIyR7bm9kZS5pZH0tY2xpcC1wYXRoKWApO1xuXG4gICAgICAgIGhpZ2hsaWdodHMuZXhpdCgpXG4gICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDApXG4gICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAucmVtb3ZlKCk7XG5cbiAgICAgICAgLy8gYWRkIGhpZ2hsaWdodCBtYXJrZXIgZm9yIGFubm90YXRpb25cbiAgICAgICAgY29uc3QgYXJjID0ge307XG4gICAgICAgIGFyYy5yaWdodCA9IHtcbiAgICAgICAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICAgICAgICBjb25zdCByID0gTWF0aC5zcXJ0KDIgKiBzaXplIC8gTWF0aC5QSSk7XG4gICAgICAgICAgICAvLyBjb25zdCBvcmdpbiA9ICg0ICogcikgLyAoMyAqIE1hdGguUEkpOyAvLyB0aGUgb3JnaW4gb2YgdGhlIGNpcmNsZVxuICAgICAgICAgICAgY29udGV4dC5hcmMociwgLXByb3BzLmFubm90YXRpb24ub2Zmc2V0LCByLCBNYXRoLlBJLCAtTWF0aC5QSSAvIDIsIGZhbHNlKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBhcmMubGVmdCA9IHtcbiAgICAgICAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgICAgICAgICBjb25zdCByID0gTWF0aC5zcXJ0KDIgKiBzaXplIC8gTWF0aC5QSSk7XG4gICAgICAgICAgICAvLyBjb25zdCBvcmdpbiA9ICg0ICogcikgLyAoMyAqIE1hdGguUEkpOyAvLyB0aGUgb3JnaW4gb2YgdGhlIGNpcmNsZVxuICAgICAgICAgICAgY29udGV4dC5hcmMoLXIsIC1wcm9wcy5hbm5vdGF0aW9uLm9mZnNldCwgciwgMCwgLU1hdGguUEkgLyAyLCB0cnVlKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBvaW50ZXJTeW1ib2wgPSBkMy5zeW1ib2woKS50eXBlKGFyY1twcm9wcy5hbm5vdGF0aW9uLm9yaWVudF0pLnNpemUocHJvcHMuYW5ub3RhdGlvbi5zaXplKTtcbiAgICAgICAgY29uc3QgYXJjUmFkaXVzID0gTWF0aC5zcXJ0KDIgKiBwcm9wcy5hbm5vdGF0aW9uLnNpemUgLyBNYXRoLlBJKTtcblxuICAgICAgICAvLyBjb25zdCBzeW1Cb2xNYXJrZXIgPSBwcm9wcy5tYXJrRGF0YVBvaW50Lm1hcChkID0+IHtcbiAgICAgICAgLy8gICByZXR1cm4ge1xuICAgICAgICAvLyAgICAga2V5OiBkW3Byb3BzLmRhdGFQYXJhbXMua2V5XSxcbiAgICAgICAgLy8gICAgIGxpbmU6IFtcbiAgICAgICAgLy8gICAgICAgWzI1LCAtMjVdLCBbMjAsIC0yNV0sIFs1LCAtMjBdLCBbMCwgMF0sXG4gICAgICAgIC8vICAgICBdLFxuICAgICAgICAvLyAgIH07XG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyBjb25zdCBwYXRoTWFya2VyID0gZDMubGluZSgpXG4gICAgICAgIC8vICAgLmN1cnZlKGQzLmN1cnZlQmFzaXMpXG4gICAgICAgIC8vICAgLngoZCA9PiAoZFswXSkpXG4gICAgICAgIC8vICAgLnkoZCA9PiAoZFsxXSkpO1xuXG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodE1hcmtlcnMgPSBoaWdobGlnaHRHcm91cC5zZWxlY3RBbGwoJ2cubWFya2VyLWcnKVxuICAgICAgICAgIC5kYXRhKG1hcmtlckRhdGEsIGQgPT4gZC5rZXkpO1xuXG4gICAgICAgIGNvbnN0IG1hcmtlckcgPSBoaWdobGlnaHRNYXJrZXJzLmVudGVyKCkuYXBwZW5kKCdnJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCBkID0+IGBtYXJrZXItZyAke2Qua2V5fWApXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gYHRyYW5zbGF0ZSgke3hTY2FsZShkLnZhbHVlKX0sICR7eVNjYWxlKGQuZGVuc2l0eSl9KWApO1xuXG4gICAgICAgIG1hcmtlckcuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCBkID0+IGBtYXJrZXIgJHtkLmtleX1gKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAgIC5hdHRyKCdkJywgZCA9PiBwcm9wcy5hbm5vdGF0aW9uLm9yaWVudCA/IHBvaW50ZXJTeW1ib2woKSA6XG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgIHhTY2FsZShkLnZhbHVlKSA+PSB3aWR0aCAvIDUgPyBkMy5zeW1ib2woKS50eXBlKGFyYy5sZWZ0KS5zaXplKHByb3BzLmFubm90YXRpb24uc2l6ZSkoKSA6IGQzLnN5bWJvbCgpLnR5cGUoYXJjLnJpZ2h0KS5zaXplKHByb3BzLmFubm90YXRpb24uc2l6ZSkoKVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIG1hcmtlckcuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiB4U2NhbGUoZC52YWx1ZSkgPj0gd2lkdGggLyA1ID8gYHRyYW5zbGF0ZSgkey1hcmNSYWRpdXMgLSA2fSwgJHstYXJjUmFkaXVzIC0gNn0pYCA6IGB0cmFuc2xhdGUoJHthcmNSYWRpdXMgKyA2fSwgJHstYXJjUmFkaXVzIC0gNn0pYClcbiAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCBkID0+IHhTY2FsZShkLnZhbHVlKSA+PSB3aWR0aCAvIDUgPyAnZW5kJyA6ICdzdGFydCcpXG4gICAgICAgICAgLmFwcGVuZCgndHNwYW4nKVxuICAgICAgICAgIC50ZXh0KGQgPT4gZC50ZXh0ID8gYCR7ZC50ZXh0fWAgOiBgJHtkLmtleX1gKTtcblxuICAgICAgICBoaWdobGlnaHRNYXJrZXJzXG4gICAgICAgICAgLm1lcmdlKGhpZ2hsaWdodE1hcmtlcnMpXG4gICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBgdHJhbnNsYXRlKCR7eFNjYWxlKGQudmFsdWUpfSwgJHt5U2NhbGUoZC5kZW5zaXR5KX0pYCk7XG5cbiAgICAgICAgaGlnaGxpZ2h0TWFya2Vycy5leGl0KCkucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUlVHUExPVFxuICAgIGlmIChwcm9wcy5ydWdQbG90KSB7XG4gICAgICBjb25zdCBydWdzID0gcGxvdC5hcHBlbmRTZWxlY3QoJ2cucnVncGxvdCcpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdydWdwbG90JylcbiAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgIC5kYXRhKGRhdGEpO1xuICAgICAgcnVncy5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYCR7ZC5rZXl9YClcbiAgICAgICAgLmF0dHIoJ2RhdGEtdmFsdWUnLCBkID0+IGAke2QudmFsdWV9YClcbiAgICAgICAgLmF0dHIoJ3gnLCBkID0+IHhTY2FsZShkLnZhbHVlKSlcbiAgICAgICAgLmF0dHIoJ3knLCBwcm9wcy5oZWlnaHQgLSBwcm9wcy5tYXJnaW4uYm90dG9tKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgMjQpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIDIpXG4gICAgICAgIC5tZXJnZShydWdzKVxuICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQudmFsdWUpKVxuICAgICAgICAuYXR0cigneScsIHByb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi5ib3R0b20pXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCAyNClcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgMik7XG5cbiAgICAgIHJ1Z3MuZXhpdCgpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8vIEhJU1RPR1JBTSBDT0RFXG4gICAgaWYgKHByb3BzLmhpc3RvZ3JhbSkge1xuICAgICAgY29uc3QgaGlzdHMgPSBwbG90LmFwcGVuZFNlbGVjdCgnZy5oaXN0b2dyYW0nKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnaGlzdG9ncmFtJylcbiAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgIC5kYXRhKGJpbnMpO1xuXG4gICAgICBoaXN0cy5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGUoZC54MCkgKyAxKVxuICAgICAgICAuYXR0cigneScsIGQgPT4geVNjYWxlKGQubGVuZ3RoIC8gZGF0YS5sZW5ndGgpKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBkID0+IHhTY2FsZShkLngxKSAtIHhTY2FsZShkLngwKSAtIDEpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBkID0+IHlTY2FsZSgwKSAtIHlTY2FsZShkLmxlbmd0aCAvIGRhdGEubGVuZ3RoKSlcbiAgICAgICAgLm1lcmdlKGhpc3RzKVxuICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQueDApICsgMSlcbiAgICAgICAgLmF0dHIoJ3knLCBkID0+IHlTY2FsZShkLmxlbmd0aCAvIGRhdGEubGVuZ3RoKSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgZCA9PiB4U2NhbGUoZC54MSkgLSB4U2NhbGUoZC54MCkgLSAxKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgZCA9PiB5U2NhbGUoMCkgLSB5U2NhbGUoZC5sZW5ndGggLyBkYXRhLmxlbmd0aCkpO1xuXG4gICAgICAgIGhpc3RzLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgLy8gRk9SIEhJR0hMSUdIVElORyBUSEUgQklOIFdJVEggVEhFIERBVEEgUE9JTlRcbiAgICAgIC8vIGNvbnN0IGRhdGFIaWdobGlnaHQgPSBiaW5zLmZpbmQoZWxlbWVudCA9PiB7XG4gICAgICAvLyAgIHJldHVybiBlbGVtZW50LmluY2x1ZGVzKDYuMjk2MDg2MjE2Njc2MTIwNSk7XG4gICAgICAvLyB9KTtcblxuICAgICAgLy8gY29uc29sZS5sb2coKGRhdGFIaWdobGlnaHQpKTtcblxuICAgICAgLy8gY29uc3QgcG9zSGlnaGxpZ2h0ID0gKGQpID0+IHtcbiAgICAgIC8vICAgcmV0dXJuIFtcbiAgICAgIC8vICAgICBbKGQueDApLCAoMCldLFxuICAgICAgLy8gICAgIFsoZC54MCksIGRlbnNpdHlbKGQueDApXVsxXV0sXG4gICAgICAvLyAgICAgWyhkLngxKSwgZGVuc2l0eVsoZC54MSldWzFdXSxcbiAgICAgIC8vICAgICBbKGQueDEpLCAoMCldLFxuICAgICAgLy8gICBdO1xuICAgICAgLy8gfTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHBhdGhIaWdobGlnaHQoZGF0YUhpZ2hsaWdodCkpO1xuICAgICAgLy8gcGxvdC5hcHBlbmRTZWxlY3QoJ3BhdGguYXJlYS1oaWdobGlnaHQnKVxuICAgICAgLy8gICAuYXR0cignY2xhc3MnLCAnYXJlYS1oaWdobGlnaHQnKVxuICAgICAgLy8gICAuZGF0dW0ocGF0aEhpZ2hsaWdodChkYXRhSGlnaGxpZ2h0KSlcbiAgICAgIC8vICAgLmF0dHIoJ2ZpbGwnLCAncmVkJylcbiAgICAgIC8vICAgLnN0eWxlKCdjbGlwLXBhdGgnLCAndXJsKCNjbGlwLXBhdGgpJylcbiAgICAgIC8vICAgLmF0dHIoJ2QnLCBkaXN0cmlidXRpb25BcmVhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb3VudHJ5UmFua2luZ1N0cmlwcztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})