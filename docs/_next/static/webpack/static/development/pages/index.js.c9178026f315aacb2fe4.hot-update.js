webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/throttle */ \"./node_modules/lodash/throttle.js\");\n/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_10__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n // import { num2unitwords } from './utils/utils';\n\n\n\n\nvar CountryRankingStrips = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(CountryRankingStrips, _ChartComponent);\n\n  var _super = _createSuper(CountryRankingStrips);\n\n  function CountryRankingStrips() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, CountryRankingStrips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      locale: 'en',\n      chartTitle: '',\n      dataParams: {\n        key: 'key',\n        value: 'value'\n      },\n      height: 100,\n      margin: {\n        top: 4,\n        right: 8,\n        bottom: 36,\n        left: 8\n      },\n      densityPlot: false,\n      histogram: false,\n      distributionProps: {\n        bandwidth: 1,\n        threshold: 35,\n        // same as bin-width for histogram\n        curveType: 'curveBasis'\n      },\n      annotation: {\n        // for distribution chart\n        size: 500,\n        offset: 6 // orient: 'right', // left or right\n\n      },\n      rugPlot: true,\n      rugProps: {\n        height: 16,\n        rugWidth: 1,\n        rugColor: 'rgba(255, 255, 255, 1)',\n        highlightWidth: 2,\n        highlightColor: '#eec331',\n        activeRugZoom: 10,\n        showTipMarker: false,\n        getTooltipText: function getTooltipText(key) {\n          return key;\n        },\n        textHeight: 16,\n        // tooltipNumberFormatter: (num) => num,\n        customAxisLabels: [],\n        customAxisFormat: false,\n        showSplitAxis: false,\n        splitAxis: {\n          value: 0,\n          colors: ['#74c476', '#ee665b']\n        } // annotation: [\n        //   {\n        //     key: 'ES',\n        //     text: 'Spain',\n        //   },\n        // ],\n\n      } // markDataPoint: [// key should be same as dataParams\n      //   {\n      //     key: 'FR',\n      //     // text: 'India',\n      //   },\n      //   // {\n      //   //   key: 'CA',\n      //   //   // text: 'Yemen',\n      //   // },\n      // ],\n\n    });\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(CountryRankingStrips, [{\n    key: \"draw\",\n    // defaultData = defaultData;\n    value: function draw() {\n      var allData = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].transition().duration(750); // number formatters\n\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default.a(props.locale);\n      var numFormat = locale.format(','); // const num2unitwords = locale.format('.3~s');\n\n      var tooltipNumberFormatter = props.rugProps.tooltipNumberFormatter || numFormat; // ADD CHART TITLE\n\n      if (props.chartTitle) {\n        this.selection().appendSelect('div.chart-title').attr('class', 'font-display chart-title').html(\"<h6>\".concat(props.chartTitle, \"</h6>\"));\n      } // FIX DATA\n      // filter null and NaN, keep 0's\n\n\n      var data = allData.filter(function (d) {\n        return parseFloat(d[props.dataParams.value]) !== 'null' && !isNaN(parseFloat(d[props.dataParams.value]));\n      });\n      var dataValues = data.map(function (d) {\n        return d[props.dataParams.value];\n      });\n      var extent = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues);\n      var min = extent[0];\n      var max = extent[1]; // We normalize data to fit in a range 0 - 100\n\n      var normalize = function normalize(d) {\n        return 100 * (d - min) / (max - min);\n      };\n\n      if (props.histogram || props.densityPlot) {\n        dataValues = dataValues.map(function (d) {\n          return normalize(d);\n        });\n        data = data.map(function (d) {\n          return {\n            key: d[props.dataParams.key],\n            value: normalize(d[props.dataParams.value])\n          };\n        });\n      } // console.log((data));\n      // DEFINE SCALES\n\n\n      var xScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues)).nice().range([props.margin.left, width - props.margin.right]);\n      var thresholds, bins, yScale;\n\n      if (props.histogram || props.densityPlot) {\n        thresholds = xScale.ticks(props.distributionProps.threshold);\n        bins = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].histogram().domain(xScale.domain()).thresholds(thresholds)(dataValues);\n        yScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([0, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].max(bins, function (d) {\n          return d.length;\n        }) / data.length]).range([props.height - props.margin.bottom, props.margin.top]);\n      } // DRAW CHART\n\n\n      var chartSVG = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width).attr('height', props.height).attr('class', 'CountryRankingStrips'); // add chart plot holder\n\n      var plot = chartSVG.appendSelect('g.plot').attr('class', 'plot'); // add DROP-SHADOW filter\n\n      var dropShadow = {\n        stdDeviation: 0.5,\n        dx: 0,\n        dy: 0,\n        slope: 0.5,\n        type: 'linear'\n      };\n      var filter = chartSVG.appendSelect('defs');\n      filter.appendSelect('filter').attr('id', 'rugplotDropShadow').attr('filterUnits', 'userSpaceOnUse');\n      filter.appendSelect('feGaussianBlur').attr('in', 'SourceAlpha').attr('stdDeviation', parseInt(dropShadow.stdDeviation));\n      filter.appendSelect('feOffset').attr('dx', parseInt(dropShadow.dx)).attr('dy', parseInt(dropShadow.dy));\n      var feComponentTransfer = filter.appendSelect('feComponentTransfer');\n      feComponentTransfer.appendSelect('feFuncA').attr('type', dropShadow.type).attr('slope', parseFloat(dropShadow.slope));\n      var feMerge = filter.appendSelect('feMerge');\n      feMerge.appendSelect('feMergeNode');\n      feMerge.appendSelect('feMergeNode').attr('in', 'SourceGraphic');\n      /* --- */\n      // add axis\n\n      if (props.histogram || props.densityPlot) {\n        chartSVG.appendSelect('g.axis-x').attr('class', 'axis axis-x').transition(transition).attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom, \")\")).call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScale) // .tickValues(thresholds)\n        .tickValues(xScale.domain()).tickFormat(numFormat)); // chartSVG.appendSelect('g.axis-y')\n        //   .attr('transform', `translate(${props.margin.left},0)`)\n        //   .call(d3.axisLeft(yScale).ticks(null, '%'))\n        //   .call(g => g.select('.domain').remove());\n      }\n\n      if (props.densityPlot) {\n        var distributionLine = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].line().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y(function (d) {\n          return yScale(d[1]);\n        });\n        var distributionArea = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].area().curve(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"][props.distributionProps.curveType]).x(function (d) {\n          return xScale(d[0]);\n        }).y1(function (d) {\n          return yScale(d[1]);\n        }).y0(function (d) {\n          return yScale(0);\n        }); // DISTRIBUTION MATH\n\n        var kde = function kde(kernel, thresholds, data) {\n          return thresholds.map(function (t) {\n            return [t, _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mean(data, function (d) {\n              return kernel(t - d);\n            })];\n          });\n        };\n\n        var epanechnikov = function epanechnikov(bandwidth) {\n          return function (x) {\n            return Math.abs(x /= bandwidth) <= 1 ? 0.75 * (1 - x * x) / bandwidth : 0;\n          };\n        };\n\n        var density = kde(epanechnikov(props.distributionProps.bandwidth), thresholds, dataValues); // console.log(yScale.domain());\n\n        console.log('density', density);\n        console.log('bins', bins);\n        plot.appendSelect('path.distribution-area').attr('class', 'area distribution-area').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionArea); // console.log('area', d3.polygonArea((density)));\n\n        plot.appendSelect('path.distribution-line').attr('class', 'line distribution-line').datum(density).transition(transition).attr('stroke-linejoin', 'round').attr('d', distributionLine); // HIGHLIGHT DATA PONT\n\n        if (props.markDataPoint) {\n          // set data point\n          var markerData = props.markDataPoint.map(function (element) {\n            var val = element[props.dataParams.value] !== null && !isNaN(element[props.dataParams.value]) ? normalize(element[props.dataParams.value]) : normalize(allData.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value]);\n            var posDist = 0;\n            var posBin = bins.find(function (element, i) {\n              posDist = i;\n              return element.includes(val);\n            });\n            var densityScale = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain([posBin.x0, posBin.x1]).range([density[posDist][1], density[posDist + 1][1]]);\n            return {\n              key: element[props.dataParams.key] || \"value\".concat(val),\n              value: val,\n              text: element.text,\n              densityIndex: posDist,\n              density: densityScale(val),\n              bin: posBin\n            };\n          }); // width of highlight rect\n\n          var highlightWidth = width / data.length; // console.log(markerData);\n          // add distrubution clipping mask\n\n          var svgDefs = chartSVG.appendSelect('defs');\n          svgDefs.appendSelect('clipPath').attr('id', \"\".concat(node.id, \"-clip-path\")).appendSelect('path').transition(transition).attr('d', distributionArea(density)); // add highlight shape\n\n          var highlightGroup = chartSVG.appendSelect('g.highlights').attr('class', 'highlights');\n          var highlights = highlightGroup.selectAll('rect').data(markerData, function (d) {\n            return d.key;\n          });\n          highlights.enter().append('rect').attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.height - props.margin.bottom).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\")).merge(highlights).transition(transition.delay(50).duration(750)).attr('class', function (d) {\n            return \"\".concat(d.key);\n          }).attr('data-value', function (d) {\n            return d.value;\n          }).attr('x', function (d) {\n            return xScale(d.value) - 0.5 * highlightWidth;\n          }).attr('y', props.margin.top).attr('height', props.height - props.margin.top - props.margin.bottom).attr('width', highlightWidth).style('clip-path', \"url(#\".concat(node.id, \"-clip-path)\"));\n          highlights.exit().attr('height', 0).transition(transition).remove(); // add highlight marker for annotation\n\n          var arc = {};\n          arc.right = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(r, -props.annotation.offset, r, Math.PI, -Math.PI / 2, false);\n            }\n          };\n          arc.left = {\n            draw: function draw(context, size) {\n              var r = Math.sqrt(2 * size / Math.PI); // const orgin = (4 * r) / (3 * Math.PI); // the orgin of the circle\n\n              context.arc(-r, -props.annotation.offset, r, 0, -Math.PI / 2, true);\n            }\n          };\n          var pointerSymbol = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc[props.annotation.orient]).size(props.annotation.size);\n          var arcRadius = Math.sqrt(2 * props.annotation.size / Math.PI); // const symBolMarker = props.markDataPoint.map(d => {\n          //   return {\n          //     key: d[props.dataParams.key],\n          //     line: [\n          //       [25, -25], [20, -25], [5, -20], [0, 0],\n          //     ],\n          //   };\n          // });\n          // const pathMarker = d3.line()\n          //   .curve(d3.curveBasis)\n          //   .x(d => (d[0]))\n          //   .y(d => (d[1]));\n\n          var highlightMarkers = highlightGroup.selectAll('g.marker-g').data(markerData, function (d) {\n            return d.key;\n          });\n          var markerG = highlightMarkers.enter().append('g').attr('class', function (d) {\n            return \"marker-g \".concat(d.key);\n          }).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          markerG.append('path').attr('class', function (d) {\n            return \"marker \".concat(d.key);\n          }).attr('fill', 'none').attr('d', function (d) {\n            return props.annotation.orient ? pointerSymbol() : xScale(d.value) >= width / 5 ? _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.left).size(props.annotation.size)() : _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(arc.right).size(props.annotation.size)();\n          });\n          markerG.append('text').attr('transform', function (d) {\n            return xScale(d.value) >= width / 5 ? \"translate(\".concat(-arcRadius - 6, \", \").concat(-arcRadius - 6, \")\") : \"translate(\".concat(arcRadius + 6, \", \").concat(-arcRadius - 6, \")\");\n          }).attr('text-anchor', function (d) {\n            return xScale(d.value) >= width / 5 ? 'end' : 'start';\n          }).append('tspan').text(function (d) {\n            return d.text ? \"\".concat(d.text) : \"\".concat(d.key);\n          });\n          highlightMarkers.merge(highlightMarkers).transition(transition).attr('transform', function (d) {\n            return \"translate(\".concat(xScale(d.value), \", \").concat(yScale(d.density), \")\");\n          });\n          highlightMarkers.exit().remove();\n        }\n      } // RUGPLOT\n\n\n      if (props.rugPlot) {\n        var rugPosition = {\n          y: props.height - props.margin.bottom - 13,\n          height: props.rugProps.height,\n          zoom: (props.rugProps.height + props.rugProps.activeRugZoom * 2) / props.rugProps.height\n        };\n        var xScaleRug; // add rugplot axis\n\n        if (props.histogram || props.densityPlot) {\n          xScaleRug = xScale;\n        } else {\n          xScaleRug = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleLinear().domain(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].extent(dataValues)) // .domain([-d3.extent(dataValues)[1], d3.extent(dataValues)[1]])\n          .range([props.margin.left, width - props.margin.right]);\n          var rugXAxis = chartSVG.appendSelect('g.axis-x').attr('class', 'axis axis-x') // .transition(transition)\n          .attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom, \")\"));\n\n          if (props.rugProps.customAxisLabels) {\n            rugXAxis.call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScaleRug).tickValues(props.rugProps.customAxisLabels.map(function (d) {\n              return d.pos;\n            })).tickFormat(function (d, i) {\n              return props.rugProps.customAxisLabels[i].label;\n            }).tickSize(20));\n          } else {\n            rugXAxis.call(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].axisBottom(xScaleRug).tickValues(xScaleRug.domain()).tickFormat(numFormat).tickSize(20));\n          } // custom label format\n\n\n          if (props.rugProps.customAxisFormat) {\n            this.selection().select('.CountryRankingStrips .axis.axis-x').classed('customAxisFormat', 'true');\n          }\n        } // custom split axis\n\n\n        var splitAxisHeight = 2;\n        var gapBwAxis = 1;\n        var splitAxis = chartSVG.appendSelect('g.split-axis').attr('class', 'split-axis').attr('transform', \"translate(0,\".concat(rugPosition.y + rugPosition.height + splitAxisHeight * 2, \")\"));\n\n        if (props.rugProps.showSplitAxis && props.rugProps.splitAxis) {\n          // splitAxisHeight = 2;\n          // check if split point value is in domain\n          if (props.rugProps.splitAxis.value >= xScaleRug.domain()[1]) {\n            props.rugProps.splitAxis.value = xScaleRug.domain()[1];\n            gapBwAxis = 0; // console.log('G');\n          }\n\n          if (props.rugProps.splitAxis.value <= xScaleRug.domain()[0]) {\n            props.rugProps.splitAxis.value = xScaleRug.domain()[0];\n            gapBwAxis = 0; // console.log('S');\n          } // left\n\n\n          splitAxis.appendSelect('rect.axis-left').attr('class', 'axis-left').style('fill', props.rugProps.splitAxis.colors[0]).style('stroke', props.rugProps.splitAxis.colors[0]).style('stroke-width', 1).attr('x', xScaleRug.range()[0]).attr('y', -2).attr('height', splitAxisHeight).attr('width', xScaleRug(props.rugProps.splitAxis.value) - xScaleRug.range()[0] - gapBwAxis); // right\n\n          splitAxis.appendSelect('rect.axis-right').attr('class', 'axis-right').style('fill', props.rugProps.splitAxis.colors[1]).style('stroke', props.rugProps.splitAxis.colors[1]).style('stroke-width', 1).attr('x', xScaleRug(props.rugProps.splitAxis.value) + gapBwAxis).attr('y', -2).attr('height', splitAxisHeight).attr('width', xScaleRug.range()[1] - xScaleRug(props.rugProps.splitAxis.value)); // add css colors to the axis labels\n\n          chartSVG.select('g.axis').classed('split-axis', true).lower(); // chartSVG.select('g.axis.customAxisFormat g.tick:first-of-type text').style('fill', props.rugProps.splitAxis.colors[0]);\n          // chartSVG.select('g.axis.customAxisFormat g.tick:last-of-type text').style('fill', props.rugProps.splitAxis.colors[1]);\n        } else {\n          splitAxis.remove();\n          chartSVG.select('g.axis').classed('split-axis', false);\n        }\n\n        var rugPlot = plot.appendSelect('g.rugplot').attr('class', 'rugplot');\n        var rugs = rugPlot.selectAll('rect').data(data, function (d) {\n          return d.key;\n        });\n        rugs.enter().append('rect').attr('class', function (d) {\n          return \"\".concat(d[props.dataParams.key]);\n        }).attr('data-value', function (d) {\n          return \"\".concat(d[props.dataParams.value]);\n        }).style('fill', props.rugProps.rugColor) // .style('fill', d => d[props.dataParams.value] < 0 ? '#ee665b' : '#74c476')\n        .attr('x', function (d) {\n          return xScaleRug(d[props.dataParams.value]) - props.rugProps.rugWidth / 2;\n        }).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', props.rugProps.rugWidth).attr('transform-origin', function (d) {\n          return \"\".concat(xScaleRug(d[props.dataParams.value]) - props.rugProps.rugWidth / 2, \" \").concat(rugPosition.y + rugPosition.height / 2);\n        }) // .style('transition', null)\n        .merge(rugs) // .style('transition', null)\n        .transition(transition).attr('data-value', function (d) {\n          return \"\".concat(d[props.dataParams.value]);\n        }).attr('x', function (d) {\n          return xScaleRug(d[props.dataParams.value]) - props.rugProps.rugWidth / 2;\n        }).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', props.rugProps.rugWidth).attr('transform-origin', function (d) {\n          return \"\".concat(xScaleRug(d[props.dataParams.value]) - props.rugProps.rugWidth / 2, \" \").concat(rugPosition.y + rugPosition.height / 2);\n        });\n        rugs.exit().remove();\n        plot.raise(); // add highlight\n\n        if (props.rugProps.annotation && !(props.histogram || props.densityPlot)) {\n          var _markerData = props.rugProps.annotation.map(function (element) {\n            // console.log(element);\n            var val = element[props.dataParams.value] !== null && !isNaN(element[props.dataParams.value]) ? element[props.dataParams.value] : data.find(function (e) {\n              return e[props.dataParams.key] === element[props.dataParams.key];\n            })[props.dataParams.value];\n            return {\n              key: element[props.dataParams.key] || \"value\".concat(val),\n              value: val,\n              text: element.text || props.rugProps.getTooltipText(element[props.dataParams.key]) // text: element.text || element[props.dataParams.key],\n\n            };\n          });\n\n          var tooltipData = data.map(function (element) {\n            return {\n              key: element[props.dataParams.key],\n              value: element[props.dataParams.value],\n              text: props.rugProps.getTooltipText(element[props.dataParams.key])\n            };\n          }); // console.log(markerData);\n\n          var _annoPos = function _annoPos(text, val) {\n            var textPos = 0;\n            var textAnchor = 'middle';\n            var textLen = text.length * 3;\n\n            if (textLen) {\n              if (xScaleRug(val) + textLen >= xScaleRug.range()[1]) {\n                textPos = 6;\n                textAnchor = 'end';\n              }\n\n              if (xScaleRug(val) - textLen <= xScaleRug.range()[0]) {\n                textPos = -6;\n                textAnchor = 'start';\n              }\n            }\n\n            return {\n              xPos: textPos,\n              xAnchor: textAnchor\n            };\n          };\n\n          var markerPos = Math.sqrt(2 * (rugPosition.height * 3) / Math.PI) + props.rugProps.activeRugZoom * 2;\n          var markerSymbol = _utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbol().type(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].symbolTriangle).size(rugPosition.height * 3);\n          var markerRadius = props.rugProps.showTipMarker ? Math.sqrt(2 * (rugPosition.height * 3) / Math.PI) : 0;\n\n          var _highlightGroup = chartSVG.appendSelect('g.highlights').attr('class', 'highlights');\n\n          var rugBgBar = _highlightGroup.appendSelect('rect.highlight-bar').attr('class', 'highlight-bar') // .style('opacity', 0.55)\n          .attr('x', xScaleRug.range()[0]).attr('y', rugPosition.y).attr('height', rugPosition.height).attr('width', xScaleRug.range()[1] - xScaleRug.range()[0]);\n\n          var rugTouchArea = chartSVG.appendSelect('rect.touch-area').attr('class', 'touch-area').style('fill', 'transparent').style('stroke', 'none').attr('x', xScaleRug.range()[0]).attr('y', 0).attr('height', props.height).attr('width', xScaleRug.range()[1] - xScaleRug.range()[0]).raise();\n\n          var _drawTooltips = function _drawTooltips(data, classList) {\n            if (props.rugProps.showTipMarker) {\n              var marker = _highlightGroup.selectAll('path.marker-rug').data(data, function (d) {\n                return d.key;\n              });\n\n              marker.enter().append('path').attr('class', function (d) {\n                return _markerData.find(function (m) {\n                  return m.key === d.key;\n                }) ? \"marker-rug \".concat(d.key, \" \").concat(classList, \" highlighted\") : \"marker-rug \".concat(d.key, \" \").concat(classList);\n              }).attr('fill', 'none').attr('d', markerSymbol).attr('transform', function (d) {\n                return \"translate(\".concat(xScaleRug(d.value), \", \").concat(rugPosition.y - markerPos, \") rotate(180)\");\n              }).merge(marker).interrupt().transition(transition).attr('transform', function (d) {\n                return \"translate(\".concat(xScaleRug(d.value), \", \").concat(rugPosition.y - markerPos, \") rotate(180)\");\n              });\n              marker.exit().remove();\n            }\n\n            var markerText = _highlightGroup.selectAll('text.marker-text').data(data, function (d) {\n              return d.key;\n            });\n\n            markerText.enter().append('text').attr('transform', function (d) {\n              return \"translate(\".concat(xScaleRug(d.value) + _annoPos(d.text, d.value).xPos, \", \").concat(rugPosition.y - 3 * markerRadius - props.rugProps.activeRugZoom * 2 - props.rugProps.textHeight * 1.414, \")\");\n            }).attr('class', function (d) {\n              return _markerData.find(function (m) {\n                return m.key === d.key;\n              }) ? \"marker-text \".concat(d.key, \" \").concat(classList, \" highlighted\") : \"marker-text \".concat(d.key, \" \").concat(classList);\n            }).text(function (d) {\n              return \"\".concat(d.text);\n            }).attr('text-anchor', function (d) {\n              return _annoPos(d.text, d.value).xAnchor;\n            }).merge(markerText).interrupt().transition(transition).attr('transform', function (d) {\n              return \"translate(\".concat(xScaleRug(d.value) + _annoPos(d.text, d.value).xPos, \", \").concat(rugPosition.y - 3 * markerRadius - props.rugProps.activeRugZoom * 2 - props.rugProps.textHeight * 1.414, \")\");\n            }).text(function (d) {\n              return \"\".concat(d.text);\n            }).attr('text-anchor', function (d) {\n              return _annoPos(d.text, d.value).xAnchor;\n            });\n            markerText.exit().remove(); // display values at point\n\n            var markerTextValues = _highlightGroup.selectAll('text.marker-textvalue').data(data, function (d) {\n              return d.key;\n            });\n\n            markerTextValues.enter().append('text') // .attr('transform', d => `translate(${xScaleRug(d.value) + _annoPos(d.text, d.value).xPos}, ${props.height - props.margin.bottom + 12 + splitAxisHeight})`)\n            .attr('transform', function (d) {\n              return \"translate(\".concat(xScaleRug(d.value) + _annoPos(d.text, d.value).xPos, \", \").concat(rugPosition.y - 3 * markerRadius - props.rugProps.activeRugZoom * 2 - props.rugProps.textHeight / 4, \")\");\n            }).attr('class', function (d) {\n              return \"marker-textvalue \".concat(d.key, \" \").concat(classList);\n            }).text(function (d) {\n              return \"\".concat(tooltipNumberFormatter(d.value));\n            }).attr('text-anchor', function (d) {\n              return _annoPos(d.text, d.value).xAnchor;\n            }).merge(markerTextValues).interrupt().transition(transition).attr('transform', function (d) {\n              return \"translate(\".concat(xScaleRug(d.value) + _annoPos(d.text, d.value).xPos, \", \").concat(rugPosition.y - 3 * markerRadius - props.rugProps.activeRugZoom * 2 - props.rugProps.textHeight / 4, \")\");\n            }) // .attr('transform', d => `translate(${xScaleRug(d.value) + _annoPos(d.text, d.value).xPos}, ${props.height - props.margin.bottom + 12 + splitAxisHeight})`)\n            .text(function (d) {\n              return \"\".concat(tooltipNumberFormatter(d.value));\n            }).attr('text-anchor', function (d) {\n              return _annoPos(d.text, d.value).xAnchor;\n            });\n            markerTextValues.exit().remove(); // de-active old rugs\n\n            rugPlot.selectAll('rect').classed(classList, false) // .style('transition', 'all 0.2s')\n            .style('fill', function (element) {\n              return _markerData.find(function (d) {\n                return d.key === element.key;\n              }) ? props.rugProps.highlightColor : props.rugProps.rugColor;\n            }).transition().ease(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].easeSin).style('transform', function (element) {\n              return _markerData.find(function (d) {\n                return d.key === element.key;\n              }) ? \"scaleX(\".concat(rugPosition.zoom, \") scaleY(1)\") : 'scaleX(1) scaleY(1)';\n            }); // active rug for tooltip\n\n            data.forEach(function (element) {\n              rugPlot.select(\"rect.\".concat(element.key)).classed(classList, true).style('fill', _markerData.find(function (d) {\n                return d.key === element.key;\n              }) ? props.rugProps.highlightColor : props.rugProps.rugColor).transition().ease(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].easeSin).style('transform', \"scaleX(\".concat(rugPosition.zoom, \") scaleY(\").concat(rugPosition.zoom, \")\"));\n              rugPlot.select(\"rect.\".concat(element.key)).raise();\n            });\n          }; // TOOLTIP AND HIGHLIGHTS\n\n\n          var _setDefaultTooltip = function _setDefaultTooltip() {\n            // draw highlight label\n            _drawTooltips(_markerData, 'active highlighted');\n          };\n\n          var _getActiveTooltip = function _getActiveTooltip(pos) {\n            var mouseVal = xScaleRug.invert(pos); // const lookup = tooltipData.filter(d => markerData.find(e => e.key !== d.key));\n\n            return tooltipData.reduce(function (prev, curr) {\n              return Math.abs(curr.value - mouseVal) < Math.abs(prev.value - mouseVal) ? curr : prev;\n            });\n          };\n\n          var _setActiveTooltip = function _setActiveTooltip(el) {\n            // draw hover label\n            _drawTooltips(el instanceof Array ? el : [el], 'active');\n          }; // highlight the rugs\n\n\n          _setDefaultTooltip();\n\n          rugTouchArea.on('mouseover mousemove touchenter touchstart touchmove', lodash_throttle__WEBPACK_IMPORTED_MODULE_10___default()(function () {\n            if (!_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].event) return;\n\n            _setActiveTooltip(_getActiveTooltip(_utils_d3__WEBPACK_IMPORTED_MODULE_8__[\"default\"].mouse(chartSVG.node())[0])); // if split axis active then reposition it to accomodate the zoomed rugs\n            // splitAxis\n            //   .interrupt()\n            //   .transition(transition)\n            //   .attr('transform', `translate(0,${props.height - props.margin.bottom + 3 + props.rugProps.activeRugZoom / 2})`);\n\n          }, 50));\n          rugTouchArea.on('mouseout touchleave touchcancel', function () {\n            _setDefaultTooltip(); // if split axis active then reposition it to accomodate the zoomed rugs\n            // splitAxis\n            //   .interrupt()\n            //   .transition(transition)\n            //   .attr('transform', `translate(0,${props.height - props.margin.bottom})`);\n\n          });\n        }\n      } // HISTOGRAM CODE\n\n\n      if (props.histogram) {\n        var hists = plot.appendSelect('g.histogram').attr('class', 'histogram').selectAll('rect').data(bins);\n        hists.enter().append('rect').attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        }).merge(hists).transition(transition).attr('x', function (d) {\n          return xScale(d.x0) + 1;\n        }).attr('y', function (d) {\n          return yScale(d.length / data.length);\n        }).attr('width', function (d) {\n          return xScale(d.x1) - xScale(d.x0) - 1;\n        }).attr('height', function (d) {\n          return yScale(0) - yScale(d.length / data.length);\n        });\n        hists.exit().remove(); // FOR HIGHLIGHTING THE BIN WITH THE DATA POINT\n        // const dataHighlight = bins.find(element => {\n        //   return element.includes(6.2960862166761205);\n        // });\n        // console.log((dataHighlight));\n        // const posHighlight = (d) => {\n        //   return [\n        //     [(d.x0), (0)],\n        //     [(d.x0), density[(d.x0)][1]],\n        //     [(d.x1), density[(d.x1)][1]],\n        //     [(d.x1), (0)],\n        //   ];\n        // };\n        // console.log(pathHighlight(dataHighlight));\n        // plot.appendSelect('path.area-highlight')\n        //   .attr('class', 'area-highlight')\n        //   .datum(pathHighlight(dataHighlight))\n        //   .attr('fill', 'red')\n        //   .style('clip-path', 'url(#clip-path)')\n        //   .attr('d', distributionArea);\n      }\n\n      return this;\n    }\n  }]);\n\n  return CountryRankingStrips;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CountryRankingStrips);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NoYXJ0LmpzPzdiYjgiXSwibmFtZXMiOlsiQ291bnRyeVJhbmtpbmdTdHJpcHMiLCJsb2NhbGUiLCJjaGFydFRpdGxlIiwiZGF0YVBhcmFtcyIsImtleSIsInZhbHVlIiwiaGVpZ2h0IiwibWFyZ2luIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiZGVuc2l0eVBsb3QiLCJoaXN0b2dyYW0iLCJkaXN0cmlidXRpb25Qcm9wcyIsImJhbmR3aWR0aCIsInRocmVzaG9sZCIsImN1cnZlVHlwZSIsImFubm90YXRpb24iLCJzaXplIiwib2Zmc2V0IiwicnVnUGxvdCIsInJ1Z1Byb3BzIiwicnVnV2lkdGgiLCJydWdDb2xvciIsImhpZ2hsaWdodFdpZHRoIiwiaGlnaGxpZ2h0Q29sb3IiLCJhY3RpdmVSdWdab29tIiwic2hvd1RpcE1hcmtlciIsImdldFRvb2x0aXBUZXh0IiwidGV4dEhlaWdodCIsImN1c3RvbUF4aXNMYWJlbHMiLCJjdXN0b21BeGlzRm9ybWF0Iiwic2hvd1NwbGl0QXhpcyIsInNwbGl0QXhpcyIsImNvbG9ycyIsImFsbERhdGEiLCJkYXRhIiwicHJvcHMiLCJub2RlIiwic2VsZWN0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJ0cmFuc2l0aW9uIiwiZDMiLCJkdXJhdGlvbiIsIkQzTG9jYWxlIiwibnVtRm9ybWF0IiwiZm9ybWF0IiwidG9vbHRpcE51bWJlckZvcm1hdHRlciIsImFwcGVuZFNlbGVjdCIsImF0dHIiLCJodG1sIiwiZmlsdGVyIiwiZCIsInBhcnNlRmxvYXQiLCJpc05hTiIsImRhdGFWYWx1ZXMiLCJtYXAiLCJleHRlbnQiLCJtaW4iLCJtYXgiLCJub3JtYWxpemUiLCJ4U2NhbGUiLCJzY2FsZUxpbmVhciIsImRvbWFpbiIsIm5pY2UiLCJyYW5nZSIsInRocmVzaG9sZHMiLCJiaW5zIiwieVNjYWxlIiwidGlja3MiLCJsZW5ndGgiLCJjaGFydFNWRyIsInBsb3QiLCJkcm9wU2hhZG93Iiwic3RkRGV2aWF0aW9uIiwiZHgiLCJkeSIsInNsb3BlIiwidHlwZSIsInBhcnNlSW50IiwiZmVDb21wb25lbnRUcmFuc2ZlciIsImZlTWVyZ2UiLCJjYWxsIiwiYXhpc0JvdHRvbSIsInRpY2tWYWx1ZXMiLCJ0aWNrRm9ybWF0IiwiZGlzdHJpYnV0aW9uTGluZSIsImxpbmUiLCJjdXJ2ZSIsIngiLCJ5IiwiZGlzdHJpYnV0aW9uQXJlYSIsImFyZWEiLCJ5MSIsInkwIiwia2RlIiwia2VybmVsIiwidCIsIm1lYW4iLCJlcGFuZWNobmlrb3YiLCJNYXRoIiwiYWJzIiwiZGVuc2l0eSIsImNvbnNvbGUiLCJsb2ciLCJkYXR1bSIsIm1hcmtEYXRhUG9pbnQiLCJtYXJrZXJEYXRhIiwiZWxlbWVudCIsInZhbCIsImZpbmQiLCJlIiwicG9zRGlzdCIsInBvc0JpbiIsImkiLCJpbmNsdWRlcyIsImRlbnNpdHlTY2FsZSIsIngwIiwieDEiLCJ0ZXh0IiwiZGVuc2l0eUluZGV4IiwiYmluIiwic3ZnRGVmcyIsImlkIiwiaGlnaGxpZ2h0R3JvdXAiLCJoaWdobGlnaHRzIiwic2VsZWN0QWxsIiwiZW50ZXIiLCJhcHBlbmQiLCJzdHlsZSIsIm1lcmdlIiwiZGVsYXkiLCJleGl0IiwicmVtb3ZlIiwiYXJjIiwiZHJhdyIsImNvbnRleHQiLCJyIiwic3FydCIsIlBJIiwicG9pbnRlclN5bWJvbCIsInN5bWJvbCIsIm9yaWVudCIsImFyY1JhZGl1cyIsImhpZ2hsaWdodE1hcmtlcnMiLCJtYXJrZXJHIiwicnVnUG9zaXRpb24iLCJ6b29tIiwieFNjYWxlUnVnIiwicnVnWEF4aXMiLCJwb3MiLCJsYWJlbCIsInRpY2tTaXplIiwic2VsZWN0IiwiY2xhc3NlZCIsInNwbGl0QXhpc0hlaWdodCIsImdhcEJ3QXhpcyIsImxvd2VyIiwicnVncyIsInJhaXNlIiwidG9vbHRpcERhdGEiLCJfYW5ub1BvcyIsInRleHRQb3MiLCJ0ZXh0QW5jaG9yIiwidGV4dExlbiIsInhQb3MiLCJ4QW5jaG9yIiwibWFya2VyUG9zIiwibWFya2VyU3ltYm9sIiwic3ltYm9sVHJpYW5nbGUiLCJtYXJrZXJSYWRpdXMiLCJydWdCZ0JhciIsInJ1Z1RvdWNoQXJlYSIsIl9kcmF3VG9vbHRpcHMiLCJjbGFzc0xpc3QiLCJtYXJrZXIiLCJtIiwiaW50ZXJydXB0IiwibWFya2VyVGV4dCIsIm1hcmtlclRleHRWYWx1ZXMiLCJlYXNlIiwiZWFzZVNpbiIsImZvckVhY2giLCJfc2V0RGVmYXVsdFRvb2x0aXAiLCJfZ2V0QWN0aXZlVG9vbHRpcCIsIm1vdXNlVmFsIiwiaW52ZXJ0IiwicmVkdWNlIiwicHJldiIsImN1cnIiLCJfc2V0QWN0aXZlVG9vbHRpcCIsImVsIiwiQXJyYXkiLCJvbiIsInRocm90dGxlIiwiZXZlbnQiLCJtb3VzZSIsImhpc3RzIiwiQ2hhcnRDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Q0FFQTs7QUFFQTtBQUNBOztJQUVNQSxvQjs7Ozs7Ozs7Ozs7Ozs7Ozt1TkFDVztBQUNiQyxZQUFNLEVBQUUsSUFESztBQUViQyxnQkFBVSxFQUFFLEVBRkM7QUFHYkMsZ0JBQVUsRUFBRTtBQUNWQyxXQUFHLEVBQUUsS0FESztBQUVWQyxhQUFLLEVBQUU7QUFGRyxPQUhDO0FBT2JDLFlBQU0sRUFBRSxHQVBLO0FBUWJDLFlBQU0sRUFBRTtBQUNOQyxXQUFHLEVBQUUsQ0FEQztBQUVOQyxhQUFLLEVBQUUsQ0FGRDtBQUdOQyxjQUFNLEVBQUUsRUFIRjtBQUlOQyxZQUFJLEVBQUU7QUFKQSxPQVJLO0FBY2JDLGlCQUFXLEVBQUUsS0FkQTtBQWViQyxlQUFTLEVBQUUsS0FmRTtBQWdCYkMsdUJBQWlCLEVBQUU7QUFDakJDLGlCQUFTLEVBQUUsQ0FETTtBQUVqQkMsaUJBQVMsRUFBRSxFQUZNO0FBRUY7QUFDZkMsaUJBQVMsRUFBRTtBQUhNLE9BaEJOO0FBcUJiQyxnQkFBVSxFQUFFO0FBQUU7QUFDWkMsWUFBSSxFQUFFLEdBREk7QUFFVkMsY0FBTSxFQUFFLENBRkUs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LEtBTEgsQ0FLU21FLEtBTFQsRUFNRzVKLFVBTkgsQ0FNY0EsVUFOZCxFQU9HUSxJQVBILENBT1EsR0FQUixFQU9hLFVBQUFHLENBQUM7QUFBQSxpQkFBSVMsTUFBTSxDQUFDVCxDQUFDLENBQUNpRSxFQUFILENBQU4sR0FBZSxDQUFuQjtBQUFBLFNBUGQsRUFRR3BFLElBUkgsQ0FRUSxHQVJSLEVBUWEsVUFBQUcsQ0FBQztBQUFBLGlCQUFJZ0IsTUFBTSxDQUFDaEIsQ0FBQyxDQUFDa0IsTUFBRixHQUFXbkMsSUFBSSxDQUFDbUMsTUFBakIsQ0FBVjtBQUFBLFNBUmQsRUFTR3JCLElBVEgsQ0FTUSxPQVRSLEVBU2lCLFVBQUFHLENBQUM7QUFBQSxpQkFBSVMsTUFBTSxDQUFDVCxDQUFDLENBQUNrRSxFQUFILENBQU4sR0FBZXpELE1BQU0sQ0FBQ1QsQ0FBQyxDQUFDaUUsRUFBSCxDQUFyQixHQUE4QixDQUFsQztBQUFBLFNBVGxCLEVBVUdwRSxJQVZILENBVVEsUUFWUixFQVVrQixVQUFBRyxDQUFDO0FBQUEsaUJBQUlnQixNQUFNLENBQUMsQ0FBRCxDQUFOLEdBQVlBLE1BQU0sQ0FBQ2hCLENBQUMsQ0FBQ2tCLE1BQUYsR0FBV25DLElBQUksQ0FBQ21DLE1BQWpCLENBQXRCO0FBQUEsU0FWbkI7QUFZQStILGFBQUssQ0FBQ2pFLElBQU4sR0FBYUMsTUFBYixHQWxCbUIsQ0FvQm5CO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRDs7QUFFRCxhQUFPLElBQVA7QUFDRDs7OztFQXJ0QmdDaUUsNEQ7O0FBd3RCcEJ4TSxtRkFBZiIsImZpbGUiOiIuL3NyYy9saWIvY2hhcnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9iYXNlL0NoYXJ0Q29tcG9uZW50JztcbmltcG9ydCBkMyBmcm9tICcuL3V0aWxzL2QzJztcbi8vIGltcG9ydCB7IG51bTJ1bml0d29yZHMgfSBmcm9tICcuL3V0aWxzL3V0aWxzJztcblxuaW1wb3J0IEQzTG9jYWxlIGZyb20gJ0ByZXV0ZXJzLWdyYXBoaWNzL2QzLWxvY2FsZSc7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSAnbG9kYXNoL3Rocm90dGxlJztcblxuY2xhc3MgQ291bnRyeVJhbmtpbmdTdHJpcHMgZXh0ZW5kcyBDaGFydENvbXBvbmVudCB7XG4gIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2NhbGU6ICdlbicsXG4gICAgY2hhcnRUaXRsZTogJycsXG4gICAgZGF0YVBhcmFtczoge1xuICAgICAga2V5OiAna2V5JyxcbiAgICAgIHZhbHVlOiAndmFsdWUnLFxuICAgIH0sXG4gICAgaGVpZ2h0OiAxMDAsXG4gICAgbWFyZ2luOiB7XG4gICAgICB0b3A6IDQsXG4gICAgICByaWdodDogOCxcbiAgICAgIGJvdHRvbTogMzYsXG4gICAgICBsZWZ0OiA4LFxuICAgIH0sXG4gICAgZGVuc2l0eVBsb3Q6IGZhbHNlLFxuICAgIGhpc3RvZ3JhbTogZmFsc2UsXG4gICAgZGlzdHJpYnV0aW9uUHJvcHM6IHtcbiAgICAgIGJhbmR3aWR0aDogMSxcbiAgICAgIHRocmVzaG9sZDogMzUsIC8vIHNhbWUgYXMgYmluLXdpZHRoIGZvciBoaXN0b2dyYW1cbiAgICAgIGN1cnZlVHlwZTogJ2N1cnZlQmFzaXMnLFxuICAgIH0sXG4gICAgYW5ub3RhdGlvbjogeyAvLyBmb3IgZGlzdHJpYnV0aW9uIGNoYXJ0XG4gICAgICBzaXplOiA1MDAsXG4gICAgICBvZmZzZXQ6IDYsXG4gICAgICAvLyBvcmllbnQ6ICdyaWdodCcsIC8vIGxlZnQgb3IgcmlnaHRcbiAgICB9LFxuICAgIHJ1Z1Bsb3Q6IHRydWUsXG4gICAgcnVnUHJvcHM6IHtcbiAgICAgIGhlaWdodDogMTYsXG4gICAgICBydWdXaWR0aDogMSxcbiAgICAgIHJ1Z0NvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKScsXG4gICAgICBoaWdobGlnaHRXaWR0aDogMixcbiAgICAgIGhpZ2hsaWdodENvbG9yOiAnI2VlYzMzMScsXG4gICAgICBhY3RpdmVSdWdab29tOiAxMCxcbiAgICAgIHNob3dUaXBNYXJrZXI6IGZhbHNlLFxuICAgICAgZ2V0VG9vbHRpcFRleHQ6IChrZXkpID0+IGtleSxcbiAgICAgIHRleHRIZWlnaHQ6IDE2LFxuICAgICAgLy8gdG9vbHRpcE51bWJlckZvcm1hdHRlcjogKG51bSkgPT4gbnVtLFxuICAgICAgY3VzdG9tQXhpc0xhYmVsczogW10sXG4gICAgICBjdXN0b21BeGlzRm9ybWF0OiBmYWxzZSxcbiAgICAgIHNob3dTcGxpdEF4aXM6IGZhbHNlLFxuICAgICAgc3BsaXRBeGlzOiB7XG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgICBjb2xvcnM6IFsnIzc0YzQ3NicsICcjZWU2NjViJ10sXG4gICAgICB9LFxuICAgICAgLy8gYW5ub3RhdGlvbjogW1xuICAgICAgLy8gICB7XG4gICAgICAvLyAgICAga2V5OiAnRVMnLFxuICAgICAgLy8gICAgIHRleHQ6ICdTcGFpbicsXG4gICAgICAvLyAgIH0sXG4gICAgICAvLyBdLFxuICAgIH0sXG4gICAgLy8gbWFya0RhdGFQb2ludDogWy8vIGtleSBzaG91bGQgYmUgc2FtZSBhcyBkYXRhUGFyYW1zXG4gICAgLy8gICB7XG4gICAgLy8gICAgIGtleTogJ0ZSJyxcbiAgICAvLyAgICAgLy8gdGV4dDogJ0luZGlhJyxcbiAgICAvLyAgIH0sXG4gICAgLy8gICAvLyB7XG4gICAgLy8gICAvLyAgIGtleTogJ0NBJyxcbiAgICAvLyAgIC8vICAgLy8gdGV4dDogJ1llbWVuJyxcbiAgICAvLyAgIC8vIH0sXG4gICAgLy8gXSxcbiAgfTtcblxuICAvLyBkZWZhdWx0RGF0YSA9IGRlZmF1bHREYXRhO1xuXG4gIGRyYXcoKSB7XG4gICAgY29uc3QgYWxsRGF0YSA9IHRoaXMuZGF0YSgpO1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wcygpO1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnNlbGVjdGlvbigpLm5vZGUoKTtcblxuICAgIGNvbnN0IHsgd2lkdGggfSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uID0gZDMudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oNzUwKTtcblxuICAgIC8vIG51bWJlciBmb3JtYXR0ZXJzXG4gICAgY29uc3QgbG9jYWxlID0gbmV3IEQzTG9jYWxlKHByb3BzLmxvY2FsZSk7XG4gICAgY29uc3QgbnVtRm9ybWF0ID0gbG9jYWxlLmZvcm1hdCgnLCcpO1xuICAgIC8vIGNvbnN0IG51bTJ1bml0d29yZHMgPSBsb2NhbGUuZm9ybWF0KCcuM35zJyk7XG4gICAgY29uc3QgdG9vbHRpcE51bWJlckZvcm1hdHRlciA9IHByb3BzLnJ1Z1Byb3BzLnRvb2x0aXBOdW1iZXJGb3JtYXR0ZXIgfHwgbnVtRm9ybWF0O1xuXG4gICAgLy8gQUREIENIQVJUIFRJVExFXG4gICAgaWYgKHByb3BzLmNoYXJ0VGl0bGUpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uKClcbiAgICAgICAgLmFwcGVuZFNlbGVjdCgnZGl2LmNoYXJ0LXRpdGxlJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2ZvbnQtZGlzcGxheSBjaGFydC10aXRsZScpXG4gICAgICAgIC5odG1sKGA8aDY+JHtwcm9wcy5jaGFydFRpdGxlfTwvaDY+YCk7XG4gICAgfVxuXG4gICAgLy8gRklYIERBVEFcbiAgICAvLyBmaWx0ZXIgbnVsbCBhbmQgTmFOLCBrZWVwIDAnc1xuICAgIGxldCBkYXRhID0gYWxsRGF0YS5maWx0ZXIoZCA9PiBwYXJzZUZsb2F0KGRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0pICE9PSAnbnVsbCcgJiYgIWlzTmFOKHBhcnNlRmxvYXQoZFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSkpKTtcblxuICAgIGxldCBkYXRhVmFsdWVzID0gZGF0YS5tYXAoZCA9PiBkW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKTtcblxuICAgIGNvbnN0IGV4dGVudCA9IGQzLmV4dGVudChkYXRhVmFsdWVzKTtcbiAgICBjb25zdCBtaW4gPSBleHRlbnRbMF07XG4gICAgY29uc3QgbWF4ID0gZXh0ZW50WzFdO1xuXG4gICAgLy8gV2Ugbm9ybWFsaXplIGRhdGEgdG8gZml0IGluIGEgcmFuZ2UgMCAtIDEwMFxuICAgIGNvbnN0IG5vcm1hbGl6ZSA9IGQgPT4gMTAwICogKGQgLSBtaW4pIC8gKG1heCAtIG1pbik7XG5cbiAgICBpZiAocHJvcHMuaGlzdG9ncmFtIHx8IHByb3BzLmRlbnNpdHlQbG90KSB7XG4gICAgICBkYXRhVmFsdWVzID0gZGF0YVZhbHVlcy5tYXAoZCA9PiBub3JtYWxpemUoZCkpO1xuICAgICAgZGF0YSA9IGRhdGEubWFwKGQgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleTogZFtwcm9wcy5kYXRhUGFyYW1zLmtleV0sXG4gICAgICAgICAgdmFsdWU6IG5vcm1hbGl6ZShkW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygoZGF0YSkpO1xuXG4gICAgLy8gREVGSU5FIFNDQUxFU1xuICAgIGNvbnN0IHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oZDMuZXh0ZW50KGRhdGFWYWx1ZXMpKS5uaWNlKClcbiAgICAgIC5yYW5nZShbcHJvcHMubWFyZ2luLmxlZnQsIHdpZHRoIC0gcHJvcHMubWFyZ2luLnJpZ2h0XSk7XG5cbiAgICBsZXQgdGhyZXNob2xkcywgYmlucywgeVNjYWxlO1xuICAgIGlmIChwcm9wcy5oaXN0b2dyYW0gfHwgcHJvcHMuZGVuc2l0eVBsb3QpIHtcbiAgICAgIHRocmVzaG9sZHMgPSB4U2NhbGUudGlja3MocHJvcHMuZGlzdHJpYnV0aW9uUHJvcHMudGhyZXNob2xkKTtcbiAgICAgIGJpbnMgPSBkMy5oaXN0b2dyYW0oKVxuICAgICAgICAuZG9tYWluKHhTY2FsZS5kb21haW4oKSlcbiAgICAgICAgLnRocmVzaG9sZHModGhyZXNob2xkcykoZGF0YVZhbHVlcyk7XG5cbiAgICAgIHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgLmRvbWFpbihbMCwgZDMubWF4KGJpbnMsIGQgPT4gZC5sZW5ndGgpIC8gZGF0YS5sZW5ndGhdKVxuICAgICAgICAucmFuZ2UoW3Byb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi5ib3R0b20sIHByb3BzLm1hcmdpbi50b3BdKTtcbiAgICB9XG4gICAgLy8gRFJBVyBDSEFSVFxuICAgIGNvbnN0IGNoYXJ0U1ZHID0gdGhpcy5zZWxlY3Rpb24oKVxuICAgICAgLmFwcGVuZFNlbGVjdCgnc3ZnJykgLy8gc2VlIGRvY3MgaW4gLi91dGlscy9kMy5qc1xuICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAuYXR0cignaGVpZ2h0JywgcHJvcHMuaGVpZ2h0KVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ0NvdW50cnlSYW5raW5nU3RyaXBzJyk7XG5cbiAgICAvLyBhZGQgY2hhcnQgcGxvdCBob2xkZXJcbiAgICBjb25zdCBwbG90ID0gY2hhcnRTVkcuYXBwZW5kU2VsZWN0KCdnLnBsb3QnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3Bsb3QnKTtcblxuICAgIC8vIGFkZCBEUk9QLVNIQURPVyBmaWx0ZXJcbiAgICBjb25zdCBkcm9wU2hhZG93ID0ge1xuICAgICAgc3RkRGV2aWF0aW9uOiAwLjUsXG4gICAgICBkeDogMCxcbiAgICAgIGR5OiAwLFxuICAgICAgc2xvcGU6IDAuNSxcbiAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIH07XG4gICAgY29uc3QgZmlsdGVyID0gY2hhcnRTVkcuYXBwZW5kU2VsZWN0KCdkZWZzJyk7XG5cbiAgICBmaWx0ZXIuYXBwZW5kU2VsZWN0KCdmaWx0ZXInKVxuICAgICAgLmF0dHIoJ2lkJywgJ3J1Z3Bsb3REcm9wU2hhZG93JylcbiAgICAgIC5hdHRyKCdmaWx0ZXJVbml0cycsICd1c2VyU3BhY2VPblVzZScpO1xuXG4gICAgZmlsdGVyLmFwcGVuZFNlbGVjdCgnZmVHYXVzc2lhbkJsdXInKVxuICAgICAgLmF0dHIoJ2luJywgJ1NvdXJjZUFscGhhJylcbiAgICAgIC5hdHRyKCdzdGREZXZpYXRpb24nLCBwYXJzZUludChkcm9wU2hhZG93LnN0ZERldmlhdGlvbikpO1xuXG4gICAgZmlsdGVyLmFwcGVuZFNlbGVjdCgnZmVPZmZzZXQnKVxuICAgICAgLmF0dHIoJ2R4JywgcGFyc2VJbnQoZHJvcFNoYWRvdy5keCkpXG4gICAgICAuYXR0cignZHknLCBwYXJzZUludChkcm9wU2hhZG93LmR5KSk7XG5cbiAgICBjb25zdCBmZUNvbXBvbmVudFRyYW5zZmVyID0gZmlsdGVyLmFwcGVuZFNlbGVjdCgnZmVDb21wb25lbnRUcmFuc2ZlcicpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXJcbiAgICAgIC5hcHBlbmRTZWxlY3QoJ2ZlRnVuY0EnKVxuICAgICAgLmF0dHIoJ3R5cGUnLCBkcm9wU2hhZG93LnR5cGUpXG4gICAgICAuYXR0cignc2xvcGUnLCBwYXJzZUZsb2F0KGRyb3BTaGFkb3cuc2xvcGUpKTtcblxuICAgIGNvbnN0IGZlTWVyZ2UgPSBmaWx0ZXIuYXBwZW5kU2VsZWN0KCdmZU1lcmdlJyk7XG4gICAgZmVNZXJnZS5hcHBlbmRTZWxlY3QoJ2ZlTWVyZ2VOb2RlJyk7XG4gICAgZmVNZXJnZS5hcHBlbmRTZWxlY3QoJ2ZlTWVyZ2VOb2RlJykuYXR0cignaW4nLCAnU291cmNlR3JhcGhpYycpO1xuICAgIC8qIC0tLSAqL1xuXG4gICAgLy8gYWRkIGF4aXNcbiAgICBpZiAocHJvcHMuaGlzdG9ncmFtIHx8IHByb3BzLmRlbnNpdHlQbG90KSB7XG4gICAgICBjaGFydFNWRy5hcHBlbmRTZWxlY3QoJ2cuYXhpcy14JylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMgYXhpcy14JylcbiAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoMCwke3Byb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi5ib3R0b219KWApXG4gICAgICAgIC5jYWxsKFxuICAgICAgICAgIGQzLmF4aXNCb3R0b20oeFNjYWxlKVxuICAgICAgICAgIC8vIC50aWNrVmFsdWVzKHRocmVzaG9sZHMpXG4gICAgICAgICAgICAudGlja1ZhbHVlcyh4U2NhbGUuZG9tYWluKCkpXG4gICAgICAgICAgICAudGlja0Zvcm1hdChudW1Gb3JtYXQpXG4gICAgICAgICk7XG5cbiAgICAvLyBjaGFydFNWRy5hcHBlbmRTZWxlY3QoJ2cuYXhpcy15JylcbiAgICAvLyAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7cHJvcHMubWFyZ2luLmxlZnR9LDApYClcbiAgICAvLyAgIC5jYWxsKGQzLmF4aXNMZWZ0KHlTY2FsZSkudGlja3MobnVsbCwgJyUnKSlcbiAgICAvLyAgIC5jYWxsKGcgPT4gZy5zZWxlY3QoJy5kb21haW4nKS5yZW1vdmUoKSk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmRlbnNpdHlQbG90KSB7XG4gICAgICBjb25zdCBkaXN0cmlidXRpb25MaW5lID0gZDMubGluZSgpXG4gICAgICAgIC5jdXJ2ZShkM1twcm9wcy5kaXN0cmlidXRpb25Qcm9wcy5jdXJ2ZVR5cGVdKVxuICAgICAgICAueChkID0+IHhTY2FsZShkWzBdKSlcbiAgICAgICAgLnkoZCA9PiB5U2NhbGUoZFsxXSkpO1xuXG4gICAgICBjb25zdCBkaXN0cmlidXRpb25BcmVhID0gZDMuYXJlYSgpXG4gICAgICAgIC5jdXJ2ZShkM1twcm9wcy5kaXN0cmlidXRpb25Qcm9wcy5jdXJ2ZVR5cGVdKVxuICAgICAgICAueChkID0+IHhTY2FsZShkWzBdKSlcbiAgICAgICAgLnkxKGQgPT4geVNjYWxlKGRbMV0pKVxuICAgICAgICAueTAoZCA9PiB5U2NhbGUoMCkpO1xuXG4gICAgICAvLyBESVNUUklCVVRJT04gTUFUSFxuICAgICAgY29uc3Qga2RlID0gKGtlcm5lbCwgdGhyZXNob2xkcywgZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gdGhyZXNob2xkcy5tYXAodCA9PiBbdCwgZDMubWVhbihkYXRhLCBkID0+IGtlcm5lbCh0IC0gZCkpXSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgZXBhbmVjaG5pa292ID0gKGJhbmR3aWR0aCkgPT4ge1xuICAgICAgICByZXR1cm4geCA9PiBNYXRoLmFicyh4IC89IGJhbmR3aWR0aCkgPD0gMSA/IDAuNzUgKiAoMSAtIHggKiB4KSAvIGJhbmR3aWR0aCA6IDA7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZW5zaXR5ID0ga2RlKGVwYW5lY2huaWtvdihwcm9wcy5kaXN0cmlidXRpb25Qcm9wcy5iYW5kd2lkdGgpLCB0aHJlc2hvbGRzLCBkYXRhVmFsdWVzKTtcblxuICAgICAgLy8gY29uc29sZS5sb2coeVNjYWxlLmRvbWFpbigpKTtcblxuICAgICAgY29uc29sZS5sb2coJ2RlbnNpdHknLCBkZW5zaXR5KTtcbiAgICAgIGNvbnNvbGUubG9nKCdiaW5zJywgYmlucyk7XG5cbiAgICAgIHBsb3QuYXBwZW5kU2VsZWN0KCdwYXRoLmRpc3RyaWJ1dGlvbi1hcmVhJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2FyZWEgZGlzdHJpYnV0aW9uLWFyZWEnKVxuICAgICAgICAuZGF0dW0oZGVuc2l0eSlcbiAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgLmF0dHIoJ3N0cm9rZS1saW5lam9pbicsICdyb3VuZCcpXG4gICAgICAgIC5hdHRyKCdkJywgZGlzdHJpYnV0aW9uQXJlYSk7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKCdhcmVhJywgZDMucG9seWdvbkFyZWEoKGRlbnNpdHkpKSk7XG5cbiAgICAgIHBsb3QuYXBwZW5kU2VsZWN0KCdwYXRoLmRpc3RyaWJ1dGlvbi1saW5lJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xpbmUgZGlzdHJpYnV0aW9uLWxpbmUnKVxuICAgICAgICAuZGF0dW0oZGVuc2l0eSlcbiAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgLmF0dHIoJ3N0cm9rZS1saW5lam9pbicsICdyb3VuZCcpXG4gICAgICAgIC5hdHRyKCdkJywgZGlzdHJpYnV0aW9uTGluZSk7XG5cbiAgICAgIC8vIEhJR0hMSUdIVCBEQVRBIFBPTlRcbiAgICAgIGlmIChwcm9wcy5tYXJrRGF0YVBvaW50KSB7XG4gICAgICAvLyBzZXQgZGF0YSBwb2ludFxuICAgICAgICBjb25zdCBtYXJrZXJEYXRhID0gcHJvcHMubWFya0RhdGFQb2ludC5tYXAoZWxlbWVudCA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsID0gKGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0gIT09IG51bGwgJiYgIWlzTmFOKGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0pKSA/IG5vcm1hbGl6ZShlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKSA6IG5vcm1hbGl6ZShhbGxEYXRhLmZpbmQoZSA9PiBlW3Byb3BzLmRhdGFQYXJhbXMua2V5XSA9PT0gZWxlbWVudFtwcm9wcy5kYXRhUGFyYW1zLmtleV0pW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKTtcblxuICAgICAgICAgIGxldCBwb3NEaXN0ID0gMDtcbiAgICAgICAgICBjb25zdCBwb3NCaW4gPSBiaW5zLmZpbmQoKGVsZW1lbnQsIGkpID0+IHtcbiAgICAgICAgICAgIHBvc0Rpc3QgPSBpO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuaW5jbHVkZXModmFsKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IGRlbnNpdHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgICAgIC5kb21haW4oW3Bvc0Jpbi54MCwgcG9zQmluLngxXSlcbiAgICAgICAgICAgIC5yYW5nZShbZGVuc2l0eVtwb3NEaXN0XVsxXSwgZGVuc2l0eVtwb3NEaXN0ICsgMV1bMV1dKTtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy5rZXldIHx8IGB2YWx1ZSR7dmFsfWAsXG4gICAgICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICAgICAgdGV4dDogZWxlbWVudC50ZXh0LFxuICAgICAgICAgICAgZGVuc2l0eUluZGV4OiBwb3NEaXN0LFxuICAgICAgICAgICAgZGVuc2l0eTogZGVuc2l0eVNjYWxlKHZhbCksXG4gICAgICAgICAgICBiaW46IHBvc0JpbixcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gd2lkdGggb2YgaGlnaGxpZ2h0IHJlY3RcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0V2lkdGggPSB3aWR0aCAvIGRhdGEubGVuZ3RoO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1hcmtlckRhdGEpO1xuXG4gICAgICAgIC8vIGFkZCBkaXN0cnVidXRpb24gY2xpcHBpbmcgbWFza1xuICAgICAgICBjb25zdCBzdmdEZWZzID0gY2hhcnRTVkcuYXBwZW5kU2VsZWN0KCdkZWZzJyk7XG5cbiAgICAgICAgc3ZnRGVmcy5hcHBlbmRTZWxlY3QoJ2NsaXBQYXRoJylcbiAgICAgICAgICAuYXR0cignaWQnLCBgJHtub2RlLmlkfS1jbGlwLXBhdGhgKVxuICAgICAgICAgIC5hcHBlbmRTZWxlY3QoJ3BhdGgnKVxuICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgLmF0dHIoJ2QnLCBkaXN0cmlidXRpb25BcmVhKGRlbnNpdHkpKTtcblxuICAgICAgICAvLyBhZGQgaGlnaGxpZ2h0IHNoYXBlXG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodEdyb3VwID0gY2hhcnRTVkcuYXBwZW5kU2VsZWN0KCdnLmhpZ2hsaWdodHMnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWdobGlnaHRzJyk7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodHMgPSBoaWdobGlnaHRHcm91cC5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgICAgICAgIC5kYXRhKG1hcmtlckRhdGEsIGQgPT4gZC5rZXkpO1xuXG4gICAgICAgIGhpZ2hsaWdodHMuZW50ZXIoKS5hcHBlbmQoJ3JlY3QnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYCR7ZC5rZXl9YClcbiAgICAgICAgICAuYXR0cignZGF0YS12YWx1ZScsIGQgPT4gZC52YWx1ZSlcbiAgICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQudmFsdWUpIC0gMC41ICogaGlnaGxpZ2h0V2lkdGgpXG4gICAgICAgICAgLmF0dHIoJ3knLCBwcm9wcy5oZWlnaHQgLSBwcm9wcy5tYXJnaW4uYm90dG9tKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwcm9wcy5oZWlnaHQgLSBwcm9wcy5tYXJnaW4udG9wIC0gcHJvcHMubWFyZ2luLmJvdHRvbSlcbiAgICAgICAgICAuYXR0cignd2lkdGgnLCBoaWdobGlnaHRXaWR0aClcbiAgICAgICAgICAuc3R5bGUoJ2NsaXAtcGF0aCcsIGB1cmwoIyR7bm9kZS5pZH0tY2xpcC1wYXRoKWApXG4gICAgICAgICAgLm1lcmdlKGhpZ2hsaWdodHMpXG4gICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbi5kZWxheSg1MCkuZHVyYXRpb24oNzUwKSlcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCBkID0+IGAke2Qua2V5fWApXG4gICAgICAgICAgLmF0dHIoJ2RhdGEtdmFsdWUnLCBkID0+IGQudmFsdWUpXG4gICAgICAgICAgLmF0dHIoJ3gnLCBkID0+IHhTY2FsZShkLnZhbHVlKSAtIDAuNSAqIGhpZ2hsaWdodFdpZHRoKVxuICAgICAgICAgIC5hdHRyKCd5JywgcHJvcHMubWFyZ2luLnRvcClcbiAgICAgICAgICAuYXR0cignaGVpZ2h0JywgcHJvcHMuaGVpZ2h0IC0gcHJvcHMubWFyZ2luLnRvcCAtIHByb3BzLm1hcmdpbi5ib3R0b20pXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgaGlnaGxpZ2h0V2lkdGgpXG4gICAgICAgICAgLnN0eWxlKCdjbGlwLXBhdGgnLCBgdXJsKCMke25vZGUuaWR9LWNsaXAtcGF0aClgKTtcblxuICAgICAgICBoaWdobGlnaHRzLmV4aXQoKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAwKVxuICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgIC8vIGFkZCBoaWdobGlnaHQgbWFya2VyIGZvciBhbm5vdGF0aW9uXG4gICAgICAgIGNvbnN0IGFyYyA9IHt9O1xuICAgICAgICBhcmMucmlnaHQgPSB7XG4gICAgICAgICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgICAgICAgY29uc3QgciA9IE1hdGguc3FydCgyICogc2l6ZSAvIE1hdGguUEkpO1xuICAgICAgICAgICAgLy8gY29uc3Qgb3JnaW4gPSAoNCAqIHIpIC8gKDMgKiBNYXRoLlBJKTsgLy8gdGhlIG9yZ2luIG9mIHRoZSBjaXJjbGVcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKHIsIC1wcm9wcy5hbm5vdGF0aW9uLm9mZnNldCwgciwgTWF0aC5QSSwgLU1hdGguUEkgLyAyLCBmYWxzZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgYXJjLmxlZnQgPSB7XG4gICAgICAgICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgICAgICAgICAgY29uc3QgciA9IE1hdGguc3FydCgyICogc2l6ZSAvIE1hdGguUEkpO1xuICAgICAgICAgICAgLy8gY29uc3Qgb3JnaW4gPSAoNCAqIHIpIC8gKDMgKiBNYXRoLlBJKTsgLy8gdGhlIG9yZ2luIG9mIHRoZSBjaXJjbGVcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKC1yLCAtcHJvcHMuYW5ub3RhdGlvbi5vZmZzZXQsIHIsIDAsIC1NYXRoLlBJIC8gMiwgdHJ1ZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwb2ludGVyU3ltYm9sID0gZDMuc3ltYm9sKCkudHlwZShhcmNbcHJvcHMuYW5ub3RhdGlvbi5vcmllbnRdKS5zaXplKHByb3BzLmFubm90YXRpb24uc2l6ZSk7XG4gICAgICAgIGNvbnN0IGFyY1JhZGl1cyA9IE1hdGguc3FydCgyICogcHJvcHMuYW5ub3RhdGlvbi5zaXplIC8gTWF0aC5QSSk7XG5cbiAgICAgICAgLy8gY29uc3Qgc3ltQm9sTWFya2VyID0gcHJvcHMubWFya0RhdGFQb2ludC5tYXAoZCA9PiB7XG4gICAgICAgIC8vICAgcmV0dXJuIHtcbiAgICAgICAgLy8gICAgIGtleTogZFtwcm9wcy5kYXRhUGFyYW1zLmtleV0sXG4gICAgICAgIC8vICAgICBsaW5lOiBbXG4gICAgICAgIC8vICAgICAgIFsyNSwgLTI1XSwgWzIwLCAtMjVdLCBbNSwgLTIwXSwgWzAsIDBdLFxuICAgICAgICAvLyAgICAgXSxcbiAgICAgICAgLy8gICB9O1xuICAgICAgICAvLyB9KTtcbiAgICAgICAgLy8gY29uc3QgcGF0aE1hcmtlciA9IGQzLmxpbmUoKVxuICAgICAgICAvLyAgIC5jdXJ2ZShkMy5jdXJ2ZUJhc2lzKVxuICAgICAgICAvLyAgIC54KGQgPT4gKGRbMF0pKVxuICAgICAgICAvLyAgIC55KGQgPT4gKGRbMV0pKTtcblxuICAgICAgICBjb25zdCBoaWdobGlnaHRNYXJrZXJzID0gaGlnaGxpZ2h0R3JvdXAuc2VsZWN0QWxsKCdnLm1hcmtlci1nJylcbiAgICAgICAgICAuZGF0YShtYXJrZXJEYXRhLCBkID0+IGQua2V5KTtcblxuICAgICAgICBjb25zdCBtYXJrZXJHID0gaGlnaGxpZ2h0TWFya2Vycy5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBgbWFya2VyLWcgJHtkLmtleX1gKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHt4U2NhbGUoZC52YWx1ZSl9LCAke3lTY2FsZShkLmRlbnNpdHkpfSlgKTtcblxuICAgICAgICBtYXJrZXJHLmFwcGVuZCgncGF0aCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiBgbWFya2VyICR7ZC5rZXl9YClcbiAgICAgICAgICAuYXR0cignZmlsbCcsICdub25lJylcbiAgICAgICAgICAuYXR0cignZCcsIGQgPT4gcHJvcHMuYW5ub3RhdGlvbi5vcmllbnQgPyBwb2ludGVyU3ltYm9sKCkgOlxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICB4U2NhbGUoZC52YWx1ZSkgPj0gd2lkdGggLyA1ID8gZDMuc3ltYm9sKCkudHlwZShhcmMubGVmdCkuc2l6ZShwcm9wcy5hbm5vdGF0aW9uLnNpemUpKCkgOiBkMy5zeW1ib2woKS50eXBlKGFyYy5yaWdodCkuc2l6ZShwcm9wcy5hbm5vdGF0aW9uLnNpemUpKClcbiAgICAgICAgICAgICkpO1xuICAgICAgICBtYXJrZXJHLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4geFNjYWxlKGQudmFsdWUpID49IHdpZHRoIC8gNSA/IGB0cmFuc2xhdGUoJHstYXJjUmFkaXVzIC0gNn0sICR7LWFyY1JhZGl1cyAtIDZ9KWAgOiBgdHJhbnNsYXRlKCR7YXJjUmFkaXVzICsgNn0sICR7LWFyY1JhZGl1cyAtIDZ9KWApXG4gICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgZCA9PiB4U2NhbGUoZC52YWx1ZSkgPj0gd2lkdGggLyA1ID8gJ2VuZCcgOiAnc3RhcnQnKVxuICAgICAgICAgIC5hcHBlbmQoJ3RzcGFuJylcbiAgICAgICAgICAudGV4dChkID0+IGQudGV4dCA/IGAke2QudGV4dH1gIDogYCR7ZC5rZXl9YCk7XG5cbiAgICAgICAgaGlnaGxpZ2h0TWFya2Vyc1xuICAgICAgICAgIC5tZXJnZShoaWdobGlnaHRNYXJrZXJzKVxuICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gYHRyYW5zbGF0ZSgke3hTY2FsZShkLnZhbHVlKX0sICR7eVNjYWxlKGQuZGVuc2l0eSl9KWApO1xuXG4gICAgICAgIGhpZ2hsaWdodE1hcmtlcnMuZXhpdCgpLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJVR1BMT1RcbiAgICBpZiAocHJvcHMucnVnUGxvdCkge1xuICAgICAgY29uc3QgcnVnUG9zaXRpb24gPSB7XG4gICAgICAgIHk6IHByb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi5ib3R0b20gLSAxMyxcbiAgICAgICAgaGVpZ2h0OiBwcm9wcy5ydWdQcm9wcy5oZWlnaHQsXG4gICAgICAgIHpvb206IChwcm9wcy5ydWdQcm9wcy5oZWlnaHQgKyBwcm9wcy5ydWdQcm9wcy5hY3RpdmVSdWdab29tICogMikgLyBwcm9wcy5ydWdQcm9wcy5oZWlnaHQsXG4gICAgICB9O1xuXG4gICAgICB2YXIgeFNjYWxlUnVnO1xuICAgICAgLy8gYWRkIHJ1Z3Bsb3QgYXhpc1xuICAgICAgaWYgKHByb3BzLmhpc3RvZ3JhbSB8fCBwcm9wcy5kZW5zaXR5UGxvdCkge1xuICAgICAgICB4U2NhbGVSdWcgPSB4U2NhbGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4U2NhbGVSdWcgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgICAgLmRvbWFpbihkMy5leHRlbnQoZGF0YVZhbHVlcykpXG4gICAgICAgICAgLy8gLmRvbWFpbihbLWQzLmV4dGVudChkYXRhVmFsdWVzKVsxXSwgZDMuZXh0ZW50KGRhdGFWYWx1ZXMpWzFdXSlcbiAgICAgICAgICAucmFuZ2UoW3Byb3BzLm1hcmdpbi5sZWZ0LCB3aWR0aCAtIHByb3BzLm1hcmdpbi5yaWdodF0pO1xuICAgICAgICBjb25zdCBydWdYQXhpcyA9IGNoYXJ0U1ZHLmFwcGVuZFNlbGVjdCgnZy5heGlzLXgnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzIGF4aXMteCcpXG4gICAgICAgICAgLy8gLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7cHJvcHMuaGVpZ2h0IC0gcHJvcHMubWFyZ2luLmJvdHRvbX0pYCk7XG5cbiAgICAgICAgaWYgKHByb3BzLnJ1Z1Byb3BzLmN1c3RvbUF4aXNMYWJlbHMpIHtcbiAgICAgICAgICBydWdYQXhpcy5jYWxsKFxuICAgICAgICAgICAgZDMuYXhpc0JvdHRvbSh4U2NhbGVSdWcpXG4gICAgICAgICAgICAgIC50aWNrVmFsdWVzKHByb3BzLnJ1Z1Byb3BzLmN1c3RvbUF4aXNMYWJlbHMubWFwKGQgPT4gZC5wb3MpKVxuICAgICAgICAgICAgICAudGlja0Zvcm1hdCgoZCwgaSkgPT4gcHJvcHMucnVnUHJvcHMuY3VzdG9tQXhpc0xhYmVsc1tpXS5sYWJlbClcbiAgICAgICAgICAgICAgLnRpY2tTaXplKDIwKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcnVnWEF4aXMuY2FsbChcbiAgICAgICAgICAgIGQzLmF4aXNCb3R0b20oeFNjYWxlUnVnKVxuICAgICAgICAgICAgICAudGlja1ZhbHVlcyh4U2NhbGVSdWcuZG9tYWluKCkpXG4gICAgICAgICAgICAgIC50aWNrRm9ybWF0KG51bUZvcm1hdClcbiAgICAgICAgICAgICAgLnRpY2tTaXplKDIwKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3VzdG9tIGxhYmVsIGZvcm1hdFxuICAgICAgICBpZiAocHJvcHMucnVnUHJvcHMuY3VzdG9tQXhpc0Zvcm1hdCkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0aW9uKCkuc2VsZWN0KCcuQ291bnRyeVJhbmtpbmdTdHJpcHMgLmF4aXMuYXhpcy14JykuY2xhc3NlZCgnY3VzdG9tQXhpc0Zvcm1hdCcsICd0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGN1c3RvbSBzcGxpdCBheGlzXG4gICAgICBjb25zdCBzcGxpdEF4aXNIZWlnaHQgPSAyO1xuICAgICAgbGV0IGdhcEJ3QXhpcyA9IDE7XG5cbiAgICAgIGNvbnN0IHNwbGl0QXhpcyA9IGNoYXJ0U1ZHLmFwcGVuZFNlbGVjdCgnZy5zcGxpdC1heGlzJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3NwbGl0LWF4aXMnKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7cnVnUG9zaXRpb24ueSArIHJ1Z1Bvc2l0aW9uLmhlaWdodCArIHNwbGl0QXhpc0hlaWdodCAqIDJ9KWApO1xuXG4gICAgICBpZiAocHJvcHMucnVnUHJvcHMuc2hvd1NwbGl0QXhpcyAmJiBwcm9wcy5ydWdQcm9wcy5zcGxpdEF4aXMpIHtcbiAgICAgICAgLy8gc3BsaXRBeGlzSGVpZ2h0ID0gMjtcbiAgICAgICAgLy8gY2hlY2sgaWYgc3BsaXQgcG9pbnQgdmFsdWUgaXMgaW4gZG9tYWluXG4gICAgICAgIGlmIChwcm9wcy5ydWdQcm9wcy5zcGxpdEF4aXMudmFsdWUgPj0geFNjYWxlUnVnLmRvbWFpbigpWzFdKSB7XG4gICAgICAgICAgcHJvcHMucnVnUHJvcHMuc3BsaXRBeGlzLnZhbHVlID0geFNjYWxlUnVnLmRvbWFpbigpWzFdO1xuICAgICAgICAgIGdhcEJ3QXhpcyA9IDA7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coJ0cnKTtcbiAgICAgICAgfSBpZiAocHJvcHMucnVnUHJvcHMuc3BsaXRBeGlzLnZhbHVlIDw9IHhTY2FsZVJ1Zy5kb21haW4oKVswXSkge1xuICAgICAgICAgIHByb3BzLnJ1Z1Byb3BzLnNwbGl0QXhpcy52YWx1ZSA9IHhTY2FsZVJ1Zy5kb21haW4oKVswXTtcbiAgICAgICAgICBnYXBCd0F4aXMgPSAwO1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdTJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbGVmdFxuICAgICAgICBzcGxpdEF4aXMuYXBwZW5kU2VsZWN0KCdyZWN0LmF4aXMtbGVmdCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMtbGVmdCcpXG4gICAgICAgICAgLnN0eWxlKCdmaWxsJywgcHJvcHMucnVnUHJvcHMuc3BsaXRBeGlzLmNvbG9yc1swXSlcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIHByb3BzLnJ1Z1Byb3BzLnNwbGl0QXhpcy5jb2xvcnNbMF0pXG4gICAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAxKVxuICAgICAgICAgIC5hdHRyKCd4JywgeFNjYWxlUnVnLnJhbmdlKClbMF0pXG4gICAgICAgICAgLmF0dHIoJ3knLCAtMilcbiAgICAgICAgICAuYXR0cignaGVpZ2h0Jywgc3BsaXRBeGlzSGVpZ2h0KVxuICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHhTY2FsZVJ1Zyhwcm9wcy5ydWdQcm9wcy5zcGxpdEF4aXMudmFsdWUpIC0geFNjYWxlUnVnLnJhbmdlKClbMF0gLSBnYXBCd0F4aXMpO1xuICAgICAgICAvLyByaWdodFxuICAgICAgICBzcGxpdEF4aXMuYXBwZW5kU2VsZWN0KCdyZWN0LmF4aXMtcmlnaHQnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzLXJpZ2h0JylcbiAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBwcm9wcy5ydWdQcm9wcy5zcGxpdEF4aXMuY29sb3JzWzFdKVxuICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgcHJvcHMucnVnUHJvcHMuc3BsaXRBeGlzLmNvbG9yc1sxXSlcbiAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDEpXG4gICAgICAgICAgLmF0dHIoJ3gnLCB4U2NhbGVSdWcocHJvcHMucnVnUHJvcHMuc3BsaXRBeGlzLnZhbHVlKSArIGdhcEJ3QXhpcylcbiAgICAgICAgICAuYXR0cigneScsIC0yKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBzcGxpdEF4aXNIZWlnaHQpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgeFNjYWxlUnVnLnJhbmdlKClbMV0gLSB4U2NhbGVSdWcocHJvcHMucnVnUHJvcHMuc3BsaXRBeGlzLnZhbHVlKSk7XG5cbiAgICAgICAgLy8gYWRkIGNzcyBjb2xvcnMgdG8gdGhlIGF4aXMgbGFiZWxzXG4gICAgICAgIGNoYXJ0U1ZHLnNlbGVjdCgnZy5heGlzJykuY2xhc3NlZCgnc3BsaXQtYXhpcycsIHRydWUpLmxvd2VyKCk7XG4gICAgICAgIC8vIGNoYXJ0U1ZHLnNlbGVjdCgnZy5heGlzLmN1c3RvbUF4aXNGb3JtYXQgZy50aWNrOmZpcnN0LW9mLXR5cGUgdGV4dCcpLnN0eWxlKCdmaWxsJywgcHJvcHMucnVnUHJvcHMuc3BsaXRBeGlzLmNvbG9yc1swXSk7XG4gICAgICAgIC8vIGNoYXJ0U1ZHLnNlbGVjdCgnZy5heGlzLmN1c3RvbUF4aXNGb3JtYXQgZy50aWNrOmxhc3Qtb2YtdHlwZSB0ZXh0Jykuc3R5bGUoJ2ZpbGwnLCBwcm9wcy5ydWdQcm9wcy5zcGxpdEF4aXMuY29sb3JzWzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGl0QXhpcy5yZW1vdmUoKTtcbiAgICAgICAgY2hhcnRTVkcuc2VsZWN0KCdnLmF4aXMnKS5jbGFzc2VkKCdzcGxpdC1heGlzJywgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBydWdQbG90ID0gcGxvdC5hcHBlbmRTZWxlY3QoJ2cucnVncGxvdCcpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdydWdwbG90Jyk7XG5cbiAgICAgIGNvbnN0IHJ1Z3MgPSBydWdQbG90LnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgIC5kYXRhKGRhdGEsIGQgPT4gZC5rZXkpO1xuICAgICAgcnVncy5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYCR7ZFtwcm9wcy5kYXRhUGFyYW1zLmtleV19YClcbiAgICAgICAgLmF0dHIoJ2RhdGEtdmFsdWUnLCBkID0+IGAke2RbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV19YClcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgcHJvcHMucnVnUHJvcHMucnVnQ29sb3IpXG4gICAgICAgIC8vIC5zdHlsZSgnZmlsbCcsIGQgPT4gZFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSA8IDAgPyAnI2VlNjY1YicgOiAnIzc0YzQ3NicpXG4gICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGVSdWcoZFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSkgLSBwcm9wcy5ydWdQcm9wcy5ydWdXaWR0aCAvIDIpXG4gICAgICAgIC5hdHRyKCd5JywgcnVnUG9zaXRpb24ueSlcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHJ1Z1Bvc2l0aW9uLmhlaWdodClcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcHJvcHMucnVnUHJvcHMucnVnV2lkdGgpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0tb3JpZ2luJywgZCA9PiBgJHt4U2NhbGVSdWcoZFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSkgLSBwcm9wcy5ydWdQcm9wcy5ydWdXaWR0aCAvIDJ9ICR7cnVnUG9zaXRpb24ueSArIHJ1Z1Bvc2l0aW9uLmhlaWdodCAvIDJ9YClcbiAgICAgICAgLy8gLnN0eWxlKCd0cmFuc2l0aW9uJywgbnVsbClcbiAgICAgICAgLm1lcmdlKHJ1Z3MpXG4gICAgICAgIC8vIC5zdHlsZSgndHJhbnNpdGlvbicsIG51bGwpXG4gICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgIC5hdHRyKCdkYXRhLXZhbHVlJywgZCA9PiBgJHtkW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdfWApXG4gICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGVSdWcoZFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSkgLSBwcm9wcy5ydWdQcm9wcy5ydWdXaWR0aCAvIDIpXG4gICAgICAgIC5hdHRyKCd5JywgcnVnUG9zaXRpb24ueSlcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHJ1Z1Bvc2l0aW9uLmhlaWdodClcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgcHJvcHMucnVnUHJvcHMucnVnV2lkdGgpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0tb3JpZ2luJywgZCA9PiBgJHt4U2NhbGVSdWcoZFtwcm9wcy5kYXRhUGFyYW1zLnZhbHVlXSkgLSBwcm9wcy5ydWdQcm9wcy5ydWdXaWR0aCAvIDJ9ICR7cnVnUG9zaXRpb24ueSArIHJ1Z1Bvc2l0aW9uLmhlaWdodCAvIDJ9YCk7XG5cbiAgICAgIHJ1Z3MuZXhpdCgpLnJlbW92ZSgpO1xuICAgICAgcGxvdC5yYWlzZSgpO1xuXG4gICAgICAvLyBhZGQgaGlnaGxpZ2h0XG5cbiAgICAgIGlmIChwcm9wcy5ydWdQcm9wcy5hbm5vdGF0aW9uICYmICEocHJvcHMuaGlzdG9ncmFtIHx8IHByb3BzLmRlbnNpdHlQbG90KSkge1xuICAgICAgICBjb25zdCBtYXJrZXJEYXRhID0gcHJvcHMucnVnUHJvcHMuYW5ub3RhdGlvbi5tYXAoZWxlbWVudCA9PiB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coZWxlbWVudCk7XG4gICAgICAgICAgY29uc3QgdmFsID0gKGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0gIT09IG51bGwgJiYgIWlzTmFOKGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy52YWx1ZV0pKSA/IChlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKSA6IChkYXRhLmZpbmQoZSA9PiBlW3Byb3BzLmRhdGFQYXJhbXMua2V5XSA9PT0gZWxlbWVudFtwcm9wcy5kYXRhUGFyYW1zLmtleV0pW3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdKTtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy5rZXldIHx8IGB2YWx1ZSR7dmFsfWAsXG4gICAgICAgICAgICB2YWx1ZTogdmFsLFxuICAgICAgICAgICAgdGV4dDogZWxlbWVudC50ZXh0IHx8IHByb3BzLnJ1Z1Byb3BzLmdldFRvb2x0aXBUZXh0KGVsZW1lbnRbcHJvcHMuZGF0YVBhcmFtcy5rZXldKSxcbiAgICAgICAgICAgIC8vIHRleHQ6IGVsZW1lbnQudGV4dCB8fCBlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMua2V5XSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdG9vbHRpcERhdGEgPSBkYXRhLm1hcChlbGVtZW50ID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMua2V5XSxcbiAgICAgICAgICAgIHZhbHVlOiBlbGVtZW50W3Byb3BzLmRhdGFQYXJhbXMudmFsdWVdLFxuICAgICAgICAgICAgdGV4dDogcHJvcHMucnVnUHJvcHMuZ2V0VG9vbHRpcFRleHQoZWxlbWVudFtwcm9wcy5kYXRhUGFyYW1zLmtleV0pLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG1hcmtlckRhdGEpO1xuICAgICAgICBjb25zdCBfYW5ub1BvcyA9ICh0ZXh0LCB2YWwpID0+IHtcbiAgICAgICAgICBsZXQgdGV4dFBvcyA9IDA7XG4gICAgICAgICAgbGV0IHRleHRBbmNob3IgPSAnbWlkZGxlJztcbiAgICAgICAgICBjb25zdCB0ZXh0TGVuID0gdGV4dC5sZW5ndGggKiAzO1xuICAgICAgICAgIGlmICh0ZXh0TGVuKSB7XG4gICAgICAgICAgICBpZiAoeFNjYWxlUnVnKHZhbCkgKyB0ZXh0TGVuID49IHhTY2FsZVJ1Zy5yYW5nZSgpWzFdKSB7XG4gICAgICAgICAgICAgIHRleHRQb3MgPSA2O1xuICAgICAgICAgICAgICB0ZXh0QW5jaG9yID0gJ2VuZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeFNjYWxlUnVnKHZhbCkgLSB0ZXh0TGVuIDw9IHhTY2FsZVJ1Zy5yYW5nZSgpWzBdKSB7XG4gICAgICAgICAgICAgIHRleHRQb3MgPSAtNjtcbiAgICAgICAgICAgICAgdGV4dEFuY2hvciA9ICdzdGFydCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4UG9zOiB0ZXh0UG9zLFxuICAgICAgICAgICAgeEFuY2hvcjogdGV4dEFuY2hvcixcblxuICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbWFya2VyUG9zID0gTWF0aC5zcXJ0KDIgKiAocnVnUG9zaXRpb24uaGVpZ2h0ICogMykgLyBNYXRoLlBJKSArIHByb3BzLnJ1Z1Byb3BzLmFjdGl2ZVJ1Z1pvb20gKiAyO1xuICAgICAgICBjb25zdCBtYXJrZXJTeW1ib2wgPSBkMy5zeW1ib2woKS50eXBlKGQzLnN5bWJvbFRyaWFuZ2xlKS5zaXplKHJ1Z1Bvc2l0aW9uLmhlaWdodCAqIDMpO1xuXG4gICAgICAgIGNvbnN0IG1hcmtlclJhZGl1cyA9IHByb3BzLnJ1Z1Byb3BzLnNob3dUaXBNYXJrZXIgPyBNYXRoLnNxcnQoMiAqIChydWdQb3NpdGlvbi5oZWlnaHQgKiAzKSAvIE1hdGguUEkpIDogMDtcblxuICAgICAgICBjb25zdCBoaWdobGlnaHRHcm91cCA9IGNoYXJ0U1ZHLmFwcGVuZFNlbGVjdCgnZy5oaWdobGlnaHRzJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnaGlnaGxpZ2h0cycpO1xuXG4gICAgICAgIGNvbnN0IHJ1Z0JnQmFyID0gaGlnaGxpZ2h0R3JvdXAuYXBwZW5kU2VsZWN0KCdyZWN0LmhpZ2hsaWdodC1iYXInKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdoaWdobGlnaHQtYmFyJylcbiAgICAgICAgICAvLyAuc3R5bGUoJ29wYWNpdHknLCAwLjU1KVxuICAgICAgICAgIC5hdHRyKCd4JywgeFNjYWxlUnVnLnJhbmdlKClbMF0pXG4gICAgICAgICAgLmF0dHIoJ3knLCBydWdQb3NpdGlvbi55KVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBydWdQb3NpdGlvbi5oZWlnaHQpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgeFNjYWxlUnVnLnJhbmdlKClbMV0gLSB4U2NhbGVSdWcucmFuZ2UoKVswXSk7XG5cbiAgICAgICAgY29uc3QgcnVnVG91Y2hBcmVhID0gY2hhcnRTVkcuYXBwZW5kU2VsZWN0KCdyZWN0LnRvdWNoLWFyZWEnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0b3VjaC1hcmVhJylcbiAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAndHJhbnNwYXJlbnQnKVxuICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ25vbmUnKVxuICAgICAgICAgIC5hdHRyKCd4JywgeFNjYWxlUnVnLnJhbmdlKClbMF0pXG4gICAgICAgICAgLmF0dHIoJ3knLCAwKVxuICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBwcm9wcy5oZWlnaHQpXG4gICAgICAgICAgLmF0dHIoJ3dpZHRoJywgeFNjYWxlUnVnLnJhbmdlKClbMV0gLSB4U2NhbGVSdWcucmFuZ2UoKVswXSlcbiAgICAgICAgICAucmFpc2UoKTtcblxuICAgICAgICBjb25zdCBfZHJhd1Rvb2x0aXBzID0gKGRhdGEsIGNsYXNzTGlzdCkgPT4ge1xuICAgICAgICAgIGlmIChwcm9wcy5ydWdQcm9wcy5zaG93VGlwTWFya2VyKSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBoaWdobGlnaHRHcm91cC5zZWxlY3RBbGwoJ3BhdGgubWFya2VyLXJ1ZycpXG4gICAgICAgICAgICAgIC5kYXRhKGRhdGEsIGQgPT4gZC5rZXkpO1xuXG4gICAgICAgICAgICBtYXJrZXIuZW50ZXIoKS5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCBkID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFya2VyRGF0YS5maW5kKG0gPT4gbS5rZXkgPT09IGQua2V5KSA/IGBtYXJrZXItcnVnICR7ZC5rZXl9ICR7Y2xhc3NMaXN0fSBoaWdobGlnaHRlZGAgOiBgbWFya2VyLXJ1ZyAke2Qua2V5fSAke2NsYXNzTGlzdH1gO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICdub25lJylcbiAgICAgICAgICAgICAgLmF0dHIoJ2QnLCBtYXJrZXJTeW1ib2wpXG4gICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHt4U2NhbGVSdWcoZC52YWx1ZSl9LCAke3J1Z1Bvc2l0aW9uLnkgLSBtYXJrZXJQb3N9KSByb3RhdGUoMTgwKWApXG4gICAgICAgICAgICAgIC5tZXJnZShtYXJrZXIpXG4gICAgICAgICAgICAgIC5pbnRlcnJ1cHQoKVxuICAgICAgICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBgdHJhbnNsYXRlKCR7eFNjYWxlUnVnKGQudmFsdWUpfSwgJHtydWdQb3NpdGlvbi55IC0gbWFya2VyUG9zfSkgcm90YXRlKDE4MClgKTtcbiAgICAgICAgICAgIG1hcmtlci5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbWFya2VyVGV4dCA9IGhpZ2hsaWdodEdyb3VwLnNlbGVjdEFsbCgndGV4dC5tYXJrZXItdGV4dCcpXG4gICAgICAgICAgICAuZGF0YShkYXRhLCBkID0+IGQua2V5KTtcblxuICAgICAgICAgIG1hcmtlclRleHQuZW50ZXIoKS5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gYHRyYW5zbGF0ZSgke3hTY2FsZVJ1ZyhkLnZhbHVlKSArIF9hbm5vUG9zKGQudGV4dCwgZC52YWx1ZSkueFBvc30sICR7cnVnUG9zaXRpb24ueSAtIDMgKiBtYXJrZXJSYWRpdXMgLSBwcm9wcy5ydWdQcm9wcy5hY3RpdmVSdWdab29tICogMiAtIHByb3BzLnJ1Z1Byb3BzLnRleHRIZWlnaHQgKiAxLjQxNH0pYClcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gbWFya2VyRGF0YS5maW5kKG0gPT4gbS5rZXkgPT09IGQua2V5KSA/IGBtYXJrZXItdGV4dCAke2Qua2V5fSAke2NsYXNzTGlzdH0gaGlnaGxpZ2h0ZWRgIDogYG1hcmtlci10ZXh0ICR7ZC5rZXl9ICR7Y2xhc3NMaXN0fWA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRleHQoZCA9PiBgJHtkLnRleHR9YClcbiAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsIGQgPT4gX2Fubm9Qb3MoZC50ZXh0LCBkLnZhbHVlKS54QW5jaG9yKVxuICAgICAgICAgICAgLm1lcmdlKG1hcmtlclRleHQpXG4gICAgICAgICAgICAuaW50ZXJydXB0KClcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZCA9PiBgdHJhbnNsYXRlKCR7eFNjYWxlUnVnKGQudmFsdWUpICsgX2Fubm9Qb3MoZC50ZXh0LCBkLnZhbHVlKS54UG9zfSwgJHtydWdQb3NpdGlvbi55IC0gMyAqIG1hcmtlclJhZGl1cyAtIHByb3BzLnJ1Z1Byb3BzLmFjdGl2ZVJ1Z1pvb20gKiAyIC0gcHJvcHMucnVnUHJvcHMudGV4dEhlaWdodCAqIDEuNDE0fSlgKVxuICAgICAgICAgICAgLnRleHQoZCA9PiBgJHtkLnRleHR9YClcbiAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsIGQgPT4gX2Fubm9Qb3MoZC50ZXh0LCBkLnZhbHVlKS54QW5jaG9yKTtcblxuICAgICAgICAgIG1hcmtlclRleHQuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgLy8gZGlzcGxheSB2YWx1ZXMgYXQgcG9pbnRcbiAgICAgICAgICBjb25zdCBtYXJrZXJUZXh0VmFsdWVzID0gaGlnaGxpZ2h0R3JvdXAuc2VsZWN0QWxsKCd0ZXh0Lm1hcmtlci10ZXh0dmFsdWUnKVxuICAgICAgICAgICAgLmRhdGEoZGF0YSwgZCA9PiBkLmtleSk7XG5cbiAgICAgICAgICBtYXJrZXJUZXh0VmFsdWVzLmVudGVyKCkuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgIC8vIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHt4U2NhbGVSdWcoZC52YWx1ZSkgKyBfYW5ub1BvcyhkLnRleHQsIGQudmFsdWUpLnhQb3N9LCAke3Byb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi5ib3R0b20gKyAxMiArIHNwbGl0QXhpc0hlaWdodH0pYClcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHt4U2NhbGVSdWcoZC52YWx1ZSkgKyBfYW5ub1BvcyhkLnRleHQsIGQudmFsdWUpLnhQb3N9LCAke3J1Z1Bvc2l0aW9uLnkgLSAzICogbWFya2VyUmFkaXVzIC0gcHJvcHMucnVnUHJvcHMuYWN0aXZlUnVnWm9vbSAqIDIgLSBwcm9wcy5ydWdQcm9wcy50ZXh0SGVpZ2h0IC8gNH0pYClcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsIGQgPT4gYG1hcmtlci10ZXh0dmFsdWUgJHtkLmtleX0gJHtjbGFzc0xpc3R9YClcbiAgICAgICAgICAgIC50ZXh0KGQgPT4gYCR7dG9vbHRpcE51bWJlckZvcm1hdHRlcihkLnZhbHVlKX1gKVxuICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgZCA9PiBfYW5ub1BvcyhkLnRleHQsIGQudmFsdWUpLnhBbmNob3IpXG4gICAgICAgICAgICAubWVyZ2UobWFya2VyVGV4dFZhbHVlcylcbiAgICAgICAgICAgIC5pbnRlcnJ1cHQoKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHt4U2NhbGVSdWcoZC52YWx1ZSkgKyBfYW5ub1BvcyhkLnRleHQsIGQudmFsdWUpLnhQb3N9LCAke3J1Z1Bvc2l0aW9uLnkgLSAzICogbWFya2VyUmFkaXVzIC0gcHJvcHMucnVnUHJvcHMuYWN0aXZlUnVnWm9vbSAqIDIgLSBwcm9wcy5ydWdQcm9wcy50ZXh0SGVpZ2h0IC8gNH0pYClcbiAgICAgICAgICAgIC8vIC5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+IGB0cmFuc2xhdGUoJHt4U2NhbGVSdWcoZC52YWx1ZSkgKyBfYW5ub1BvcyhkLnRleHQsIGQudmFsdWUpLnhQb3N9LCAke3Byb3BzLmhlaWdodCAtIHByb3BzLm1hcmdpbi5ib3R0b20gKyAxMiArIHNwbGl0QXhpc0hlaWdodH0pYClcbiAgICAgICAgICAgIC50ZXh0KGQgPT4gYCR7dG9vbHRpcE51bWJlckZvcm1hdHRlcihkLnZhbHVlKX1gKVxuICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgZCA9PiBfYW5ub1BvcyhkLnRleHQsIGQudmFsdWUpLnhBbmNob3IpO1xuXG4gICAgICAgICAgbWFya2VyVGV4dFZhbHVlcy5leGl0KCkucmVtb3ZlKCk7XG4gICAgICAgICAgLy8gZGUtYWN0aXZlIG9sZCBydWdzXG4gICAgICAgICAgcnVnUGxvdC5zZWxlY3RBbGwoJ3JlY3QnKS5jbGFzc2VkKGNsYXNzTGlzdCwgZmFsc2UpXG4gICAgICAgICAgICAvLyAuc3R5bGUoJ3RyYW5zaXRpb24nLCAnYWxsIDAuMnMnKVxuICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZWxlbWVudCA9PlxuICAgICAgICAgICAgICBtYXJrZXJEYXRhLmZpbmQoZCA9PiBkLmtleSA9PT0gZWxlbWVudC5rZXkpID8gcHJvcHMucnVnUHJvcHMuaGlnaGxpZ2h0Q29sb3IgOiBwcm9wcy5ydWdQcm9wcy5ydWdDb2xvcilcbiAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuZWFzZShkMy5lYXNlU2luKVxuICAgICAgICAgICAgLnN0eWxlKCd0cmFuc2Zvcm0nLCBlbGVtZW50ID0+XG4gICAgICAgICAgICAgIG1hcmtlckRhdGEuZmluZChkID0+IGQua2V5ID09PSBlbGVtZW50LmtleSkgPyBgc2NhbGVYKCR7cnVnUG9zaXRpb24uem9vbX0pIHNjYWxlWSgxKWAgOiAnc2NhbGVYKDEpIHNjYWxlWSgxKScpO1xuXG4gICAgICAgICAgLy8gYWN0aXZlIHJ1ZyBmb3IgdG9vbHRpcFxuICAgICAgICAgIGRhdGEuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIHJ1Z1Bsb3Quc2VsZWN0KGByZWN0LiR7ZWxlbWVudC5rZXl9YCkuY2xhc3NlZChjbGFzc0xpc3QsIHRydWUpXG4gICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsXG4gICAgICAgICAgICAgICAgbWFya2VyRGF0YS5maW5kKGQgPT4gZC5rZXkgPT09IGVsZW1lbnQua2V5KSA/IHByb3BzLnJ1Z1Byb3BzLmhpZ2hsaWdodENvbG9yIDogcHJvcHMucnVnUHJvcHMucnVnQ29sb3IpXG4gICAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuZWFzZShkMy5lYXNlU2luKVxuICAgICAgICAgICAgICAuc3R5bGUoJ3RyYW5zZm9ybScsIGBzY2FsZVgoJHtydWdQb3NpdGlvbi56b29tfSkgc2NhbGVZKCR7cnVnUG9zaXRpb24uem9vbX0pYCk7XG5cbiAgICAgICAgICAgIHJ1Z1Bsb3Quc2VsZWN0KGByZWN0LiR7ZWxlbWVudC5rZXl9YCkucmFpc2UoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUT09MVElQIEFORCBISUdITElHSFRTXG4gICAgICAgIGNvbnN0IF9zZXREZWZhdWx0VG9vbHRpcCA9ICgpID0+IHtcbiAgICAgICAgICAvLyBkcmF3IGhpZ2hsaWdodCBsYWJlbFxuICAgICAgICAgIF9kcmF3VG9vbHRpcHMobWFya2VyRGF0YSwgJ2FjdGl2ZSBoaWdobGlnaHRlZCcpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IF9nZXRBY3RpdmVUb29sdGlwID0gKHBvcykgPT4ge1xuICAgICAgICAgIGNvbnN0IG1vdXNlVmFsID0geFNjYWxlUnVnLmludmVydChwb3MpO1xuICAgICAgICAgIC8vIGNvbnN0IGxvb2t1cCA9IHRvb2x0aXBEYXRhLmZpbHRlcihkID0+IG1hcmtlckRhdGEuZmluZChlID0+IGUua2V5ICE9PSBkLmtleSkpO1xuICAgICAgICAgIHJldHVybiB0b29sdGlwRGF0YS5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoTWF0aC5hYnMoY3Vyci52YWx1ZSAtIG1vdXNlVmFsKSA8IE1hdGguYWJzKHByZXYudmFsdWUgLSBtb3VzZVZhbCkgPyBjdXJyIDogcHJldik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IF9zZXRBY3RpdmVUb29sdGlwID0gKGVsKSA9PiB7XG4gICAgICAgICAgLy8gZHJhdyBob3ZlciBsYWJlbFxuICAgICAgICAgIF9kcmF3VG9vbHRpcHMoKGVsIGluc3RhbmNlb2YgQXJyYXkpID8gZWwgOiBbZWxdLCAnYWN0aXZlJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSBydWdzXG4gICAgICAgIF9zZXREZWZhdWx0VG9vbHRpcCgpO1xuXG4gICAgICAgIHJ1Z1RvdWNoQXJlYS5vbignbW91c2VvdmVyIG1vdXNlbW92ZSB0b3VjaGVudGVyIHRvdWNoc3RhcnQgdG91Y2htb3ZlJywgdGhyb3R0bGUoKCkgPT4ge1xuICAgICAgICAgIGlmICghZDMuZXZlbnQpIHJldHVybjtcbiAgICAgICAgICBfc2V0QWN0aXZlVG9vbHRpcChfZ2V0QWN0aXZlVG9vbHRpcChkMy5tb3VzZShjaGFydFNWRy5ub2RlKCkpWzBdKSk7XG5cbiAgICAgICAgICAvLyBpZiBzcGxpdCBheGlzIGFjdGl2ZSB0aGVuIHJlcG9zaXRpb24gaXQgdG8gYWNjb21vZGF0ZSB0aGUgem9vbWVkIHJ1Z3NcbiAgICAgICAgICAvLyBzcGxpdEF4aXNcbiAgICAgICAgICAvLyAgIC5pbnRlcnJ1cHQoKVxuICAgICAgICAgIC8vICAgLnRyYW5zaXRpb24odHJhbnNpdGlvbilcbiAgICAgICAgICAvLyAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsJHtwcm9wcy5oZWlnaHQgLSBwcm9wcy5tYXJnaW4uYm90dG9tICsgMyArIHByb3BzLnJ1Z1Byb3BzLmFjdGl2ZVJ1Z1pvb20gLyAyfSlgKTtcbiAgICAgICAgfSwgNTApKTtcblxuICAgICAgICBydWdUb3VjaEFyZWEub24oJ21vdXNlb3V0IHRvdWNobGVhdmUgdG91Y2hjYW5jZWwnLCAoKSA9PiB7XG4gICAgICAgICAgX3NldERlZmF1bHRUb29sdGlwKCk7XG4gICAgICAgICAgLy8gaWYgc3BsaXQgYXhpcyBhY3RpdmUgdGhlbiByZXBvc2l0aW9uIGl0IHRvIGFjY29tb2RhdGUgdGhlIHpvb21lZCBydWdzXG4gICAgICAgICAgLy8gc3BsaXRBeGlzXG4gICAgICAgICAgLy8gICAuaW50ZXJydXB0KClcbiAgICAgICAgICAvLyAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb24pXG4gICAgICAgICAgLy8gICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCR7cHJvcHMuaGVpZ2h0IC0gcHJvcHMubWFyZ2luLmJvdHRvbX0pYCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhJU1RPR1JBTSBDT0RFXG4gICAgaWYgKHByb3BzLmhpc3RvZ3JhbSkge1xuICAgICAgY29uc3QgaGlzdHMgPSBwbG90LmFwcGVuZFNlbGVjdCgnZy5oaXN0b2dyYW0nKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnaGlzdG9ncmFtJylcbiAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgIC5kYXRhKGJpbnMpO1xuXG4gICAgICBoaXN0cy5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCd4JywgZCA9PiB4U2NhbGUoZC54MCkgKyAxKVxuICAgICAgICAuYXR0cigneScsIGQgPT4geVNjYWxlKGQubGVuZ3RoIC8gZGF0YS5sZW5ndGgpKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBkID0+IHhTY2FsZShkLngxKSAtIHhTY2FsZShkLngwKSAtIDEpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBkID0+IHlTY2FsZSgwKSAtIHlTY2FsZShkLmxlbmd0aCAvIGRhdGEubGVuZ3RoKSlcbiAgICAgICAgLm1lcmdlKGhpc3RzKVxuICAgICAgICAudHJhbnNpdGlvbih0cmFuc2l0aW9uKVxuICAgICAgICAuYXR0cigneCcsIGQgPT4geFNjYWxlKGQueDApICsgMSlcbiAgICAgICAgLmF0dHIoJ3knLCBkID0+IHlTY2FsZShkLmxlbmd0aCAvIGRhdGEubGVuZ3RoKSlcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgZCA9PiB4U2NhbGUoZC54MSkgLSB4U2NhbGUoZC54MCkgLSAxKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgZCA9PiB5U2NhbGUoMCkgLSB5U2NhbGUoZC5sZW5ndGggLyBkYXRhLmxlbmd0aCkpO1xuXG4gICAgICBoaXN0cy5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICAgIC8vIEZPUiBISUdITElHSFRJTkcgVEhFIEJJTiBXSVRIIFRIRSBEQVRBIFBPSU5UXG4gICAgICAvLyBjb25zdCBkYXRhSGlnaGxpZ2h0ID0gYmlucy5maW5kKGVsZW1lbnQgPT4ge1xuICAgICAgLy8gICByZXR1cm4gZWxlbWVudC5pbmNsdWRlcyg2LjI5NjA4NjIxNjY3NjEyMDUpO1xuICAgICAgLy8gfSk7XG5cbiAgICAgIC8vIGNvbnNvbGUubG9nKChkYXRhSGlnaGxpZ2h0KSk7XG5cbiAgICAgIC8vIGNvbnN0IHBvc0hpZ2hsaWdodCA9IChkKSA9PiB7XG4gICAgICAvLyAgIHJldHVybiBbXG4gICAgICAvLyAgICAgWyhkLngwKSwgKDApXSxcbiAgICAgIC8vICAgICBbKGQueDApLCBkZW5zaXR5WyhkLngwKV1bMV1dLFxuICAgICAgLy8gICAgIFsoZC54MSksIGRlbnNpdHlbKGQueDEpXVsxXV0sXG4gICAgICAvLyAgICAgWyhkLngxKSwgKDApXSxcbiAgICAgIC8vICAgXTtcbiAgICAgIC8vIH07XG4gICAgICAvLyBjb25zb2xlLmxvZyhwYXRoSGlnaGxpZ2h0KGRhdGFIaWdobGlnaHQpKTtcbiAgICAgIC8vIHBsb3QuYXBwZW5kU2VsZWN0KCdwYXRoLmFyZWEtaGlnaGxpZ2h0JylcbiAgICAgIC8vICAgLmF0dHIoJ2NsYXNzJywgJ2FyZWEtaGlnaGxpZ2h0JylcbiAgICAgIC8vICAgLmRhdHVtKHBhdGhIaWdobGlnaHQoZGF0YUhpZ2hsaWdodCkpXG4gICAgICAvLyAgIC5hdHRyKCdmaWxsJywgJ3JlZCcpXG4gICAgICAvLyAgIC5zdHlsZSgnY2xpcC1wYXRoJywgJ3VybCgjY2xpcC1wYXRoKScpXG4gICAgICAvLyAgIC5hdHRyKCdkJywgZGlzdHJpYnV0aW9uQXJlYSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ291bnRyeVJhbmtpbmdTdHJpcHM7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})